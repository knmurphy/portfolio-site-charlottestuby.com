(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[3],{

/***/ "./node_modules/immutable/dist/immutable.js":
/*!**************************************************!*\
  !*** ./node_modules/immutable/dist/immutable.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level :  false || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/immutable/dist/immutable.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.6.0\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-03-02T17:08Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.6.0\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.6\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2021-02-16\n */\n( function( window ) {\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ( {} ).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpushNative = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" +\n\t\t\"ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5]\n\t\t// or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" +\n\t\twhitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace +\n\t\t\"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\treturn nonHex ?\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\tnonHex :\n\n\t\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t\t// Support: IE <=11+\n\t\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t\t// surrogate pair\n\t\t\thigh < 0 ?\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" +\n\t\t\t\tch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( ( target[ j++ ] = els[ i++ ] ) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t( nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\" ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\tif ( newContext !== context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split( \"|\" ),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[ i ] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( ( cur = cur.nextSibling ) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn ( name === \"input\" || name === \"button\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem && elem.namespaceURI,\n\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( preferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n\t// Safari 4 - 5 only, Opera <=11.6 - 12.x only\n\t// IE/Edge & older browsers don't support the :scope pseudo-class.\n\t// Support: Safari 6.0 only\n\t// Safari 6.0 supports :scope but it's an alias of :root there.\n\tsupport.scope = assert( function( el ) {\n\t\tdocElem.appendChild( el ).appendChild( document.createElement( \"div\" ) );\n\t\treturn typeof el.querySelectorAll !== \"undefined\" &&\n\t\t\t!el.querySelectorAll( \":scope fieldset div\" ).length;\n\t} );\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert( function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute( \"className\" );\n\t} );\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert( function( el ) {\n\t\tel.appendChild( document.createComment( \"\" ) );\n\t\treturn !el.getElementsByTagName( \"*\" ).length;\n\t} );\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[ \"ID\" ] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[ \"ID\" ] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[ \"TAG\" ] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[ \"CLASS\" ] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {\n\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert( function( el ) {\n\n\t\t\tvar input;\n\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll( \"[msallowcapture^='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"~=\" );\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t\t// Adding a temporary attribute to the document before the selection works\n\t\t\t// around the issue.\n\t\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\t\tinput = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"name\", \"\" );\n\t\t\tel.appendChild( input );\n\t\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\t\trbuggyQSA.push( \":checked\" );\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t\t}\n\n\t\t\t// Support: Firefox <=3.6 - 5 only\n\t\t\t// Old Firefox doesn't throw on a badly-escaped identifier.\n\t\t\tel.querySelectorAll( \"\\\\\\f\" );\n\t\t\trbuggyQSA.push( \"[\\\\r\\\\n\\\\f]\" );\n\t\t} );\n\n\t\tassert( function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll( \"[name=d]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll( \":enabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: Opera 10 - 11 only\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll( \"*,:x\" );\n\t\t\trbuggyQSA.push( \",.*:\" );\n\t\t} );\n\t}\n\n\tif ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector ) ) ) ) {\n\n\t\tassert( function( el ) {\n\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t} );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( \"|\" ) );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t) );\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( ( b = b.parentNode ) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a == document || a.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b == document || b.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\treturn a == document ? -1 :\n\t\t\t\tb == document ? 1 :\n\t\t\t\t/* eslint-enable eqeqeq */\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[ i ] === bp[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[ i ], bp[ i ] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\tap[ i ] == preferredDoc ? -1 :\n\t\t\tbp[ i ] == preferredDoc ? 1 :\n\t\t\t/* eslint-enable eqeqeq */\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t// fragment in IE 9\n\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] ||\n\t\t\t\tmatch[ 5 ] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" ) );\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr[ \"CHILD\" ].test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace +\n\t\t\t\t\t\")\" + className + \"(\" + whitespace + \"|$)\" ) ) && classCache(\n\t\t\t\t\t\tclassName, function( elem ) {\n\t\t\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\t/* eslint-disable max-len */\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\t\"has\": markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\t\"contains\": markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement &&\n\t\t\t\t( !document.hasFocus || document.hasFocus() ) &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn ( nodeName === \"input\" && !!elem.checked ) ||\n\t\t\t\t( nodeName === \"option\" && !!elem.selected );\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[ \"empty\" ]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\t\"last\": createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\t\"eq\": createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\t\"even\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"odd\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"lt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"gt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos[ \"nth\" ] = Expr.pseudos[ \"eq\" ];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rcombinators.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrim, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] ||\n\t\t\t\t\t\t\t( outerCache[ elem.uniqueID ] = {} );\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = uniqueCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts(\n\t\t\t\tselector || \"*\",\n\t\t\t\tcontext.nodeType ? [ context ] : context,\n\t\t\t\t[]\n\t\t\t),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\ttokens\n\t\t\t\t\t\t.slice( 0, i - 1 )\n\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[ \"TAG\" ]( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache(\n\t\t\tselector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers )\n\t\t);\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find[ \"ID\" ]( token.matches[ 0 ]\n\t\t\t\t.replace( runescape, funescape ), context ) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[ \"needsContext\" ].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert( function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute( \"href\" ) === \"#\";\n} ) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert( function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n} ) ) {\n\taddHandle( \"value\", function( elem, _name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert( function( el ) {\n\treturn el.getAttribute( \"disabled\" ) == null;\n} ) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\t\tnull;\n\t\t}\n\t} );\n}\n\nreturn Sizzle;\n\n} )( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t// Support: Chrome 86+\n\t\t\t\t\t\t// In Chrome, if an element having a focusout handler is blurred by\n\t\t\t\t\t\t// clicking outside of it, it invokes the handler synchronously. If\n\t\t\t\t\t\t// that handler calls `.remove()` on the element, the data is cleared,\n\t\t\t\t\t\t// leaving `result` undefined. We need to guard against this.\n\t\t\t\t\t\treturn result && result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\t// Suppress native focus or blur as it's already being fired\n\t\t// in leverageNative.\n\t\t_default: function() {\n\t\t\treturn true;\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is display: block\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\n\t\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./node_modules/netlify-cms-media-library-uploadcare/dist/esm/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/netlify-cms-media-library-uploadcare/dist/esm/index.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.NetlifyCmsMediaLibraryUploadcare = void 0;\n\nvar _uploadcareWidget = _interopRequireDefault(__webpack_require__(/*! uploadcare-widget */ \"./node_modules/uploadcare-widget/uploadcare.js\"));\n\nvar _uploadcareWidgetTabEffects = _interopRequireDefault(__webpack_require__(/*! uploadcare-widget-tab-effects */ \"./node_modules/uploadcare-widget-tab-effects/dist/uploadcare.tab-effects.es.js\"));\n\nvar _immutable = __webpack_require__(/*! immutable */ \"./node_modules/immutable/dist/immutable.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nwindow.UPLOADCARE_LIVE = false;\nwindow.UPLOADCARE_MANUAL_START = true;\nconst USER_AGENT = 'NetlifyCMS-Uploadcare-MediaLibrary';\nconst CDN_BASE_URL = 'https://ucarecdn.com';\n/**\n * Default Uploadcare widget configuration, can be overridden via config.yml.\n */\n\nconst defaultConfig = {\n  previewStep: true,\n  integration: USER_AGENT\n};\n/**\n * Determine whether an array of urls represents an unaltered set of Uploadcare\n * group urls. If they've been changed or any are missing, a new group will need\n * to be created to represent the current values.\n */\n\nfunction isFileGroup(files) {\n  const basePatternString = `~${files.length}/nth/`;\n\n  function mapExpression(val, idx) {\n    return new RegExp(`${basePatternString}${idx}/$`);\n  }\n\n  const expressions = Array.from({\n    length: files.length\n  }, mapExpression);\n  return expressions.every(exp => files.some(url => exp.test(url)));\n}\n/**\n * Returns a fileGroupInfo object wrapped in a promise-like object.\n */\n\n\nfunction getFileGroup(files) {\n  /**\n   * Capture the group id from the first file in the files array.\n   */\n  const groupId = new RegExp(`^.+/([^/]+~${files.length})/nth/`).exec(files[0])[1];\n  /**\n   * The `openDialog` method handles the jQuery promise object returned by\n   * `fileFrom`, but requires the promise returned by `loadFileGroup` to provide\n   * the result of it's `done` method.\n   */\n\n  return new Promise(resolve => _uploadcareWidget.default.loadFileGroup(groupId).done(group => resolve(group)));\n}\n/**\n * Convert a url or array/List of urls to Uploadcare file objects wrapped in\n * promises, or Uploadcare groups when possible. Output is wrapped in a promise\n * because the value we're returning may be a promise that we created.\n */\n\n\nfunction getFiles(value) {\n  if (Array.isArray(value) || _immutable.Iterable.isIterable(value)) {\n    const arr = Array.isArray(value) ? value : value.toJS();\n    return isFileGroup(arr) ? getFileGroup(arr) : Promise.all(arr.map(val => getFile(val)));\n  }\n\n  return value && typeof value === 'string' ? getFile(value) : null;\n}\n/**\n * Convert a single url to an Uploadcare file object wrapped in a promise-like\n * object. Group urls that get passed here were not a part of a complete and\n * untouched group, so they'll be uploaded as new images (only way to do it).\n */\n\n\nfunction getFile(url) {\n  const groupPattern = /~\\d+\\/nth\\/\\d+\\//;\n  const uploaded = url.startsWith(CDN_BASE_URL) && !groupPattern.test(url);\n  return _uploadcareWidget.default.fileFrom(uploaded ? 'uploaded' : 'url', url);\n}\n/**\n * Open the standalone dialog. A single instance is created and destroyed for\n * each use.\n */\n\n\nfunction openDialog({\n  files,\n  config,\n  handleInsert,\n  settings = {}\n}) {\n  if (settings.defaultOperations && !settings.defaultOperations.startsWith('/')) {\n    console.warn('Uploadcare default operations should start with `/`. Example: `/preview/-/resize/100x100/image.png`');\n  }\n\n  function buildUrl(fileInfo) {\n    const {\n      cdnUrl,\n      name,\n      isImage\n    } = fileInfo;\n    let url = isImage && settings.defaultOperations ? `${cdnUrl}-${settings.defaultOperations}` : cdnUrl;\n    const filenameDefined = !url.endsWith('/');\n\n    if (!filenameDefined && settings.autoFilename) {\n      url = url + name;\n    }\n\n    return url;\n  }\n\n  _uploadcareWidget.default.openDialog(files, config).done(({\n    promise,\n    files\n  }) => {\n    const isGroup = Boolean(files);\n    return promise().then(info => {\n      if (isGroup) {\n        return Promise.all(files().map(promise => promise.then(fileInfo => buildUrl(fileInfo)))).then(urls => handleInsert(urls));\n      } else {\n        handleInsert(buildUrl(info));\n      }\n    });\n  });\n}\n/**\n * Initialization function will only run once, returns an API object for Netlify\n * CMS to call methods on.\n */\n\n\nasync function init({\n  options = {\n    config: {},\n    settings: {}\n  },\n  handleInsert\n} = {}) {\n  const _options$config = options.config,\n        {\n    publicKey\n  } = _options$config,\n        globalConfig = _objectWithoutProperties(_options$config, [\"publicKey\"]);\n\n  const baseConfig = _objectSpread(_objectSpread({}, defaultConfig), globalConfig);\n\n  window.UPLOADCARE_PUBLIC_KEY = publicKey;\n  /**\n   * Register the effects tab by default because the effects tab is awesome. Can\n   * be disabled via config.\n   */\n\n  _uploadcareWidget.default.registerTab('preview', _uploadcareWidgetTabEffects.default);\n\n  return {\n    /**\n     * On show, create a new widget, cache it in the widgets object, and open.\n     * No hide method is provided because the widget doesn't provide it.\n     */\n    show: ({\n      value,\n      config: instanceConfig = {},\n      allowMultiple,\n      imagesOnly = false\n    } = {}) => {\n      const config = _objectSpread(_objectSpread({}, baseConfig), {}, {\n        imagesOnly\n      }, instanceConfig);\n\n      const multiple = allowMultiple === false ? false : !!config.multiple;\n\n      const resolvedConfig = _objectSpread(_objectSpread({}, config), {}, {\n        multiple\n      });\n\n      const files = getFiles(value);\n      /**\n       * Resolve the promise only if it's ours. Only the jQuery promise objects\n       * from the Uploadcare library will have a `state` method.\n       */\n\n      if (files && !files.state) {\n        return files.then(result => openDialog({\n          files: result,\n          config: resolvedConfig,\n          settings: options.settings,\n          handleInsert\n        }));\n      } else {\n        return openDialog({\n          files,\n          config: resolvedConfig,\n          settings: options.settings,\n          handleInsert\n        });\n      }\n    },\n\n    /**\n     * Uploadcare doesn't provide a \"media library\" widget for viewing and\n     * selecting existing files, so we return `false` here so Netlify CMS only\n     * opens the Uploadcare widget when called from an editor control. This\n     * results in the \"Media\" button in the global nav being hidden.\n     */\n    enableStandalone: () => false\n  };\n}\n/**\n * The object that will be registered only needs a (default) name and `init`\n * method. The `init` method returns the API object.\n */\n\n\nconst uploadcareMediaLibrary = {\n  name: 'uploadcare',\n  init\n};\nconst NetlifyCmsMediaLibraryUploadcare = uploadcareMediaLibrary;\nexports.NetlifyCmsMediaLibraryUploadcare = NetlifyCmsMediaLibraryUploadcare;\nvar _default = uploadcareMediaLibrary;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/netlify-cms-media-library-uploadcare/dist/esm/index.js\n");

/***/ }),

/***/ "./node_modules/uploadcare-widget-tab-effects/dist/uploadcare.tab-effects.es.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/uploadcare-widget-tab-effects/dist/uploadcare.tab-effects.es.js ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var uploadcare_widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uploadcare-widget */ \"./node_modules/uploadcare-widget/uploadcare.js\");\n/* harmony import */ var uploadcare_widget__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(uploadcare_widget__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * uploadcareTabEffects 1.4.7\n * Effects Tab for Uploadcare Widget. Edit images in desktop and mobile browsers.\n * https://github.com/uploadcare/uploadcare-widget-tab-effects#readme\n * Date: 2020-06-05\n */\n\nfunction __$styleInject (css, returnValue) {\n  if (typeof document === 'undefined') {\n    return returnValue;\n  }\n  css = css || '';\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n  if (style.styleSheet){\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n  head.appendChild(style);\n  return returnValue;\n}\n__$styleInject(\"\\n.uploadcare-tab-effects--crops{display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;max-width:100%}\\n.uploadcare-tab-effects--effect-button{-ms-flex-negative:1;flex-shrink:1;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:end;justify-content:flex-end;-ms-flex-align:center;align-items:center;padding:0;width:45px;height:45px;border-color:transparent;background:transparent;color:#212121;fill:#212121}.uploadcare-tab-effects--effect-button:active,.uploadcare-tab-effects--effect-button:focus,.uploadcare-tab-effects--effect-button:hover{fill:#0969ee;color:#0969ee}.uploadcare-tab-effects--effect-button:focus,.uploadcare-tab-effects--effect-button:hover{border-color:transparent;background:transparent}.uploadcare-tab-effects--effect-button[aria-disabled=true]{border-color:transparent!important;background:transparent!important;color:#d4d2d2!important;fill:#d4d2d2!important}.uploadcare-tab-effects--effect-button:before{content:\\\"\\\";display:block;-ms-flex-order:1;order:1;margin:1px 0;width:6px;height:6px;background:transparent;border-radius:50%}.uploadcare-tab-effects--effect-button_applied:before{background:#157cfc}@media (min-width:760px){.uploadcare-tab-effects--effect-button:focus,.uploadcare-tab-effects--effect-button:hover{position:relative;overflow:visible}.uploadcare-tab-effects--effect-button:focus:after,.uploadcare-tab-effects--effect-button:hover:after{content:attr(aria-label);display:block;position:absolute;top:0;left:50%;width:auto;height:auto;background:#e3e1e1;color:#212121;-webkit-transform:translateX(-50%) translateY(-100%);transform:translateX(-50%) translateY(-100%);padding:12px;border-radius:6px;line-height:1;min-width:100%}}\\n.uploadcare-tab-effects--icon{height:32px}\\n.uploadcare-tab-effects--effects{display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;max-width:100%}\\n.uploadcare-tab-effects--additions{-ms-flex-positive:1;flex-grow:1}\\n\\n\\n.uploadcare-tab-effects--range{-ms-flex-positive:1;flex-grow:1}input[type=range].uploadcare-tab-effects--range__input{box-sizing:border-box;margin:0;padding:0;width:100%;height:40px;line-height:1}input[type=range].uploadcare-tab-effects--range__input:focus{outline:2px solid rgba(21,124,252,.5);outline-offset:1px}input[type=range].uploadcare-tab-effects--range__input::-moz-range-track{background:#d4d2d2}input[type=range].uploadcare-tab-effects--range__input::-moz-range-progress{background:#157cfc}input[type=range].uploadcare-tab-effects--range__input::-moz-range-thumb{border:none;background:#212121;box-shadow:none}input[type=range].uploadcare-tab-effects--range__input::-moz-range-thumb:focus,input[type=range].uploadcare-tab-effects--range__input::-moz-range-thumb:hover{background:#000}input[type=range].uploadcare-tab-effects--range__input::-moz-range-thumb:active{background:#000}input[type=range].uploadcare-tab-effects--range__input::-ms-track{background:#d4d2d2}input[type=range].uploadcare-tab-effects--range__input::-ms-fill-lower{background:#157cfc}input[type=range].uploadcare-tab-effects--range__input::-ms-thumb{background:#212121}input[type=range].uploadcare-tab-effects--range__input::-ms-thumb:active,input[type=range].uploadcare-tab-effects--range__input:focus::-ms-thumb{background:#000}\")\n\n\n\nvar be = {\n  effects: {\n    captions: {\n      blur: 'Размыццё',\n      crop: 'Абрэзка',\n      enhance: 'Паляпшэнне',\n      flip: 'Адлюстраваць па вертыкалі',\n      grayscale: 'Адценні шэрага',\n      invert: 'Інвертаваць',\n      mirror: 'Адлюстраваць па гарызанталі',\n      rotate: 'Павярнуць',\n      sharp: 'Выразнасць'\n    },\n    apply: 'Ужыць'\n  }\n};\n\nvar en = {\n  effects: {\n    captions: {\n      blur: 'Blur',\n      crop: 'Crop',\n      enhance: 'Enhance',\n      flip: 'Flip',\n      grayscale: 'Grayscale',\n      invert: 'Invert',\n      mirror: 'Mirror',\n      rotate: 'Rotate',\n      sharp: 'Sharpen'\n    },\n    apply: 'Apply'\n  }\n};\n\nvar fr = {\n  effects: {\n    captions: {\n      blur: 'Flouter',\n      crop: 'Recadrer',\n      enhance: 'Effets',\n      flip: 'Retourner',\n      grayscale: 'Noir et blanc',\n      invert: 'Inverser',\n      mirror: 'Mirroir',\n      rotate: 'Tourner',\n      sharp: 'Netteté'\n    },\n    apply: 'Appliquer'\n  }\n};\n\nvar it = {\n  effects: {\n    captions: {\n      blur: 'Sfoca',\n      crop: 'Ritaglia',\n      enhance: 'Accentua',\n      flip: 'Capovolgi',\n      grayscale: 'Bianconero',\n      invert: 'Inverti',\n      mirror: 'Specchia',\n      rotate: 'Ruota',\n      sharp: 'Nitidezza'\n    },\n    apply: 'Applica'\n  }\n};\n\nvar ja = {\n  effects: {\n    captions: {\n      blur: 'ぼかし',\n      crop: 'トリミング',\n      enhance: '補正',\n      flip: '反転',\n      grayscale: 'グレースケール',\n      invert: '階調反転',\n      mirror: 'ミラー',\n      rotate: '回転',\n      sharp: 'シャープ'\n    },\n    apply: '適用'\n  }\n};\n\nvar nl = {\n  effects: {\n    captions: {\n      blur: 'Vervagen',\n      crop: 'Bijknippen',\n      enhance: 'Verbeteren',\n      flip: 'Omkeren',\n      grayscale: 'Zwart-wit',\n      invert: 'Inverteren',\n      mirror: 'Spiegelen',\n      rotate: 'Roteren',\n      sharp: 'Verscherpen'\n    },\n    apply: 'Toepassen'\n  }\n};\n\nvar ru = {\n  effects: {\n    captions: {\n      blur: 'Размытие',\n      crop: 'Обрезка',\n      enhance: 'Улучшение',\n      flip: 'Отразить по вертикали',\n      grayscale: 'Оттенки серого',\n      invert: 'Инвертировать',\n      mirror: 'Отразить по горизонтали',\n      rotate: 'Повернуть',\n      sharp: 'Резкость'\n    },\n    apply: 'Применить'\n  }\n};\n\nvar vi = {\n  effects: {\n    captions: {\n      blur: 'Mờ',\n      crop: 'Cắt',\n      enhance: 'Tinh chỉnh',\n      flip: 'Lật',\n      grayscale: 'Xám',\n      invert: 'Âm bản',\n      mirror: 'Gương',\n      rotate: 'Xoay',\n      sharp: 'Làm nét'\n    },\n    apply: 'Áp dụng'\n  }\n};\n\n\n\nvar locales = Object.freeze({\n\tbe: be,\n\ten: en,\n\tfr: fr,\n\tit: it,\n\tja: ja,\n\tnl: nl,\n\tru: ru,\n\tvi: vi\n});\n\nvar initialSettings = {\n  effects: ['crop', 'rotate', 'enhance', 'sharp', 'grayscale'],\n  locale: 'en'\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n/**\n * Check if locale available in list of locales for Tab.\n * @param locale\n * @return {boolean}\n */\nvar isLocaleAvailable = function isLocaleAvailable(locale) {\n  var availableLocales = Object.keys(locales);\n\n  return availableLocales.indexOf(locale) > -1;\n};\n\n/**\n * Configure translations for Tab.\n * @param translations\n * @param currentLocale\n * @return {*}\n */\nvar configureTranslations = function configureTranslations(translations, currentLocale) {\n  var extendedTranslations = _extends({}, translations);\n  var isCurrentLocaleAvailable = isLocaleAvailable(currentLocale);\n  var defaultTranslations = locales[initialSettings.locale];\n  var isLocaleAvailableInTranslations = function isLocaleAvailableInTranslations(locale) {\n    return extendedTranslations.hasOwnProperty(locale);\n  };\n\n  for (var locale in extendedTranslations) {\n    if (isLocaleAvailableInTranslations(locale)) {\n      if (!isLocaleAvailableInTranslations(currentLocale)) {\n        var currentLocaleTranslations = extendedTranslations[currentLocale];\n\n        extendedTranslations[currentLocale] = _extends({}, currentLocaleTranslations, defaultTranslations);\n\n        /* eslint-disable no-continue */\n        continue;\n      }\n\n      if (isCurrentLocaleAvailable || isLocaleAvailable(locale)) {\n        extendedTranslations[locale] = _extends({}, extendedTranslations[locale], locales[locale]);\n      } else {\n        extendedTranslations[locale] = _extends({}, extendedTranslations[locale], defaultTranslations);\n      }\n    }\n  }\n\n  return extendedTranslations;\n};\n\nvar createNode = function createNode(html) {\n  return new DOMParser().parseFromString(html, 'text/html').body.firstChild;\n};\n\nfunction customExtends(child, parent) {\n  for (var key in parent) {\n    if (Object.prototype.hasOwnProperty.call(parent, key)) {\n      child[key] = parent[key];\n    }\n  }\n\n  function Ctor() {\n    this.constructor = child;\n  }\n\n  Ctor.prototype = parent.prototype;\n  child.prototype = new Ctor();\n  child.__super__ = parent.prototype;\n\n  return child;\n}\n\nvar effectsDefaults = {\n  blur: ['number', 10],\n  enhance: ['number', 50],\n  flip: ['boolean'],\n  grayscale: ['boolean'],\n  invert: ['boolean'],\n  mirror: ['boolean'],\n  rotate: ['number'],\n  sharp: ['number', 5]\n};\n\nvar modifierRegExp = {\n  blur: /-\\/blur\\/(([0-9]+)\\/|)/i,\n  crop: /-\\/crop\\/([0-9]+)x([0-9]+)(\\/(center|([0-9]+),([0-9]+)))?\\/(-\\/resize\\/([0-9]+)x([0-9]+)\\/)?/i,\n  enhance: /-\\/enhance\\/(([0-9]+)\\/|)/i,\n  flip: /-\\/flip\\//i,\n  grayscale: /-\\/grayscale\\//i,\n  invert: /-\\/invert\\//i,\n  mirror: /-\\/mirror\\//i,\n  rotate: /-\\/rotate\\/(([0-9]+)\\/)/i,\n  sharp: /-\\/sharp\\/(([0-9]+)\\/|)/i\n};\n\nfunction effectsFromModifiers(cdnUrlModifiers, settingsEffects, settingsCrop) {\n  if (!cdnUrlModifiers) {\n    return {\n      effects: {},\n      otherModifiers: ''\n    };\n  }\n\n  var effects = {};\n  var otherModifiers = cdnUrlModifiers.replace(/-\\/preview\\//g, '');\n\n  settingsEffects.forEach(function (settingsEffect) {\n    if (modifierRegExp[settingsEffect]) {\n      var foundModifier = cdnUrlModifiers.match(modifierRegExp[settingsEffect]);\n\n      if (foundModifier) {\n        var effectValue = void 0;\n\n        if (settingsEffect === 'crop') {\n          var resizeTo = foundModifier[7] && [foundModifier[8], foundModifier[9]];\n\n          var cropWidth = parseInt(foundModifier[1]);\n          var cropHeight = parseInt(foundModifier[2]);\n\n          var cropIndex = settingsCrop.findIndex(function (settings) {\n            if (typeof settings.preferedSize === 'undefined') {\n              return true;\n            }\n\n            var _settings$preferedSiz = slicedToArray(settings.preferedSize, 2),\n                w = _settings$preferedSiz[0],\n                h = _settings$preferedSiz[1];\n\n            var sameSize = cropWidth === w && cropHeight === h;\n            var sameRatio = (w / h).toPrecision(2) === (cropWidth / cropHeight).toPrecision(2);\n\n            return sameSize || sameRatio;\n          });\n\n          effectValue = {\n            resizeTo: resizeTo,\n            index: cropIndex >= 0 ? cropIndex : null,\n            coords: {\n              width: cropWidth,\n              height: cropHeight,\n              center: foundModifier[4] === 'center',\n              left: foundModifier[5] === undefined ? undefined : parseInt(foundModifier[5]),\n              top: foundModifier[6] === undefined ? undefined : parseInt(foundModifier[6])\n            }\n          };\n        } else {\n          if (effectsDefaults[settingsEffect][0] === 'boolean') {\n            effectValue = true;\n          }\n          if (effectsDefaults[settingsEffect][0] === 'number') {\n            effectValue = foundModifier[2] === undefined ? effectsDefaults[settingsEffect][1] : parseInt(foundModifier[2]);\n          }\n        }\n\n        effects[settingsEffect] = effectValue;\n        otherModifiers = otherModifiers.replace(foundModifier[0], '');\n      }\n    }\n  });\n\n  return {\n    effects: effects,\n    otherModifiers: otherModifiers\n  };\n}\n\nvar initialState = {\n  view: 'preview',\n  image: {},\n  appliedEffects: {\n    blur: 0,\n    crop: null,\n    enhance: 0,\n    flip: false,\n    grayscale: false,\n    invert: false,\n    mirror: false,\n    rotate: 0,\n    sharp: 0\n  },\n  otherModifiers: ''\n};\n\nvar getAppliedEffects = function getAppliedEffects(settingsEffects) {\n  var initialAppliedEffects = initialState.appliedEffects;\n\n  var appliedEffects = {};\n\n  settingsEffects.forEach(function (settingsEffect) {\n    if (initialAppliedEffects[settingsEffect] !== undefined) {\n      appliedEffects[settingsEffect] = initialAppliedEffects[settingsEffect];\n    }\n  });\n\n  return appliedEffects;\n};\n\nvar getModifiersByCrop = function getModifiersByCrop(crop) {\n  var size = crop.originalSize;\n  var _crop$coords = crop.coords,\n      width = _crop$coords.width,\n      height = _crop$coords.height,\n      center = _crop$coords.center,\n      left = _crop$coords.left,\n      top = _crop$coords.top;\n\n\n  var modifiers = '';\n\n  if (size) {\n    var wholeImage = width === size[0] && height === size[1];\n\n    if (!wholeImage) {\n      modifiers += '-/crop/' + width + 'x' + height + '/' + left + ',' + top + '/';\n    }\n  } else {\n    modifiers += '-/crop/' + width + 'x' + height + '/';\n\n    if (center) {\n      modifiers += 'center/';\n    } else if (left !== undefined && top !== undefined) {\n      modifiers += left + ',' + top + '/';\n    }\n  }\n\n  if (crop.resizeTo) {\n    modifiers += '-/resize/' + crop.resizeTo.join('x') + '/';\n  } else {\n    modifiers += '-/preview/';\n  }\n\n  return modifiers;\n};\n\nvar getModifiersByEffects = function getModifiersByEffects(effects) {\n  var withCrop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var withRFM = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var cdnUrlModifiers = '';\n\n  for (var effect in effects) {\n    if (effects[effect]) {\n      switch (_typeof(effects[effect])) {\n        case 'boolean':\n          if (!withRFM && !!~['flip', 'mirror'].indexOf(effect)) {\n            break;\n          }\n          cdnUrlModifiers += '-/' + effect + '/';\n          break;\n        case 'number':\n          if (!withRFM && effect === 'rotate') {\n            break;\n          }\n          cdnUrlModifiers += '-/' + effect + '/' + effects[effect] + '/';\n          break;\n        case 'object':\n          if (effect === 'crop' && withCrop) {\n            cdnUrlModifiers += getModifiersByCrop(effects[effect]);\n          }\n          break;\n      }\n    }\n  }\n\n  if (cdnUrlModifiers) {\n    cdnUrlModifiers = effects['crop'] && withCrop ? cdnUrlModifiers : '-/preview/' + cdnUrlModifiers;\n  } else {\n    cdnUrlModifiers = '';\n  }\n\n  return cdnUrlModifiers;\n};\n\nvar rotateValues = [0, 270, 180, 90];\nvar getNextRotateValue = function getNextRotateValue(currentValue) {\n  var currentIndex = rotateValues.indexOf(currentValue);\n\n  if (!~currentIndex || currentIndex === rotateValues.length - 1) {\n    return rotateValues[0];\n  }\n\n  return rotateValues[currentIndex + 1];\n};\n\nvar getSettingsCrop = function getSettingsCrop(crop, effects) {\n  if (crop || !~effects.indexOf('crop')) {\n    return crop;\n  }\n\n  return [{\n    downscale: false,\n    notLess: false,\n    preferedSize: undefined,\n    upscale: false\n  }];\n};\n\nvar ALL_EFFECTS = ['crop', 'rotate', 'mirror', 'flip', 'blur', 'sharp', 'enhance', 'grayscale', 'invert'];\n\nvar getSettingsEffects = function getSettingsEffects(value) {\n  var settingsEffects = [];\n\n  if (typeof value === 'string' && value === 'all') {\n    return ALL_EFFECTS;\n  }\n\n  if (typeof value === 'string') {\n    settingsEffects = value.replace(/\\s/g, '').split(',');\n  } else if (Array.isArray(value)) {\n    settingsEffects = value;\n  } else {\n    settingsEffects = initialSettings.effects;\n  }\n\n  var cropIndex = settingsEffects.indexOf('crop');\n\n  if (!!~cropIndex && cropIndex !== 0) {\n    settingsEffects = ['crop'].concat(toConsumableArray(settingsEffects.slice(0, cropIndex)), toConsumableArray(settingsEffects.slice(cropIndex + 1)));\n  }\n\n  return settingsEffects;\n};\n\nvar getGlobalSettingsByKey = function getGlobalSettingsByKey(key) {\n  var value = window['UPLOADCARE_' + key.toUpperCase()];\n\n  return typeof value === 'undefined' ? null : value;\n};\n\nvar getCropResize = function getCropResize(cropSettings, size) {\n  var _size = slicedToArray(size, 2),\n      width = _size[0],\n      height = _size[1];\n\n  var downscale = cropSettings.downscale && (width > cropSettings.preferedSize[0] || height > cropSettings.preferedSize[1]);\n  var upscale = cropSettings.upscale && (width < cropSettings.preferedSize[0] || height < cropSettings.preferedSize[1]);\n\n  if (downscale || upscale) {\n    return cropSettings.preferedSize;\n  } else {\n    return null;\n  }\n};\n\nvar autoCrop = function autoCrop(store, settings, uc) {\n  var crop = settings.crop;\n\n  var _store$getState = store.getState(),\n      image = _store$getState.image;\n\n  if (!crop) {\n    return;\n  }\n\n  // if even one of crop option sets allow free crop,\n  // we don't need to crop automatically\n  if (crop.some(function (c) {\n    return !c.preferedSize;\n  })) {\n    return;\n  }\n\n  if (!image.isImage || image.cdnUrlModifiers || image.crop) {\n    return;\n  }\n\n  var info = image.originalImageInfo;\n  var size = uc.utils.fitSize(crop[0].preferedSize, [info.width, info.height], true);\n\n  var cropEffect = {\n    originalSize: [info.width, info.height],\n    settings: crop[0],\n    resizeTo: getCropResize(crop[0], size),\n    coords: {\n      left: Math.round((info.width - size[0]) / 2),\n      top: Math.round((info.height - size[1]) / 2),\n      width: size[0],\n      height: size[1]\n    }\n  };\n\n  store.setAppliedEffect({ crop: cropEffect });\n  store.rebuildImage();\n};\n\nvar buildFileInfoCrop = function buildFileInfoCrop(crop) {\n  if (crop) {\n    var coords = crop.coords,\n        resizeTo = crop.resizeTo;\n\n\n    var cropInfo = {\n      width: coords.width,\n      height: coords.height,\n      left: coords.left,\n      top: coords.top\n    };\n\n    if (resizeTo) {\n      cropInfo.sw = resizeTo[0];\n      cropInfo.sh = resizeTo[1];\n    }\n\n    return cropInfo;\n  } else {\n    return null;\n  }\n};\n\nvar configureSettings = function configureSettings(settings) {\n  var effects = getSettingsEffects(settings.effects);\n  var crop = getSettingsCrop(settings.crop, effects);\n\n  return _extends({}, settings, { crop: crop }, { effects: effects }, { locale: settings.locale ? settings.locale : initialSettings.locale });\n};\n\nvar createStore = function createStore(initialState) {\n  var state = initialState;\n  var listeners = {\n    view: [],\n    imageLoad: [],\n    appliedEffects: [],\n    image: []\n  };\n\n  var getState = function getState() {\n    return state;\n  };\n\n  var setAppliedEffect = function setAppliedEffect(appliedEffect) {\n    var appliedEffects = _extends({}, state.appliedEffects, appliedEffect);\n\n    state = _extends({}, state, { appliedEffects: appliedEffects });\n    listeners['appliedEffects'].forEach(function (listener) {\n      return listener();\n    });\n  };\n\n  var setView = function setView(view) {\n    state = _extends({}, state, { view: view });\n    listeners['view'].forEach(function (listener) {\n      return listener();\n    });\n  };\n\n  var setImageLoad = function setImageLoad(imageLoad) {\n    state = _extends({}, state, { imageLoad: imageLoad });\n    listeners['imageLoad'].forEach(function (listener) {\n      return listener();\n    });\n  };\n\n  var rebuildImage = function rebuildImage() {\n    var _state = state,\n        appliedEffects = _state.appliedEffects,\n        image = _state.image;\n\n    var cdnUrlModifiers = getModifiersByEffects(appliedEffects) + state.otherModifiers;\n    var crop = buildFileInfoCrop(appliedEffects.crop);\n\n    state.image = _extends({}, image, {\n      cdnUrl: image.originalUrl + (cdnUrlModifiers || ''),\n      cdnUrlModifiers: cdnUrlModifiers,\n      crop: crop\n    });\n\n    listeners['image'].forEach(function (listener) {\n      return listener();\n    });\n  };\n\n  var subscribe = function subscribe(listener, source) {\n    listeners[source].push(listener);\n\n    return function () {\n      listeners[source] = listeners[source].filter(function (l) {\n        return l !== listener;\n      });\n    };\n  };\n\n  var subscribeToAppliedEffects = function subscribeToAppliedEffects(listener) {\n    return subscribe(listener, 'appliedEffects');\n  };\n  var subscribeToView = function subscribeToView(listener) {\n    return subscribe(listener, 'view');\n  };\n  var subscribeToImageLoad = function subscribeToImageLoad(listener) {\n    return subscribe(listener, 'imageLoad');\n  };\n  var subscribeToImage = function subscribeToImage(listener) {\n    return subscribe(listener, 'image');\n  };\n\n  return {\n    getState: getState,\n    setView: setView,\n    setImageLoad: setImageLoad,\n    setAppliedEffect: setAppliedEffect,\n    rebuildImage: rebuildImage,\n    subscribeToView: subscribeToView,\n    subscribeToImageLoad: subscribeToImageLoad,\n    subscribeToImage: subscribeToImage,\n    subscribeToAppliedEffects: subscribeToAppliedEffects\n  };\n};\n\nvar configureStore = function configureStore(image, settings) {\n  var effects = settings.effects,\n      crop = settings.crop;\n\n  var appliedEffects = getAppliedEffects(effects);\n  var appliedEffectsFromModifiers = effectsFromModifiers(image.cdnUrlModifiers, effects, crop);\n\n  return createStore(_extends({}, initialState, { image: image }, {\n    appliedEffects: _extends({}, appliedEffects, appliedEffectsFromModifiers.effects)\n  }, { otherModifiers: appliedEffectsFromModifiers.otherModifiers }));\n};\n\nvar template = (function (_) {\n  return \"<div class=\\\"uploadcare--tab__content uploadcare--preview__content uploadcare--preview__content_crop\\\"></div>\\n\";\n});\n\nvar Content = function Content() {\n  var $element = void 0;\n\n  var getElement = function getElement() {\n    if (!$element) {\n      render();\n    }\n\n    return $element;\n  };\n\n  var render = function render() {\n    $element = createNode(template());\n  };\n\n  var appendChild = function appendChild($child) {\n    if (!$element) return;\n\n    $element.appendChild($child);\n  };\n\n  return {\n    getElement: getElement,\n    appendChild: appendChild\n  };\n};\n\nvar cn = { \"crop-button\": \"uploadcare-tab-effects--crop-button\", \"crop-button__icon\": \"uploadcare-tab-effects--crop-button__icon\", \"cropButton\": \"uploadcare-tab-effects--crop-button\", \"cropButton__icon\": \"uploadcare-tab-effects--crop-button__icon\" };\n\nvar template$1 = (function (_) {\n  return '<div role=\"button\" tabindex=\"0\" class=\"uploadcare--button uploadcare--button_icon uploadcare--crop-sizes__item ' + _.cn['crop-button'] + '\" data-caption=\"' + _.title + '\">\\n  <div class=\"uploadcare--crop-sizes__icon ' + _.cn['crop-button__icon'] + '\"></div>\\n</div>\\n';\n});\n\nvar APPLIED_CLASS_NAME = 'uploadcare--crop-sizes__item_current';\nvar ICON_FREE_CLASS_NAME = 'uploadcare--crop-sizes__icon_free';\n\nvar CropButton = function CropButton(props) {\n  var $element = void 0;\n  var size = props.size,\n      title = props.title,\n      onClick = props.onClick;\n\n  var state = {\n    applied: props.applied || false,\n    disabled: props.disabled || false\n  };\n\n  var getElement = function getElement() {\n    if (!$element) {\n      render();\n    }\n\n    return $element;\n  };\n\n  var render = function render() {\n    $element = createNode(template$1({\n      title: title,\n      cn: cn\n    }));\n\n    setupIcon();\n\n    if (state.applied) {\n      $element.classList.add(APPLIED_CLASS_NAME);\n    }\n\n    $element.addEventListener('click', handleClick);\n  };\n\n  var setupIcon = function setupIcon() {\n    var $icon = $element.querySelector('.' + cn['crop-button__icon']);\n    var width = size.width,\n        height = size.height;\n\n\n    if (width && height) {\n      $icon.style.width = width;\n      $icon.style.height = height;\n    } else {\n      $icon.innerHTML = '\\n<svg width=\"32\" height=\"32\" role=\"presentation\" class=\"uploadcare--icon\">\\n  <use xlink:href=\"#uploadcare--icon-crop-free\"/>\\n</svg>\\n      ';\n      $icon.classList.add(ICON_FREE_CLASS_NAME);\n    }\n  };\n\n  var handleClick = function handleClick() {\n    if (state.disabled || !onClick) return;\n\n    onClick();\n  };\n\n  var toggleApplied = function toggleApplied(applied) {\n    if (!$element || state.applied === applied) return;\n\n    state.applied = applied;\n\n    $element.classList[applied ? 'add' : 'remove'](APPLIED_CLASS_NAME);\n  };\n\n  var toggleDisabled = function toggleDisabled(disabled) {\n    if (!$element || state.disabled === disabled) return;\n\n    state.disabled = disabled;\n\n    $element.setAttribute('aria-disabled', disabled);\n    $element.setAttribute('tabindex', disabled ? '-1' : '0');\n  };\n\n  return {\n    getElement: getElement,\n    toggleApplied: toggleApplied,\n    toggleDisabled: toggleDisabled\n  };\n};\n\nvar cn$1 = { \"crops\": \"uploadcare-tab-effects--crops\" };\n\nvar template$2 = (function (_) {\n  return \"<div class=\\\"\" + _.cn.crops + \"\\\"></div>\\n\";\n});\n\nvar Crops = function Crops(props) {\n  var $element = void 0;\n  var buttons = [];\n  var crops$$1 = props.crops,\n      onCropClick = props.onCropClick;\n\n  var state = { currentCrop: props.currentCrop || 0 };\n\n  var getElement = function getElement() {\n    if (!$element) {\n      render();\n    }\n\n    return $element;\n  };\n\n  var render = function render() {\n    $element = createNode(template$2({ cn: cn$1 }));\n\n    crops$$1.forEach(function (crop) {\n      var index = crop.index,\n          size = crop.size,\n          title = crop.title;\n\n\n      buttons[index] = new CropButton({\n        size: size,\n        title: title,\n        applied: state.currentCrop === index,\n        onClick: function onClick() {\n          if (state.currentCrop === index) return;\n\n          updateApplied(index);\n          onCropClick(crop);\n        }\n      });\n    });\n\n    buttons.forEach(function (button) {\n      return $element.appendChild(button.getElement());\n    });\n  };\n\n  var toggleDisabled = function toggleDisabled(isDisabled) {\n    if (!buttons) return;\n\n    buttons.forEach(function (button) {\n      return button.toggleDisabled(isDisabled);\n    });\n  };\n\n  var updateApplied = function updateApplied(currentCrop) {\n    if (!buttons) return;\n\n    state.currentCrop = currentCrop;\n\n    buttons.forEach(function (button, index) {\n      return button.toggleApplied(index === currentCrop);\n    });\n  };\n\n  return {\n    getElement: getElement,\n    toggleDisabled: toggleDisabled,\n    updateApplied: updateApplied\n  };\n};\n\nvar cn$2 = { \"effect-button\": \"uploadcare-tab-effects--effect-button\", \"effect-button_applied\": \"uploadcare-tab-effects--effect-button_applied\", \"effectButton\": \"uploadcare-tab-effects--effect-button\", \"effectButton_applied\": \"uploadcare-tab-effects--effect-button_applied\" };\n\nvar template$3 = (function (_) {\n  return '<div role=\"button\" tabindex=\"0\" class=\"uploadcare--button uploadcare--button_icon ' + _.cn['effect-button'] + '\" aria-label=\"' + _.title + '\"></div>\\n';\n});\n\nvar cn$3 = { \"icon\": \"uploadcare-tab-effects--icon\" };\n\nvar blur = (function (_) {\n  return \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\">\\n  <defs>\\n    <filter id=\\\"filter-blur\\\" width=\\\"200%\\\" height=\\\"200%\\\" x=\\\"-50%\\\" y=\\\"-50%\\\" filterUnits=\\\"objectBoundingBox\\\">\\n      <feGaussianBlur stdDeviation=\\\"3\\\" in=\\\"SourceGraphic\\\">\\n    </feGaussianBlur></filter>\\n  </defs>\\n  <circle cx=\\\"16\\\" cy=\\\"16\\\" r=\\\"8\\\" filter=\\\"url(#filter-blur)\\\"></circle>\\n</svg>\\n\";\n});\n\nvar crop = (function (_) {\n  return \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\">\\n  <path d=\\\"M21,23 L10.9999602,23 C9.8967381,23 9,22.0989187 9,21.0000398 L9,11 L5,11 L5,9 L9,9 L9,5 L11,5 C11,5 11.0034766,21 10.9999602,21 L27,21 L27,23 L23,23 L23,27 L21,27 L21,23 Z M13,11 L13,9 L21.0046024,9 C22.1100735,9 23,9.89939484 23,11.0081317 L23,19.1279297 L21,19.1279297 L21,11.0081317 C21,11.00117 13,11 13,11 Z\\\"></path>\\n</svg>\\n\";\n});\n\nvar enhance = (function (_) {\n  return \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\">\\n  <path d=\\\"M4.29289322,24.0082521 L16.3137085,11.9874369 C16.7042328,11.5969126 17.3373978,11.5969126 17.7279221,11.9874369 L20.5563492,14.815864 C20.9468735,15.2063883 20.9468735,15.8395533 20.5563492,16.2300776 L8.53553391,28.2508928 C8.14500961,28.6414171 7.51184464,28.6414171 7.12132034,28.2508928 L4.29289322,25.4224657 C3.90236893,25.0319414 3.90236893,24.3987764 4.29289322,24.0082521 Z M14.7175144,16.4120581 L16.131728,17.8262716 L18.4350288,15.5229708 L17.0208153,14.1087572 L14.7175144,16.4120581 L14.7175144,16.4120581 Z M16.3411081,7.13592111 L13.8054564,6.33578644 L16.3411081,5.53565177 L17.1412428,3 L17.9413775,5.53565177 L20.4770292,6.33578644 L17.9413775,7.13592111 L17.1412428,9.67157288 L16.3411081,7.13592111 Z M24.5356518,13.8304648 L22,13.0303301 L24.5356518,12.2301954 L25.3357864,9.69454365 L26.1359211,12.2301954 L28.6715729,13.0303301 L26.1359211,13.8304648 L25.3357864,16.3661165 L24.5356518,13.8304648 Z M9.53565177,10.8304648 L7,10.0303301 L9.53565177,9.23019541 L10.3357864,6.69454365 L11.1359211,9.23019541 L13.6715729,10.0303301 L11.1359211,10.8304648 L10.3357864,13.3661165 L9.53565177,10.8304648 Z M22.5356518,21.8304648 L20,21.0303301 L22.5356518,20.2301954 L23.3357864,17.6945436 L24.1359211,20.2301954 L26.6715729,21.0303301 L24.1359211,21.8304648 L23.3357864,24.3661165 L22.5356518,21.8304648 Z\\\"></path>\\n</svg>\\n\";\n});\n\nvar flip = (function (_) {\n  return \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\">\\n  <path d=\\\"M15.3492086,13.7592566 L8.34920863,7.7592566 C7.64431003,7.15505781 8.07159372,6 9,6 L23,6 C23.9284063,6 24.35569,7.15505781 23.6507914,7.7592566 L16.6507914,13.7592566 C16.2763016,14.0802478 15.7236984,14.0802478 15.3492086,13.7592566 Z M15.3492086,18.2407434 C15.7236984,17.9197522 16.2763016,17.9197522 16.6507914,18.2407434 L23.6507914,24.2407434 C24.35569,24.8449422 23.9284063,26 23,26 L9,26 C8.07159372,26 7.64431003,24.8449422 8.34920863,24.2407434 L15.3492086,18.2407434 Z M11.7032574,24 L20.2967426,24 L16,20.3170778 L11.7032574,24 Z M27,15 L27,17 L25,17 L25,15 L27,15 Z M23,15 L23,17 L21,17 L21,15 L23,15 Z M19,15 L19,17 L17,17 L17,15 L19,15 Z M15,15 L15,17 L13,17 L13,15 L15,15 Z M11,15 L11,17 L9,17 L9,15 L11,15 Z M7,15 L7,17 L5,17 L5,15 L7,15 Z\\\"></path>\\n</svg>\\n\";\n});\n\nvar grayscale = (function (_) {\n  return \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\">\\n  <path d=\\\"M19.3596223,12.0563396 L21.926451,14.6231683 C21.8411716,15.2691808 21.6833431,15.8923164 21.4614188,16.484122 L17.1233611,12.1460643 C16.660957,12.2457748 16.2168493,12.3946804 15.7967877,12.5870314 L20.8981472,17.688391 C20.6220708,18.1749895 20.2993732,18.6316689 19.936127,19.0523568 L14.3668527,13.4830825 C14.0447797,13.7487243 13.7487243,14.0447797 13.4830825,14.3668527 L19.0523568,19.936127 C18.6316689,20.2993732 18.1749895,20.6220708 17.688391,20.8981472 L12.5870314,15.7967877 C12.3946804,16.2168493 12.2457748,16.660957 12.1460643,17.1233611 L16.484122,21.4614188 C15.8923164,21.6833431 15.2691808,21.8411716 14.6231683,21.926451 L12.0563396,19.3596223 C12.4769606,22.5431547 15.2015668,25 18.5,25 C22.0898509,25 25,22.0898509 25,18.5 C25,15.2015668 22.5431547,12.4769606 19.3596223,12.0563396 Z M10.5324038,21.4675962 C7.30134737,20.2636648 5,17.1505866 5,13.5 C5,8.80557963 8.80557963,5 13.5,5 C17.1505866,5 20.2636648,7.30134737 21.4675962,10.5324038 C24.6986526,11.7363352 27,14.8494134 27,18.5 C27,23.1944204 23.1944204,27 18.5,27 C14.8494134,27 11.7363352,24.6986526 10.5324038,21.4675962 L10.5324038,21.4675962 Z\\\"></path>\\n</svg>\\n\";\n});\n\nvar invert = (function (_) {\n  return \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\n  <path d=\\\"M5,6.99180311 C5,5.89386312 5.90087297,5 6.99180311,5 L25.0081969,5 C26.1061369,5 27,5.90087297 27,6.99180311 L27,25.0081969 C27,26.1061369 26.099127,27 25.0081969,27 L6.99180311,27 C5.89386312,27 5,26.099127 5,25.0081969 L5,6.99180311 Z M25,7 L7,7 L7,25 L12.071629,19.928371 C13.0769868,20.9337288 14.4658757,21.5555556 16,21.5555556 C19.0682486,21.5555556 21.5555556,19.0682486 21.5555556,16 C21.5555556,14.4658757 20.9337288,13.0769868 19.928371,12.071629 L25,7 L25,7 Z M12.071629,19.928371 C11.0662712,18.9230132 10.4444444,17.5341243 10.4444444,16 C10.4444444,12.9317514 12.9317514,10.4444444 16,10.4444444 C17.5341243,10.4444444 18.9230132,11.0662712 19.928371,12.071629 L12.071629,19.928371 L12.071629,19.928371 Z\\\"></path>\\n</svg>\\n\";\n});\n\nvar mirror = (function (_) {\n  return \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\">\\n  <path d=\\\"M13.7592566,16.6507914 L7.7592566,23.6507914 C7.15505781,24.35569 6,23.9284063 6,23 L6,9 C6,8.07159372 7.15505781,7.64431003 7.7592566,8.34920863 L13.7592566,15.3492086 C14.0802478,15.7236984 14.0802478,16.2763016 13.7592566,16.6507914 Z M18.2407434,16.6507914 C17.9197522,16.2763016 17.9197522,15.7236984 18.2407434,15.3492086 L24.2407434,8.34920863 C24.8449422,7.64431003 26,8.07159372 26,9 L26,23 C26,23.9284063 24.8449422,24.35569 24.2407434,23.6507914 L18.2407434,16.6507914 Z M24,20.2967426 L24,11.7032574 L20.3170778,16 L24,20.2967426 Z M15,5 L17,5 L17,7 L15,7 L15,5 Z M15,9 L17,9 L17,11 L15,11 L15,9 Z M15,13 L17,13 L17,15 L15,15 L15,13 Z M15,17 L17,17 L17,19 L15,19 L15,17 Z M15,21 L17,21 L17,23 L15,23 L15,21 Z M15,25 L17,25 L17,27 L15,27 L15,25 Z\\\"></path>\\n</svg>\\n\";\n});\n\nvar rotate = (function (_) {\n  return \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\">\\n  <path d=\\\"M22.8449302,10.1550698 L22.8449302,10.1550698 C21.1616077,8.18356972 18.6836184,7 16,7 C11.0294373,7 7,11.0294373 7,16 C7,20.9705627 11.0294373,25 16,25 C18.6610655,25 21.131472,23.8397191 22.8318195,21.8591349 L24.3493086,23.1619115 C22.2729281,25.5805032 19.2506133,27 16,27 C9.92486775,27 5,22.0751322 5,16 C5,9.92486775 9.92486775,5 16,5 C19.224943,5 22.2084802,6.39983031 24.2627348,8.73726518 L27,6 L27,11.9970707 C27,12.5509732 26.5621186,13 25.9970707,13 L20,13 L22.8449302,10.1550698 Z M15,14 L17,14 C17.5522847,14 18,14.4477153 18,15 L18,17 C18,17.5522847 17.5522847,18 17,18 L15,18 C14.4477153,18 14,17.5522847 14,17 L14,15 C14,14.4477153 14.4477153,14 15,14 Z\\\"></path>\\n</svg>\\n\";\n});\n\nvar sharp = (function (_) {\n  return \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\">\\n  <polygon points=\\\"16 6 25 26 7 26\\\"></polygon>\\n</svg>\\n\";\n});\n\n\n\nvar icons = Object.freeze({\n\tblur: blur,\n\tcrop: crop,\n\tenhance: enhance,\n\tflip: flip,\n\tgrayscale: grayscale,\n\tinvert: invert,\n\tmirror: mirror,\n\trotate: rotate,\n\tsharp: sharp\n});\n\nvar Icon = function Icon(props) {\n  var name = props.name;\n\n\n  if (!icons[name]) {\n    throw new Error('Icon with name \"' + name + '\" doesn\\'t exist.');\n  }\n\n  var $element = void 0;\n\n  var getElement = function getElement() {\n    if (!$element) {\n      render();\n    }\n\n    return $element;\n  };\n\n  var render = function render() {\n    $element = createNode(icons[name]());\n\n    $element.setAttribute('class', $element.getAttribute('class') + ' ' + cn$3['icon']);\n  };\n\n  return { getElement: getElement };\n};\n\nvar EffectButton = function EffectButton(props) {\n  var $element = void 0;\n  var effect = props.effect,\n      title = props.title,\n      onClick = props.onClick;\n\n  var state = {\n    applied: props.applied || false,\n    disabled: props.disabled || false\n  };\n\n  var getElement = function getElement() {\n    if (!$element) {\n      render();\n    }\n\n    return $element;\n  };\n\n  var getEffect = function getEffect() {\n    return effect;\n  };\n\n  var render = function render() {\n    var _icon = new Icon({ name: effect });\n\n    $element = createNode(template$3({\n      title: title,\n      cn: cn$2\n    }));\n\n    $element.appendChild(_icon.getElement());\n\n    if (state.applied) {\n      $element.classList.add(cn$2['effect-button_applied']);\n    }\n\n    $element.addEventListener('click', handleClick);\n    $element.addEventListener('keypress', function (e) {\n      if (e.code === 'Enter') {\n        $element.dispatchEvent(new Event('click'));\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    });\n  };\n\n  var handleClick = function handleClick() {\n    if (state.disabled || !onClick) return;\n\n    onClick();\n  };\n\n  var toggleApplied = function toggleApplied(applied) {\n    if (!$element || state.applied === applied) return;\n\n    state.applied = applied;\n\n    $element.classList[applied ? 'add' : 'remove'](cn$2['effect-button_applied']);\n  };\n\n  var toggleDisabled = function toggleDisabled(disabled) {\n    if (!$element || state.disabled === disabled) return;\n\n    state.disabled = disabled;\n\n    $element.setAttribute('aria-disabled', disabled);\n    $element.setAttribute('tabindex', disabled ? -1 : 0);\n  };\n\n  return {\n    getElement: getElement,\n    getEffect: getEffect,\n    toggleApplied: toggleApplied,\n    toggleDisabled: toggleDisabled\n  };\n};\n\nvar cn$4 = { \"effects\": \"uploadcare-tab-effects--effects\" };\n\nvar template$4 = (function (_) {\n  return \"<div class=\\\"\" + _.cn.effects + \"\\\"></div>\\n\";\n});\n\nvar Effects = function Effects(props) {\n  var $element = void 0;\n  var buttons = [];\n  var effects$$1 = props.effects,\n      titles = props.titles,\n      onEffectClick = props.onEffectClick;\n\n  var state = { appliedEffects: props.appliedEffects };\n\n  var getElement = function getElement() {\n    if (!$element) {\n      render();\n    }\n\n    return $element;\n  };\n\n  var render = function render() {\n    $element = createNode(template$4({ cn: cn$4 }));\n\n    effects$$1.forEach(function (effect) {\n      var title = titles[effect];\n\n      buttons.push(new EffectButton({\n        effect: effect,\n        title: title,\n        applied: !!state.appliedEffects[effect],\n        onClick: function onClick() {\n          return onEffectClick(effect);\n        }\n      }));\n    });\n\n    buttons.forEach(function (button) {\n      return $element.appendChild(button.getElement());\n    });\n  };\n\n  var toggleDisabled = function toggleDisabled(isDisabled) {\n    if (!buttons) return;\n\n    buttons.forEach(function (button) {\n      return button.toggleDisabled(isDisabled);\n    });\n  };\n\n  var updateApplied = function updateApplied(appliedEffects) {\n    if (!buttons) return;\n\n    state.appliedEffects = appliedEffects;\n\n    buttons.forEach(function (button) {\n      return button.toggleApplied(!!appliedEffects[button.getEffect()]);\n    });\n  };\n\n  return {\n    getElement: getElement,\n    toggleDisabled: toggleDisabled,\n    updateApplied: updateApplied\n  };\n};\n\nvar cn$5 = { \"additions\": \"uploadcare-tab-effects--additions\", \"done\": \"uploadcare-tab-effects--done\", \"cancel\": \"uploadcare-tab-effects--cancel\" };\n\nvar template$5 = (function (_) {\n  return \"<div class=\\\"uploadcare--footer uploadcare--tab__footer\\\">\\n  <div class=\\\"uploadcare--footer__additions \" + _.cn.additions + \"\\\"></div>\\n\\n  <button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--footer__button uploadcare--preview__back \" + _.cn.cancel + \"\\\">\\n    \" + _.locale.cancel + \"\\n  </button>\\n\\n  <button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_primary uploadcare--footer__button uploadcare--preview__done \" + _.cn.done + \"\\\">\\n    \" + _.locale.done + \"\\n  </button>\\n</div>\\n\";\n});\n\nvar Footer = function Footer(props) {\n  var $element = void 0;\n  var $additionsElement = void 0;\n  var $doneElement = void 0;\n  var $cancelElement = void 0;\n  var locale = props.locale,\n      onDone = props.onDone,\n      onCancel = props.onCancel;\n\n\n  var getElement = function getElement() {\n    if (!$element) {\n      render();\n    }\n\n    return $element;\n  };\n\n  var render = function render() {\n    $element = createNode(template$5({\n      cn: cn$5,\n      locale: locale\n    }));\n\n    $additionsElement = $element.querySelector('.' + cn$5.additions);\n    $doneElement = $element.querySelector('.' + cn$5.done);\n    $cancelElement = $element.querySelector('.' + cn$5.cancel);\n\n    $doneElement.addEventListener('click', onDone);\n    $cancelElement.addEventListener('click', onCancel);\n  };\n\n  var empty = function empty() {\n    if (!$element) return;\n\n    while ($additionsElement.firstChild) {\n      $additionsElement.removeChild($additionsElement.firstChild);\n    }\n  };\n\n  var appendChild = function appendChild(child) {\n    if (!$element) return;\n\n    $additionsElement.appendChild(child);\n  };\n\n  var toggleDisabled = function toggleDisabled(isDisabled) {\n    if (!$doneElement) return;\n\n    $doneElement.disabled = isDisabled;\n  };\n\n  var updateDoneTitle = function updateDoneTitle() {\n    var newTitle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    $doneElement.innerText = newTitle ? newTitle : locale.done;\n  };\n\n  return {\n    getElement: getElement,\n    empty: empty,\n    appendChild: appendChild,\n    toggleDisabled: toggleDisabled,\n    updateDoneTitle: updateDoneTitle\n  };\n};\n\nvar cn$6 = { \"title\": \"uploadcare-tab-effects--title\" };\n\nvar template$6 = (function (_) {\n  return \"<div class=\\\"uploadcare--tab__header\\\">\\n  <div class=\\\"uploadcare--text uploadcare--text_size_large uploadcare--tab__title uploadcare--preview__title \" + _.cn.title + \"\\\">\\n    \" + _.title + \"\\n  </div>\\n</div>\\n\";\n});\n\nvar Header = function Header(props) {\n  var $element = void 0;\n  var $titleElement = void 0;\n  var title$$1 = props.title;\n\n\n  var getElement = function getElement() {\n    if (!$element) {\n      render();\n    }\n\n    return $element;\n  };\n\n  var render = function render() {\n    $element = createNode(template$6({\n      title: title$$1,\n      cn: cn$6\n    }));\n\n    $titleElement = $element.querySelector('.' + cn$6.title);\n  };\n\n  var updateTitle = function updateTitle(title$$1) {\n    if (!$titleElement) return;\n\n    $titleElement.innerText = title$$1;\n  };\n\n  return {\n    getElement: getElement,\n    updateTitle: updateTitle\n  };\n};\n\nvar cn$7 = { \"image\": \"uploadcare-tab-effects--image\", \"image-container\": \"uploadcare-tab-effects--image-container\", \"imageContainer\": \"uploadcare-tab-effects--image-container\" };\n\nvar template$7 = (function (_) {\n  return '<div class=\"uploadcare--media ' + _.cn['image-container'] + '\">\\n  <img src=\"' + _.imageUrl + '\" alt=\"\" class=\"uploadcare--media__image uploadcare--preview__image ' + _.cn.image + '\">\\n</div>\\n';\n});\n\nvar Image = function Image(props) {\n  var $element = void 0;\n  var $img = void 0;\n  var imageUrl = props.imageUrl,\n      onUpdate = props.onUpdate,\n      onLoad = props.onLoad,\n      onFail = props.onFail;\n\n\n  var getElement = function getElement() {\n    if (!$element) {\n      render();\n    }\n\n    return $element;\n  };\n\n  var getImg = function getImg() {\n    return $img;\n  };\n\n  var render = function render() {\n    $element = createNode(template$7({\n      cn: cn$7,\n      imageUrl: imageUrl\n    }));\n\n    $img = $element.querySelector('.' + cn$7.image);\n\n    $img.addEventListener('load', function () {\n      return onLoad();\n    });\n    $img.addEventListener('error', function () {\n      if ($img.complete) {\n        onFail();\n      }\n    });\n    $img.addEventListener('abort', function () {\n      return onFail();\n    });\n  };\n\n  var updateImageUrl = function updateImageUrl(imageUrl) {\n    if ($img.src === imageUrl) {\n      // safari do not call onload event when url is the same\n      // so we manually clear it before update\n      $img.removeAttribute('src');\n    }\n\n    $img.src = imageUrl;\n\n    onUpdate();\n  };\n\n  return {\n    getElement: getElement,\n    getImg: getImg,\n    updateImageUrl: updateImageUrl\n  };\n};\n\nvar cn$8 = { \"range\": \"uploadcare-tab-effects--range\", \"range__input\": \"uploadcare-tab-effects--range__input\" };\n\nvar template$8 = (function (_) {\n  return '<div class=\"' + _.cn.range + '\">\\n  <input type=\"range\" class=\"' + _.cn['range__input'] + '\" min=\"' + _.min + '\" max=\"' + _.max + '\" step=\"' + _.step + '\" value=\"' + _.value + '\">\\n</div>\\n';\n});\n\nvar Range = function Range(props) {\n  var $element = void 0;\n  var _props$min = props.min,\n      min = _props$min === undefined ? 0 : _props$min,\n      _props$max = props.max,\n      max = _props$max === undefined ? 100 : _props$max,\n      _props$step = props.step,\n      step = _props$step === undefined ? 1 : _props$step,\n      _props$value = props.value,\n      value = _props$value === undefined ? 50 : _props$value,\n      onChange = props.onChange;\n\n\n  var getElement = function getElement() {\n    if (!$element) {\n      render();\n    }\n\n    return $element;\n  };\n\n  var render = function render() {\n    $element = createNode(template$8({\n      cn: cn$8,\n      min: min,\n      max: max,\n      step: step,\n      value: value\n    }));\n\n    $element.addEventListener('change', function (e) {\n      return onChange(e.target.value);\n    });\n  };\n\n  return { getElement: getElement };\n};\n\nvar template$9 = (function (_) {\n  return \"<div></div>\\n\";\n});\n\nvar ranges = {\n  enhance: [0, 100],\n  sharp: [0, 20],\n  blur: [0, 100, 5]\n};\n\nvar Tab = function Tab(props) {\n  var $element = void 0;\n  var _header = void 0;\n  var _content = void 0;\n  var _footer = void 0;\n  var _image = void 0;\n  var _effects = void 0;\n  var _crops = void 0;\n  var uc = props.uc,\n      store = props.store,\n      settings = props.settings,\n      onDone = props.onDone,\n      onFail = props.onFail;\n\n  var state = {\n    cropWidget: null,\n    currentCrop: 0\n  };\n  var t = uc.locale.t;\n  var CropWidget = uc.crop.CropWidget;\n  var previewModifiers = '-/preview/1162x693/-/setfill/ffffff/-/format/jpeg/-/progressive/yes/';\n\n  var getElement = function getElement() {\n    if (!$element) {\n      render();\n    }\n\n    return $element;\n  };\n\n  var render = function render() {\n    var _store$getState = store.getState(),\n        view = _store$getState.view,\n        appliedEffects = _store$getState.appliedEffects,\n        image = _store$getState.image;\n\n    $element = createNode(template$9());\n\n    _header = new Header({ title: headerTitle(view) });\n\n    _footer = new Footer({\n      locale: {\n        done: t('dialog.tabs.preview.done'),\n        cancel: t('dialog.tabs.preview.image.change')\n      },\n      onDone: handleDone,\n      onCancel: handleCancel\n    });\n\n    _content = new Content();\n\n    var imageUrl = image.cdnUrl + previewModifiers;\n\n    if (settings.previewUrlCallback) {\n      imageUrl = settings.previewUrlCallback(imageUrl, image);\n    }\n\n    _image = new Image({\n      imageUrl: imageUrl,\n      onUpdate: function onUpdate() {\n        return store.setImageLoad('start');\n      },\n      onLoad: function onLoad() {\n        return store.setImageLoad('load');\n      },\n      onFail: function onFail() {\n        return store.setImageLoad('fail');\n      }\n    });\n\n    $element.appendChild(_header.getElement());\n    $element.appendChild(_content.getElement());\n    $element.appendChild(_footer.getElement());\n\n    _content.appendChild(_image.getElement());\n\n    var effects = settings.effects;\n\n    var titles = effects.reduce(function (titles, effect) {\n      titles[effect] = effectTitle(effect);\n\n      return titles;\n    }, {});\n\n    _effects = new Effects({\n      effects: effects,\n      titles: titles,\n      appliedEffects: appliedEffects,\n      onEffectClick: handleEffectClick\n    });\n\n    _footer.appendChild(_effects.getElement());\n\n    store.subscribeToAppliedEffects(handleAppliedEffectsChange);\n    store.subscribeToView(handleViewChange);\n    store.subscribeToImage(handleImageChange);\n    store.subscribeToImageLoad(handleImageLoadChange);\n  };\n\n  var headerTitle = function headerTitle(view) {\n    return view === 'preview' ? t('dialog.tabs.preview.image.title') : effectTitle(view);\n  };\n\n  var effectTitle = function effectTitle(effect) {\n    return t('effects.captions.' + effect);\n  };\n\n  var deleteCropWidget = function deleteCropWidget() {\n    if (!state.cropWidget || !state.cropWidget.__api) return;\n\n    state.cropWidget.__api.release();\n    state.cropWidget.__api.destroy();\n    _image.getImg().removeAttribute('style');\n  };\n\n  var handleDone = function handleDone(e) {\n    var _store$getState2 = store.getState(),\n        view = _store$getState2.view;\n\n    if (view === 'preview') {\n      onDone();\n    } else {\n      e.stopPropagation();\n\n      if (view === 'crop') {\n        finishCrop();\n      }\n\n      store.setView('preview');\n    }\n  };\n\n  var handleCancel = function handleCancel(e) {\n    var _store$getState3 = store.getState(),\n        view = _store$getState3.view,\n        appliedEffects = _store$getState3.appliedEffects;\n\n    var cropSettings = settings.crop;\n\n\n    if (view !== 'preview') {\n      e.stopPropagation();\n\n      var value = 0;\n\n      if (view === 'crop') {\n        var freeAllowed = cropSettings.some(function (c) {\n          return !c.preferedSize;\n        });\n\n        value = freeAllowed ? null : appliedEffects[view];\n        deleteCropWidget();\n      }\n      store.setAppliedEffect(defineProperty({}, view, value));\n      store.setView('preview');\n    }\n  };\n\n  var handleEffectClick = function handleEffectClick(effect) {\n    var _store$getState4 = store.getState(),\n        appliedEffects = _store$getState4.appliedEffects;\n\n    if (effect === 'rotate') {\n      store.setAppliedEffect({ rotate: getNextRotateValue(appliedEffects.rotate) });\n\n      return;\n    }\n\n    if (typeof appliedEffects[effect] === 'boolean') {\n      store.setAppliedEffect(defineProperty({}, effect, !appliedEffects[effect]));\n\n      return;\n    }\n\n    if (effect === 'crop' || typeof appliedEffects[effect] === 'number') {\n      store.setView(effect);\n    }\n  };\n\n  var handleRangeChange = function handleRangeChange(value) {\n    var _store$getState5 = store.getState(),\n        view = _store$getState5.view;\n\n    store.setAppliedEffect(defineProperty({}, view, parseInt(value)));\n  };\n\n  var handleAppliedEffectsChange = function handleAppliedEffectsChange() {\n    store.rebuildImage();\n\n    var _store$getState6 = store.getState(),\n        appliedEffects = _store$getState6.appliedEffects;\n\n    _effects.updateApplied(appliedEffects);\n  };\n\n  var handleViewChange = function handleViewChange() {\n    var _store$getState7 = store.getState(),\n        view = _store$getState7.view,\n        appliedEffects = _store$getState7.appliedEffects,\n        image = _store$getState7.image;\n\n    _header.updateTitle(headerTitle(view));\n\n    if (view === 'preview') {\n      _footer.updateDoneTitle();\n    } else {\n      _footer.updateDoneTitle(t('effects.apply'));\n    }\n\n    _footer.empty();\n\n    if (view === 'preview') {\n      _footer.appendChild(_effects.getElement());\n\n      return;\n    }\n\n    if (view === 'crop') {\n      showCrops();\n\n      var imageUrl = image.originalUrl + (getModifiersByEffects([{ crop: null }], false, false) || '') + previewModifiers;\n\n      if (settings.previewUrlCallback) {\n        imageUrl = settings.previewUrlCallback(imageUrl, image);\n      }\n\n      _image.updateImageUrl(imageUrl);\n\n      return;\n    }\n\n    if (ranges[view]) {\n      var value = appliedEffects[view];\n\n      if (value === 0) {\n        value = ranges[view][1] / 2;\n\n        store.setAppliedEffect(defineProperty({}, view, value));\n      }\n\n      var _range = new Range({\n        min: ranges[view][0],\n        max: ranges[view][1],\n        step: ranges[view][2],\n        value: value,\n        onChange: handleRangeChange\n      });\n\n      _footer.appendChild(_range.getElement());\n    }\n  };\n\n  var handleImageChange = function handleImageChange() {\n    var _store$getState8 = store.getState(),\n        image = _store$getState8.image;\n\n    var imageUrl = image.cdnUrl + previewModifiers;\n\n    if (settings.previewUrlCallback) {\n      imageUrl = settings.previewUrlCallback(imageUrl, image);\n    }\n\n    _image.updateImageUrl(imageUrl);\n  };\n\n  var handleImageLoadChange = function handleImageLoadChange() {\n    var _store$getState9 = store.getState(),\n        view = _store$getState9.view,\n        imageLoad = _store$getState9.imageLoad;\n\n    switch (imageLoad) {\n      case 'start':\n        _footer.toggleDisabled(true);\n\n        if (view === 'preview') {\n          _effects.toggleDisabled(true);\n        }\n        if (view === 'crop') {\n          _crops.toggleDisabled(true);\n        }\n        break;\n      case 'load':\n        _footer.toggleDisabled(false);\n\n        if (view === 'preview') {\n          _effects.toggleDisabled(false);\n        } else if (view === 'crop') {\n          startCrop();\n          _crops.toggleDisabled(false);\n        }\n        break;\n      case 'fail':\n        onFail();\n        break;\n    }\n  };\n\n  var showCrops = function showCrops() {\n    var cropSettings = settings.crop;\n\n    var _store$getState10 = store.getState(),\n        appliedEffects = _store$getState10.appliedEffects;\n\n    var crop = appliedEffects.crop;\n\n\n    state.currentCrop = crop && crop.index !== undefined ? crop.index : 0;\n\n    _crops = new Crops({\n      crops: cropSettings.map(function (c, i) {\n        var _getCropSizeInfo = getCropSizeInfo(c),\n            description = _getCropSizeInfo.description,\n            width = _getCropSizeInfo.width,\n            height = _getCropSizeInfo.height;\n\n        return {\n          index: i,\n          settings: c,\n          title: description,\n          size: {\n            width: width,\n            height: height\n          }\n        };\n      }),\n      currentCrop: state.currentCrop,\n      onCropClick: function onCropClick(crop) {\n        state.currentCrop = crop.index;\n        if (state.cropWidget) {\n          state.cropWidget.setCrop(crop.settings);\n        }\n      }\n    });\n\n    _footer.appendChild(_crops.getElement());\n  };\n\n  var startCrop = function startCrop() {\n    var cropSettings = settings.crop;\n\n    var _store$getState11 = store.getState(),\n        appliedEffects = _store$getState11.appliedEffects,\n        image = _store$getState11.image;\n\n    var crop = appliedEffects.crop;\n    var _image$originalImageI = image.originalImageInfo,\n        width = _image$originalImageI.width,\n        height = _image$originalImageI.height;\n\n    var size = [width, height];\n\n    state.cropWidget = new CropWidget(uc.jQuery(_image.getImg()), size, cropSettings[state.currentCrop]);\n\n    if (crop && crop.coords) {\n      state.cropWidget.setSelection(crop.coords);\n    }\n  };\n\n  var finishCrop = function finishCrop() {\n    var _state$cropWidget = state.cropWidget,\n        crop = _state$cropWidget.crop,\n        originalSize = _state$cropWidget.originalSize;\n\n    var coords = state.cropWidget.getSelection();\n\n    deleteCropWidget();\n\n    store.setAppliedEffect({\n      crop: {\n        originalSize: originalSize,\n        coords: coords,\n        resizeTo: getCropResize(crop, [coords.width, coords.height]),\n        settings: crop,\n        index: state.currentCrop\n      }\n    });\n  };\n\n  var getCropSizeInfo = function getCropSizeInfo(crop) {\n    var preferedSize = crop.preferedSize;\n\n\n    var description = t('dialog.tabs.preview.crop.free');\n    var width = void 0;\n    var height = void 0;\n\n    if (preferedSize) {\n      var gcd = uc.utils.gcd(preferedSize[0], preferedSize[1]);\n      var size = uc.utils.fitSize(preferedSize, [30, 30], true);\n\n      description = preferedSize[0] / gcd + ':' + preferedSize[1] / gcd;\n      width = Math.max(20, size[0]) + 'px';\n      height = Math.max(12, size[1]) + 'px';\n    }\n\n    return {\n      description: description,\n      width: width,\n      height: height\n    };\n  };\n\n  return { getElement: getElement };\n};\n\nfunction createPreviewTabEffects(PreviewTab, uc) {\n  customExtends(PreviewTabEffects, PreviewTab);\n\n  function PreviewTabEffects(container, button, dialogApi, settings, name) {\n    PreviewTabEffects.__super__.constructor.call(this, container, button, dialogApi, settings, name);\n  }\n\n  PreviewTabEffects.prototype.__setState = function (state, data) {\n    var _this = this;\n\n    if (state === 'image') {\n      if (data.info) {\n        var globalEffects = getGlobalSettingsByKey('effects');\n\n        // Trying to get effects settings from global if widget doesn't have them\n        if (typeof this.settings.effects === 'undefined' && globalEffects) {\n          this.settings.effects = globalEffects;\n        }\n\n        var settings = configureSettings(this.settings);\n        var store = configureStore(data.info, settings);\n        var onDone = function onDone() {\n          var newFile = _this.file.then(function (info) {\n            var _store$getState$image = store.getState().image,\n                cdnUrl = _store$getState$image.cdnUrl,\n                cdnUrlModifiers = _store$getState$image.cdnUrlModifiers,\n                crop = _store$getState$image.crop;\n\n\n            return _extends({}, info, {\n              cdnUrl: cdnUrl,\n              cdnUrlModifiers: cdnUrlModifiers,\n              crop: crop\n            });\n          });\n\n          _this.dialogApi.fileColl.replace(_this.file, newFile);\n        };\n        var onFail = function onFail() {\n          _this.file = null;\n          _this.__setState('error', { error: 'loadImage' });\n        };\n\n        autoCrop(store, settings, uc);\n\n        var currentLocale = settings.locale;\n\n        uc.locale.translations = configureTranslations(uc.locale.translations, currentLocale);\n        uc.locale.rebuild();\n\n        var tab = new Tab({\n          uc: uc,\n          store: store,\n          settings: settings,\n          onDone: onDone,\n          onFail: onFail\n        });\n\n        var container = this.container[0];\n\n        container.innerHTML = '';\n        Array.prototype.slice.call(tab.getElement().children).forEach(function (child) {\n          return container.appendChild(child);\n        });\n\n        store.setImageLoad('start');\n      }\n    } else {\n      PreviewTabEffects.__super__.__setState.call(this, state, data);\n    }\n  };\n\n  PreviewTabEffects.prototype.initImage = function () {};\n\n  return PreviewTabEffects;\n}\n\nfunction uploadcareTabEffects(container, button, dialogApi, settings, name) {\n  uploadcare_widget__WEBPACK_IMPORTED_MODULE_0___default.a.plugin(function (uc) {\n    if (settings.multiple) {\n      return new uc.widget.tabs.PreviewTabMultiple(container, button, dialogApi, settings, name);\n    }\n\n    var PreviewTabEffects = createPreviewTabEffects(uc.widget.tabs.PreviewTab, uc);\n\n    return new PreviewTabEffects(container, button, dialogApi, settings, name);\n  });\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (uploadcareTabEffects);\n//# sourceMappingURL=uploadcare.tab-effects.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/uploadcare-widget-tab-effects/dist/uploadcare.tab-effects.es.js\n");

/***/ }),

/***/ "./node_modules/uploadcare-widget/uploadcare.js":
/*!******************************************************!*\
  !*** ./node_modules/uploadcare-widget/uploadcare.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * @license uploadcare-widget v3.11.0\n *\n * Copyright (c) 2020 Uploadcare, Inc.\n *\n * This source code is licensed under the BSD 2-Clause License\n * found in the LICENSE file in the root directory of this source tree.\n */\n\n(function (global, factory) {\n   true ? module.exports = factory(__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")) :\n  undefined;\n}(this, (function ($) { 'use strict';\n\n  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n  var $__default = /*#__PURE__*/_interopDefaultLegacy($);\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n    return function _createSuperInternal() {\n      var Super = _getPrototypeOf(Derived),\n          result;\n\n      if (hasNativeReflectConstruct) {\n        var NewTarget = _getPrototypeOf(this).constructor;\n\n        result = Reflect.construct(Super, arguments, NewTarget);\n      } else {\n        result = Super.apply(this, arguments);\n      }\n\n      return _possibleConstructorReturn(this, result);\n    };\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  function _createForOfIteratorHelper(o, allowArrayLike) {\n    var it;\n\n    if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n\n        var F = function () {};\n\n        return {\n          s: F,\n          n: function () {\n            if (i >= o.length) return {\n              done: true\n            };\n            return {\n              done: false,\n              value: o[i++]\n            };\n          },\n          e: function (e) {\n            throw e;\n          },\n          f: F\n        };\n      }\n\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n\n    var normalCompletion = true,\n        didErr = false,\n        err;\n    return {\n      s: function () {\n        it = o[Symbol.iterator]();\n      },\n      n: function () {\n        var step = it.next();\n        normalCompletion = step.done;\n        return step;\n      },\n      e: function (e) {\n        didErr = true;\n        err = e;\n      },\n      f: function () {\n        try {\n          if (!normalCompletion && it.return != null) it.return();\n        } finally {\n          if (didErr) throw err;\n        }\n      }\n    };\n  }\n\n  var isWindowDefined = function isWindowDefined() {\n    return (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === 'object';\n  };\n\n  var isWindowDefined$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    isWindowDefined: isWindowDefined\n  });\n\n  if (isWindowDefined() && window.XDomainRequest) {\n    $__default['default'].ajaxTransport(function (s) {\n      if (s.crossDomain && s.async) {\n        if (s.timeout) {\n          s.xdrTimeout = s.timeout;\n          delete s.timeout;\n        }\n\n        var xdr;\n        return {\n          send: function send(_, complete) {\n            function callback(status, statusText, responses, responseHeaders) {\n              xdr.onload = xdr.onerror = xdr.ontimeout = function () {};\n\n              xdr = undefined;\n              complete(status, statusText, responses, responseHeaders);\n            }\n\n            xdr = new XDomainRequest();\n\n            xdr.onload = function () {\n              callback(200, \"OK\", {\n                text: xdr.responseText\n              }, \"Content-Type: \" + xdr.contentType);\n            };\n\n            xdr.onerror = function () {\n              callback(404, \"Not Found\");\n            };\n\n            xdr.onprogress = function () {};\n\n            xdr.ontimeout = function () {\n              callback(0, \"timeout\");\n            };\n\n            xdr.timeout = s.xdrTimeout || Number.MAX_VALUE;\n            xdr.open(s.type, s.url.replace(/^https?:/, ''));\n            xdr.send(s.hasContent && s.data || null);\n          },\n          abort: function abort() {\n            if (xdr) {\n              xdr.onerror = function () {};\n\n              xdr.abort();\n            }\n          }\n        };\n      }\n    });\n  }\n\n  var version = \"3.11.0\";\n\n  var fileAPI = isWindowDefined() && !!(window.File && window.FileList && window.FileReader);\n  var sendFileAPI = isWindowDefined() && !!(window.FormData && fileAPI); // https://github.com/Modernizr/Modernizr/blob/master/feature-detects/draganddrop.js\n\n  var dragAndDrop = isWindowDefined() && function () {\n    var el;\n    el = document.createElement('div');\n    return 'draggable' in el || 'ondragstart' in el && 'ondrop' in el;\n  }(); // https://github.com/Modernizr/Modernizr/blob/master/feature-detects/canvas.js\n\n\n  var canvas = isWindowDefined() && function () {\n    var el;\n    el = document.createElement('canvas');\n    return !!(el.getContext && el.getContext('2d'));\n  }();\n\n  var fileDragAndDrop = fileAPI && dragAndDrop;\n  var iOSVersion = null; // TODO: don't access to navigator in module scope (NODE don't have navigator)\n\n  var ios = isWindowDefined() && /^[^(]+\\(iP(?:hone|od|ad);\\s*(.+?)\\)/.exec(navigator.userAgent);\n\n  if (ios) {\n    var ver = /OS (\\d)_(\\d)/.exec(ios[1]);\n\n    if (ver) {\n      iOSVersion = +ver[1] + ver[2] / 10;\n    }\n  }\n\n  var Blob = false;\n\n  try {\n    if (isWindowDefined() && new window.Blob()) {\n      Blob = window.Blob;\n    }\n  } catch (error) {}\n\n  var url = isWindowDefined() && (window.URL || window.webkitURL || false);\n  var URL = url && url.createObjectURL && url;\n  var FileReader = isWindowDefined() && (window.FileReader != null ? window.FileReader.prototype.readAsArrayBuffer : undefined) && window.FileReader;\n\n  // utils\n  var log = function log() {\n    var ref;\n\n    try {\n      var _ref;\n\n      return (ref = window.console) != null ? typeof ref.log === 'function' ? (_ref = ref).log.apply(_ref, arguments) : undefined : undefined;\n    } catch (error) {}\n  };\n\n  var debug = function debug() {\n    var ref;\n\n    if ((ref = window.console) != null ? ref.debug : undefined) {\n      try {\n        var _window$console;\n\n        return (_window$console = window.console).debug.apply(_window$console, arguments);\n      } catch (error) {}\n    } else {\n      return log.apply(void 0, ['Debug:'].concat(Array.prototype.slice.call(arguments)));\n    }\n  };\n\n  var warn = function warn() {\n    var ref;\n\n    if ((ref = window.console) != null ? ref.warn : undefined) {\n      try {\n        var _window$console2;\n\n        return (_window$console2 = window.console).warn.apply(_window$console2, arguments);\n      } catch (error) {}\n    } else {\n      return log.apply(void 0, ['Warning:'].concat(Array.prototype.slice.call(arguments)));\n    }\n  };\n\n  var messages = {};\n\n  var warnOnce = function warnOnce(msg) {\n    if (messages[msg] == null) {\n      messages[msg] = true;\n      return warn(msg);\n    }\n  };\n\n  var indexOf$2 = [].indexOf; // utils\n\n  var unique = function unique(arr) {\n    var item, j, len, result;\n    result = [];\n\n    for (j = 0, len = arr.length; j < len; j++) {\n      item = arr[j];\n\n      if (indexOf$2.call(result, item) < 0) {\n        result.push(item);\n      }\n    }\n\n    return result;\n  };\n\n  var defer = function defer(fn) {\n    return setTimeout(fn, 0);\n  };\n\n  var gcd = function gcd(a, b) {\n    var c;\n\n    while (b) {\n      c = a % b;\n      a = b;\n      b = c;\n    }\n\n    return a;\n  };\n\n  var once = function once(fn) {\n    var called, result;\n    called = false;\n    result = null;\n    return function () {\n      if (!called) {\n        result = fn.apply(this, arguments);\n        called = true;\n      }\n\n      return result;\n    };\n  };\n\n  var wrapToPromise = function wrapToPromise(value) {\n    return $__default['default'].Deferred().resolve(value).promise();\n  }; // same as promise.then(), but if filter returns promise\n  // it will be just passed forward without any special behavior\n\n\n  var then = function then(pr, doneFilter, failFilter, progressFilter) {\n    var compose, df;\n    df = $__default['default'].Deferred();\n\n    compose = function compose(fn1, fn2) {\n      if (fn1 && fn2) {\n        return function () {\n          return fn2.call(this, fn1.apply(this, arguments));\n        };\n      } else {\n        return fn1 || fn2;\n      }\n    };\n\n    pr.then(compose(doneFilter, df.resolve), compose(failFilter, df.reject), compose(progressFilter, df.notify));\n    return df.promise();\n  }; // Build copy of source with only specified methods.\n  // Handles chaining correctly.\n\n\n  var bindAll = function bindAll(source, methods) {\n    var target;\n    target = {};\n    $__default['default'].each(methods, function (i, method) {\n      var fn = source[method];\n\n      if ($__default['default'].isFunction(fn)) {\n        target[method] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          var result = fn.apply(source, args); // Fix chaining\n\n          if (result === source) {\n            return target;\n          } else {\n            return result;\n          }\n        };\n      } else {\n        target[method] = fn;\n      }\n    });\n    return target;\n  };\n\n  var upperCase = function upperCase(s) {\n    return s.replace(/([A-Z])/g, '_$1').toUpperCase();\n  };\n\n  var publicCallbacks = function publicCallbacks(callbacks) {\n    var result;\n    result = callbacks.add;\n    result.add = callbacks.add;\n    result.remove = callbacks.remove;\n    return result;\n  };\n\n  var uuid = function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0;\n      var v = c === 'x' ? r : r & 3 | 8;\n      return v.toString(16);\n    });\n  }; // splitUrlRegex(\"url\") => [\"url\", \"scheme\", \"host\", \"path\", \"query\", \"fragment\"]\n\n\n  var splitUrlRegex = /^(?:([^:/?#]+):)?(?:\\/\\/([^/?#]*))?([^?#]*)\\??([^#]*)#?(.*)$/;\n  var uuidRegex = /[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/i;\n  var groupIdRegex = new RegExp(\"\".concat(uuidRegex.source, \"~[0-9]+\"), 'i');\n  var cdnUrlRegex = new RegExp(\"^/?(\".concat(uuidRegex.source, \")(?:/(-/(?:[^/]+/)+)?([^/]*))?$\"), 'i');\n\n  var splitCdnUrl = function splitCdnUrl(url) {\n    return cdnUrlRegex.exec(splitUrlRegex.exec(url)[3]);\n  };\n\n  var escapeRegExp = function escapeRegExp(str) {\n    return str.replace(/[\\\\-\\\\[]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n  };\n\n  var globRegexp = function globRegexp(str) {\n    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'i';\n    var parts;\n    parts = $__default['default'].map(str.split('*'), escapeRegExp);\n    return new RegExp('^' + parts.join('.+') + '$', flags);\n  };\n\n  var normalizeUrl = function normalizeUrl(url) {\n    var scheme; // google.com/ → google.com\n    // /google.com/ → /google.com\n    // //google.com/ → http://google.com\n    // http://google.com/ → http://google.com\n\n    scheme = document.location.protocol;\n\n    if (scheme !== 'http:') {\n      scheme = 'https:';\n    }\n\n    return url.replace(/^\\/\\//, scheme + '//').replace(/\\/+$/, '');\n  };\n\n  var fitText = function fitText(text, max) {\n    if (text.length > max) {\n      var head = Math.ceil((max - 3) / 2);\n      var tail = Math.floor((max - 3) / 2);\n      return text.slice(0, head) + '...' + text.slice(-tail);\n    } else {\n      return text;\n    }\n  };\n\n  var fitSizeInCdnLimit = function fitSizeInCdnLimit(objSize) {\n    return fitSize(objSize, [2048, 2048]);\n  };\n\n  var fitSize = function fitSize(objSize, boxSize, upscale) {\n    var heightRation, widthRatio;\n\n    if (objSize[0] > boxSize[0] || objSize[1] > boxSize[1] || upscale) {\n      widthRatio = boxSize[0] / objSize[0];\n      heightRation = boxSize[1] / objSize[1];\n\n      if (!boxSize[0] || boxSize[1] && widthRatio > heightRation) {\n        return [Math.round(heightRation * objSize[0]), boxSize[1]];\n      } else {\n        return [boxSize[0], Math.round(widthRatio * objSize[1])];\n      }\n    } else {\n      return objSize.slice();\n    }\n  };\n\n  var applyCropCoordsToInfo = function applyCropCoordsToInfo(info, crop, size, coords) {\n    var downscale, h, modifiers, prefered, upscale, w, wholeImage;\n    w = coords.width;\n    h = coords.height;\n    prefered = crop.preferedSize;\n    modifiers = '';\n    wholeImage = w === size[0] && h === size[1];\n\n    if (!wholeImage) {\n      modifiers += \"-/crop/\".concat(w, \"x\").concat(h, \"/\").concat(coords.left, \",\").concat(coords.top, \"/\");\n    }\n\n    downscale = crop.downscale && (w > prefered[0] || h > prefered[1]);\n    upscale = crop.upscale && (w < prefered[0] || h < prefered[1]);\n\n    if (downscale || upscale) {\n      var _prefered = prefered;\n\n      var _prefered2 = _slicedToArray(_prefered, 2);\n\n      coords.sw = _prefered2[0];\n      coords.sh = _prefered2[1];\n      modifiers += \"-/resize/\".concat(prefered.join('x'), \"/\");\n    } else if (!wholeImage) {\n      modifiers += '-/preview/';\n    }\n\n    info = $__default['default'].extend({}, info);\n    info.cdnUrlModifiers = modifiers;\n    info.cdnUrl = \"\".concat(info.originalUrl).concat(modifiers || '');\n    info.crop = coords;\n    return info;\n  };\n\n  var fileInput = function fileInput(container, settings, fn) {\n    var accept, input, _run;\n\n    input = null;\n    accept = settings.inputAcceptTypes;\n\n    if (accept === '') {\n      accept = settings.imagesOnly ? 'image/*' : null;\n    }\n\n    (_run = function run() {\n      input = (settings.multiple ? $__default['default']('<input type=\"file\" multiple>') : $__default['default']('<input type=\"file\">')).attr('accept', accept).css({\n        position: 'absolute',\n        top: 0,\n        opacity: 0,\n        margin: 0,\n        padding: 0,\n        width: 'auto',\n        height: 'auto',\n        cursor: container.css('cursor')\n      }).on('change', function () {\n        fn(this);\n        $__default['default'](this).hide();\n        return _run();\n      });\n      return container.append(input);\n    })();\n\n    return container.css({\n      position: 'relative',\n      overflow: 'hidden' // to make it posible to set `cursor:pointer` on button\n      // http://stackoverflow.com/a/9182787/478603\n\n    }).mousemove(function (e) {\n      var left, top, width;\n\n      var _$$offset = $__default['default'](this).offset();\n\n      left = _$$offset.left;\n      top = _$$offset.top;\n      width = input.width();\n      return input.css({\n        left: e.pageX - left - width + 10,\n        top: e.pageY - top - 10\n      });\n    });\n  };\n\n  var fileSelectDialog = function fileSelectDialog(container, settings, fn) {\n    var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var accept;\n    accept = settings.inputAcceptTypes;\n\n    if (accept === '') {\n      accept = settings.imagesOnly ? 'image/*' : null;\n    }\n\n    return $__default['default'](settings.multiple ? '<input type=\"file\" multiple>' : '<input type=\"file\">').attr('accept', accept).attr(attributes).css({\n      position: 'fixed',\n      bottom: 0,\n      opacity: 0\n    }).on('change', function () {\n      fn(this);\n      return $__default['default'](this).remove();\n    }).appendTo(container).focus().click().hide();\n  };\n\n  var fileSizeLabels = 'B KB MB GB TB PB EB ZB YB'.split(' ');\n\n  var readableFileSize = function readableFileSize(value) {\n    var onNaN = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    var postfix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    var digits, fixedTo, i, threshold;\n    value = parseInt(value, 10);\n\n    if (isNaN(value)) {\n      return onNaN;\n    }\n\n    digits = 2;\n    i = 0;\n    threshold = 1000 - 5 * Math.pow(10, 2 - Math.max(digits, 3));\n\n    while (value > threshold && i < fileSizeLabels.length - 1) {\n      i++;\n      value /= 1024;\n    }\n\n    value += 0.000000000000001;\n    fixedTo = Math.max(0, digits - Math.floor(value).toFixed(0).length); // fixed → number → string, to trim trailing zeroes\n\n    value = Number(value.toFixed(fixedTo)); // eslint-disable-next-line no-irregular-whitespace\n\n    return \"\".concat(prefix).concat(value, \"\\xA0\").concat(fileSizeLabels[i]).concat(postfix);\n  };\n\n  var ajaxDefaults = {\n    dataType: 'json',\n    crossDomain: true,\n    cache: false\n  };\n\n  var jsonp = function jsonp(url, type, data) {\n    var settings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    return $__default['default'].ajax($__default['default'].extend({\n      url: url,\n      type: type,\n      data: data\n    }, settings, ajaxDefaults)).then(function (data) {\n      var text;\n\n      if (data.error) {\n        text = data.error.content || data.error;\n        return $__default['default'].Deferred().reject(text);\n      } else {\n        return data;\n      }\n    }, function (_, textStatus, errorThrown) {\n      var text;\n      text = \"\".concat(textStatus, \" (\").concat(errorThrown, \")\");\n      warn(\"JSONP unexpected error: \".concat(text, \" while loading \").concat(url));\n      return text;\n    });\n  };\n\n  var canvasToBlob = function canvasToBlob(canvas, type, quality, callback) {\n    var arr, binStr, dataURL, i, j, ref;\n\n    if (window.HTMLCanvasElement.prototype.toBlob) {\n      return canvas.toBlob(callback, type, quality);\n    }\n\n    dataURL = canvas.toDataURL(type, quality);\n    dataURL = dataURL.split(',');\n    binStr = window.atob(dataURL[1]);\n    arr = new Uint8Array(binStr.length);\n\n    for (i = j = 0, ref = binStr.length; j < ref; i = j += 1) {\n      arr[i] = binStr.charCodeAt(i);\n    }\n\n    return callback(new window.Blob([arr], {\n      type: /:(.+\\/.+);/.exec(dataURL[0])[1]\n    }));\n  };\n\n  var taskRunner = function taskRunner(capacity) {\n    var queue, _release, run, running;\n\n    running = 0;\n    queue = [];\n\n    _release = function release() {\n      var task;\n\n      if (queue.length) {\n        task = queue.shift();\n        return defer(function () {\n          return task(_release);\n        });\n      } else {\n        running -= 1;\n        return running;\n      }\n    };\n\n    run = function run(task) {\n      if (!capacity || running < capacity) {\n        running += 1;\n        return defer(function () {\n          return task(_release);\n        });\n      } else {\n        return queue.push(task);\n      }\n    };\n\n    return run;\n  }; // This is work around bug in jquery https://github.com/jquery/jquery/issues/2013\n  // action, add listener, callbacks,\n  // ... .then handlers, argument index, [final state]\n\n\n  var pipeTuples = [['notify', 'progress', 2], ['resolve', 'done', 0], ['reject', 'fail', 1]];\n\n  var fixedPipe = function fixedPipe(promise) {\n    for (var _len2 = arguments.length, fns = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      fns[_key2 - 1] = arguments[_key2];\n    }\n\n    return $__default['default'].Deferred(function (newDefer) {\n      return $__default['default'].each(pipeTuples, function (i, tuple) {\n        var fn; // Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\n        fn = $__default['default'].isFunction(fns[tuple[2]]) && fns[tuple[2]];\n        return promise[tuple[1]](function () {\n          var returned;\n          returned = fn && fn.apply(this, arguments);\n\n          if (returned && $__default['default'].isFunction(returned.promise)) {\n            return returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\n          } else {\n            return newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n          }\n        });\n      });\n    }).promise();\n  };\n\n  var TestPixel = {\n    R: 55,\n    G: 110,\n    B: 165,\n    A: 255\n  };\n  var FILL_STYLE = \"rgba(\".concat(TestPixel.R, \", \").concat(TestPixel.G, \", \").concat(TestPixel.B, \", \").concat(TestPixel.A / 255, \")\");\n  function canvasTest(width, height) {\n    // Wrapped into try/catch because memory alloction errors can be thrown due to insufficient RAM\n    try {\n      var fill = [width - 1, height - 1, 1, 1]; // x, y, width, height\n\n      var cropCvs = document.createElement('canvas');\n      cropCvs.width = 1;\n      cropCvs.height = 1;\n      var testCvs = document.createElement('canvas');\n      testCvs.width = width;\n      testCvs.height = height;\n      var cropCtx = cropCvs.getContext('2d');\n      var testCtx = testCvs.getContext('2d');\n\n      if (testCtx) {\n        testCtx.fillStyle = FILL_STYLE;\n        testCtx.fillRect.apply(testCtx, fill); // Render the test pixel in the bottom-right corner of the\n        // test canvas in the top-left of the 1x1 crop canvas. This\n        // dramatically reducing the time for getImageData to complete.\n\n        cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);\n      }\n\n      var imageData = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data;\n      var isTestPass = false;\n\n      if (imageData) {\n        // On IE10, imageData have type CanvasPixelArray, not Uint8ClampedArray.\n        // CanvasPixelArray supports index access operations only.\n        // Array buffers can't be destructuredd and compared with JSON.stringify\n        isTestPass = imageData[0] === TestPixel.R && imageData[1] === TestPixel.G && imageData[2] === TestPixel.B && imageData[3] === TestPixel.A;\n      }\n\n      testCvs.width = testCvs.height = 1;\n      return isTestPass;\n    } catch (e) {\n      log(\"Failed to test for max canvas size of \".concat(width, \"x\").concat(height, \".\"), e);\n      return false;\n    }\n  }\n\n  function memoize(fn, serializer) {\n    var cache = {};\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var key = serializer(args, cache);\n      return key in cache ? cache[key] : cache[key] = fn.apply(void 0, args);\n    };\n  }\n\n  var sizes = {\n    squareSide: [// Safari (iOS < 9, ram >= 256)\n    // We are supported mobile safari < 9 since widget v2, by 5 Mpx limit\n    // so it's better to continue support despite the absence of this browser in the support table\n    Math.floor(Math.sqrt(5 * 1000 * 1000)), // IE Mobile (Windows Phone 8.x)\n    // Safari (iOS >= 9)\n    4096, // IE 9 (Win)\n    8192, // Firefox 63 (Mac, Win)\n    11180, // Chrome 68 (Android 6)\n    10836, // Chrome 68 (Android 5)\n    11402, // Chrome 68 (Android 7.1-9)\n    14188, // Chrome 70 (Mac, Win)\n    // Chrome 68 (Android 4.4)\n    // Edge 17 (Win)\n    // Safari 7-12 (Mac)\n    16384],\n    dimension: [// IE Mobile (Windows Phone 8.x)\n    4096, // IE 9 (Win)\n    8192, // Edge 17 (Win)\n    // IE11 (Win)\n    16384, // Chrome 70 (Mac, Win)\n    // Chrome 68 (Android 4.4-9)\n    // Firefox 63 (Mac, Win)\n    32767, // Chrome 83 (Mac, Win)\n    // Safari 7-12 (Mac)\n    // Safari (iOS 9-12)\n    // Actually Safari has a much bigger limits - 4194303 of width and 8388607 of height,\n    // but we will not use them\n    65535]\n  };\n  var MAX_SQUARE_SIDE = sizes.squareSide[sizes.squareSide.length - 1];\n\n  function wrapAsync(fn) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var df = $__default['default'].Deferred();\n      defer(function () {\n        var passed = fn.apply(void 0, args);\n        df.resolve(passed);\n      });\n      return df.promise();\n    };\n  }\n  /**\n   * Memoization key serealizer, that prevents unnecessary canvas tests.\n   * No need to make test if we know that:\n   * - browser supports higher canvas size\n   * - browser doesn't support lower canvas size\n   */\n\n\n  function memoKeySerializer(args, cache) {\n    var _args = _slicedToArray(args, 1),\n        w = _args[0];\n\n    var cachedWidths = Object.keys(cache).map(function (val) {\n      return parseInt(val, 10);\n    }).sort(function (a, b) {\n      return a - b;\n    });\n\n    for (var i = 0; i < cachedWidths.length; i++) {\n      var cachedWidth = cachedWidths[i];\n      var isSupported = !!cache[cachedWidth]; // higher supported canvas size, return it\n\n      if (cachedWidth > w && isSupported) {\n        return cachedWidth;\n      } // lower unsupported canvas size, return it\n\n\n      if (cachedWidth < w && !isSupported) {\n        return cachedWidth;\n      }\n    } // use canvas width as the key,\n    // because we're doing dimension test by width - [dimension, 1]\n\n\n    return w;\n  } // separate memoization for square and dimension tests\n\n\n  var squareTest = wrapAsync(memoize(canvasTest, memoKeySerializer));\n  var dimensionTest = wrapAsync(memoize(canvasTest, memoKeySerializer));\n  function testCanvasSize(w, h) {\n    var df = $__default['default'].Deferred();\n    var testSquareSide = sizes.squareSide.find(function (side) {\n      return side * side >= w * h;\n    });\n    var testDimension = sizes.dimension.find(function (side) {\n      return side >= w && side >= h;\n    });\n\n    if (!testSquareSide || !testDimension) {\n      return df.reject();\n    }\n\n    var tasks = [squareTest(testSquareSide, testSquareSide), dimensionTest(testDimension, 1)];\n    $__default['default'].when.apply($__default['default'], tasks).done(function (squareSupported, dimensionSupported) {\n      if (squareSupported && dimensionSupported) {\n        df.resolve();\n      } else {\n        df.reject();\n      }\n    });\n    return df.promise();\n  }\n\n  var indexOf$1 = [].indexOf; // settings\n\n  var arrayOptions, constrainOptions, constraints, defaultPreviewUrlCallback, defaults$1, flagOptions, intOptions, integration, integrationToUserAgent, normalize, parseCrop, parseShrink, presets, script, str2arr, transformOptions, transforms, urlOptions;\n  defaults$1 = {\n    // developer hooks\n    live: true,\n    manualStart: false,\n    locale: null,\n    localePluralize: null,\n    localeTranslations: null,\n    // widget & dialog settings\n    systemDialog: false,\n    crop: false,\n    previewStep: false,\n    imagesOnly: false,\n    clearable: false,\n    multiple: false,\n    multipleMax: 1000,\n    multipleMin: 1,\n    multipleMaxStrict: false,\n    imageShrink: false,\n    pathValue: true,\n    tabs: 'file camera url facebook gdrive gphotos dropbox instagram evernote flickr onedrive',\n    preferredTypes: '',\n    inputAcceptTypes: '',\n    // '' means default, null means \"disable accept\"\n    // upload settings\n    doNotStore: false,\n    publicKey: null,\n    secureSignature: '',\n    secureExpire: '',\n    pusherKey: '79ae88bd931ea68464d9',\n    cdnBase: 'https://ucarecdn.com',\n    urlBase: 'https://upload.uploadcare.com',\n    socialBase: 'https://social.uploadcare.com',\n    previewProxy: null,\n    previewUrlCallback: null,\n    // fine tuning\n    imagePreviewMaxSize: 25 * 1024 * 1024,\n    multipartMinSize: 10 * 1024 * 1024,\n    multipartPartSize: 5 * 1024 * 1024,\n    multipartMinLastPartSize: 1024 * 1024,\n    multipartConcurrency: 4,\n    multipartMaxAttempts: 3,\n    parallelDirectUploads: 10,\n    passWindowOpen: false,\n    // camera\n    cameraMirrorDefault: true,\n    // camera recording\n    videoPreferredMimeTypes: null,\n    audioBitsPerSecond: null,\n    videoBitsPerSecond: null,\n    // maintain settings\n    scriptBase: \"//ucarecdn.com/widget/\".concat(version, \"/uploadcare/\"),\n    debugUploads: false,\n    integration: ''\n  };\n  transforms = {\n    multipleMax: {\n      from: 0,\n      to: 1000\n    }\n  };\n  constraints = {\n    multipleMax: {\n      min: 1,\n      max: 1000\n    }\n  };\n  presets = {\n    tabs: {\n      all: 'file camera url facebook gdrive gphotos dropbox instagram evernote flickr onedrive box vk huddle',\n      default: defaults$1.tabs\n    }\n  }; // integration setting from data attributes of script tag\n\n  script = isWindowDefined() && (document.currentScript || function () {\n    var scripts;\n    scripts = document.getElementsByTagName('script');\n    return scripts[scripts.length - 1];\n  }());\n\n  integration = isWindowDefined() && $__default['default'](script).data('integration');\n\n  if (integration && integration != null) {\n    defaults$1 = $__default['default'].extend(defaults$1, {\n      integration: integration\n    });\n  }\n\n  str2arr = function str2arr(value) {\n    if (!$__default['default'].isArray(value)) {\n      value = $__default['default'].trim(value);\n      value = value ? value.split(' ') : [];\n    }\n\n    return value;\n  };\n\n  arrayOptions = function arrayOptions(settings, keys) {\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var i, item, j, key, len, len1, source, value;\n\n    for (i = 0, len = keys.length; i < len; i++) {\n      key = keys[i];\n      value = source = str2arr(settings[key]);\n\n      if (hasOwnProperty.apply(presets, [key])) {\n        value = [];\n\n        for (j = 0, len1 = source.length; j < len1; j++) {\n          item = source[j];\n\n          if (hasOwnProperty.apply(presets[key], [item])) {\n            value = value.concat(str2arr(presets[key][item]));\n          } else {\n            value.push(item);\n          }\n        }\n      }\n\n      settings[key] = unique(value);\n    }\n\n    return settings;\n  };\n\n  urlOptions = function urlOptions(settings, keys) {\n    var i, key, len;\n\n    for (i = 0, len = keys.length; i < len; i++) {\n      key = keys[i];\n\n      if (settings[key] != null) {\n        settings[key] = normalizeUrl(settings[key]);\n      }\n    }\n\n    return settings;\n  };\n\n  flagOptions = function flagOptions(settings, keys) {\n    var i, key, len, value;\n\n    for (i = 0, len = keys.length; i < len; i++) {\n      key = keys[i];\n\n      if (!(settings[key] != null)) {\n        continue;\n      }\n\n      value = settings[key];\n\n      if (typeof value === 'string') {\n        // \"\", \"...\" -> true\n        // \"false\", \"disabled\" -> false\n        value = $__default['default'].trim(value).toLowerCase();\n        settings[key] = !(value === 'false' || value === 'disabled');\n      } else {\n        settings[key] = !!value;\n      }\n    }\n\n    return settings;\n  };\n\n  intOptions = function intOptions(settings, keys) {\n    var i, key, len;\n\n    for (i = 0, len = keys.length; i < len; i++) {\n      key = keys[i];\n\n      if (settings[key] != null) {\n        settings[key] = parseInt(settings[key]);\n      }\n    }\n\n    return settings;\n  };\n\n  integrationToUserAgent = function integrationToUserAgent(settings) {\n    settings._userAgent = \"UploadcareWidget/\".concat(version, \"/\").concat(settings.publicKey, \" (JavaScript\").concat(settings.integration ? \"; \".concat(settings.integration) : '', \")\");\n    return settings;\n  };\n\n  transformOptions = function transformOptions(settings, transforms) {\n    var key, transform;\n\n    for (key in transforms) {\n      transform = transforms[key];\n\n      if (settings[key] != null) {\n        if (settings[key] === transform.from) {\n          settings[key] = transform.to;\n        }\n      }\n    }\n\n    return settings;\n  };\n\n  constrainOptions = function constrainOptions(settings, constraints) {\n    var key, max, min;\n\n    for (key in constraints) {\n      var _constraints$key = constraints[key];\n      min = _constraints$key.min;\n      max = _constraints$key.max;\n\n      if (settings[key] != null) {\n        settings[key] = Math.min(Math.max(settings[key], min), max);\n      }\n    }\n\n    return settings;\n  };\n\n  parseCrop = function parseCrop(val) {\n    var ratio, reRatio;\n    reRatio = /^([0-9]+)([x:])([0-9]+)\\s*(|upscale|minimum)$/i;\n    ratio = reRatio.exec($__default['default'].trim(val.toLowerCase())) || [];\n    return {\n      downscale: ratio[2] === 'x',\n      upscale: !!ratio[4],\n      notLess: ratio[4] === 'minimum',\n      preferedSize: ratio.length ? [+ratio[1], +ratio[3]] : undefined\n    };\n  };\n\n  parseShrink = function parseShrink(val) {\n    var reShrink = /^([0-9]+)x([0-9]+)(?:\\s+(\\d{1,2}|100)%)?$/i;\n    var shrink = reShrink.exec($__default['default'].trim(val.toLowerCase())) || [];\n\n    if (!shrink.length) {\n      return false;\n    }\n\n    var size = shrink[1] * shrink[2];\n    var maxSize = MAX_SQUARE_SIDE * MAX_SQUARE_SIDE;\n\n    if (size > maxSize) {\n      warnOnce(\"Shrinked size can not be larger than \".concat(Math.floor(maxSize / 1000 / 1000), \"MP. \") + \"You have set \".concat(shrink[1], \"x\").concat(shrink[2], \" (\") + \"\".concat(Math.ceil(size / 1000 / 100) / 10, \"MP).\"));\n      return false;\n    }\n\n    return {\n      quality: shrink[3] ? shrink[3] / 100 : undefined,\n      size: size\n    };\n  };\n\n  defaultPreviewUrlCallback = function defaultPreviewUrlCallback(url, info) {\n    var addAmpersand, addName, addQuery, queryPart;\n\n    if (!this.previewProxy) {\n      return url;\n    }\n\n    addQuery = !/\\?/.test(this.previewProxy);\n    addName = addQuery || !/=$/.test(this.previewProxy);\n    addAmpersand = !addQuery && !/[&?=]$/.test(this.previewProxy);\n    queryPart = encodeURIComponent(url);\n\n    if (addName) {\n      queryPart = 'url=' + queryPart;\n    }\n\n    if (addAmpersand) {\n      queryPart = '&' + queryPart;\n    }\n\n    if (addQuery) {\n      queryPart = '?' + queryPart;\n    }\n\n    return this.previewProxy + queryPart;\n  };\n\n  normalize = function normalize(settings) {\n    var skydriveIndex;\n    arrayOptions(settings, ['tabs', 'preferredTypes', 'videoPreferredMimeTypes']);\n    urlOptions(settings, ['cdnBase', 'socialBase', 'urlBase', 'scriptBase']);\n    flagOptions(settings, ['doNotStore', 'imagesOnly', 'multiple', 'clearable', 'pathValue', 'previewStep', 'systemDialog', 'debugUploads', 'multipleMaxStrict', 'cameraMirrorDefault']);\n    intOptions(settings, ['multipleMax', 'multipleMin', 'multipartMinSize', 'multipartPartSize', 'multipartMinLastPartSize', 'multipartConcurrency', 'multipartMaxAttempts', 'parallelDirectUploads']);\n    transformOptions(settings, transforms);\n    constrainOptions(settings, constraints);\n    integrationToUserAgent(settings);\n\n    if (settings.crop !== false && !$__default['default'].isArray(settings.crop)) {\n      if (/^(disabled?|false|null)$/i.test(settings.crop)) {\n        settings.crop = false;\n      } else if ($__default['default'].isPlainObject(settings.crop)) {\n        // old format\n        settings.crop = [settings.crop];\n      } else {\n        settings.crop = $__default['default'].map(('' + settings.crop).split(','), parseCrop);\n      }\n    }\n\n    if (settings.imageShrink && !$__default['default'].isPlainObject(settings.imageShrink)) {\n      settings.imageShrink = parseShrink(settings.imageShrink);\n    }\n\n    if (settings.crop || settings.multiple) {\n      settings.previewStep = true;\n    }\n\n    if (!sendFileAPI) {\n      settings.systemDialog = false;\n    }\n\n    if (settings.validators) {\n      settings.validators = settings.validators.slice();\n    }\n\n    if (settings.previewProxy && !settings.previewUrlCallback) {\n      settings.previewUrlCallback = defaultPreviewUrlCallback;\n    }\n\n    skydriveIndex = settings.tabs.indexOf('skydrive');\n\n    if (skydriveIndex !== -1) {\n      settings.tabs[skydriveIndex] = 'onedrive';\n    }\n\n    return settings;\n  }; // global variables only\n\n\n  var globals = function globals() {\n    var key, scriptSettings, value;\n    scriptSettings = {};\n\n    for (key in defaults$1) {\n      value = window[\"UPLOADCARE_\".concat(upperCase(key))];\n\n      if (value != null) {\n        scriptSettings[key] = value;\n      }\n    }\n\n    return scriptSettings;\n  }; // Defaults + global variables + global overrides (once from uploadcare.start)\n  // Not publicly-accessible\n\n\n  var common = once(function (settings, ignoreGlobals) {\n    var result;\n\n    if (!ignoreGlobals) {\n      defaults$1 = $__default['default'].extend(defaults$1, globals());\n    }\n\n    result = normalize($__default['default'].extend(defaults$1, settings || {}));\n    waitForSettings.fire(result);\n    return result;\n  }); // Defaults + global variables + global overrides + local overrides\n\n  var build = function build(settings) {\n    var result;\n    result = $__default['default'].extend({}, common());\n\n    if (!$__default['default'].isEmptyObject(settings)) {\n      result = normalize($__default['default'].extend(result, settings));\n    }\n\n    return result;\n  };\n\n  var waitForSettings = isWindowDefined() && $__default['default'].Callbacks('once memory');\n\n  var CssCollector = /*#__PURE__*/function () {\n    function CssCollector() {\n      _classCallCheck(this, CssCollector);\n\n      this.urls = [];\n      this.styles = [];\n    }\n\n    _createClass(CssCollector, [{\n      key: \"addUrl\",\n      value: function addUrl(url) {\n        if (!/^https?:\\/\\//i.test(url)) {\n          throw new Error('Embedded urls should be absolute. ' + url);\n        }\n\n        if (!(indexOf$1.call(this.urls, url) >= 0)) {\n          return this.urls.push(url);\n        }\n      }\n    }, {\n      key: \"addStyle\",\n      value: function addStyle(style) {\n        return this.styles.push(style);\n      }\n    }]);\n\n    return CssCollector;\n  }();\n\n  var emptyKeyText = '<div class=\"uploadcare--tab__content\">\\n<div class=\"uploadcare--text uploadcare--text_size_large uploadcare--tab__title\">Hello!</div>\\n<div class=\"uploadcare--text\">Your <a class=\"uploadcare--link\" href=\"https://uploadcare.com/dashboard/\">public key</a> is not set.</div>\\n<div class=\"uploadcare--text\">Add this to the &lt;head&gt; tag to start uploading files:</div>\\n<div class=\"uploadcare--text uploadcare--text_pre\">&lt;script&gt;\\nUPLOADCARE_PUBLIC_KEY = \\'your_public_key\\';\\n&lt;/script&gt;</div>\\n</div>';\n\n  var trackLoading = function trackLoading(image, src) {\n    var def;\n    def = $__default['default'].Deferred();\n\n    if (src) {\n      image.src = src;\n    }\n\n    if (image.complete) {\n      def.resolve(image);\n    } else {\n      $__default['default'](image).one('load', function () {\n        return def.resolve(image);\n      });\n      $__default['default'](image).one('error', function () {\n        return def.reject(image);\n      });\n    }\n\n    return def.promise();\n  };\n\n  var imageLoader = function imageLoader(image) {\n    // if argument is an array, treat as\n    // load(['1.jpg', '2.jpg'])\n    if ($__default['default'].isArray(image)) {\n      return $__default['default'].when.apply(null, $__default['default'].map(image, imageLoader));\n    }\n\n    if (image.src) {\n      return trackLoading(image);\n    } else {\n      return trackLoading(new window.Image(), image);\n    }\n  };\n\n  var videoLoader = function videoLoader(src) {\n    var def = $__default['default'].Deferred();\n    $__default['default']('<video/>').on('loadeddata', def.resolve).on('error', def.reject).attr('src', src).get(0).load();\n    return def.promise();\n  };\n\n  var testImageSrc = 'data:image/jpg;base64,' + '/9j/4AAQSkZJRgABAQEASABIAAD/4QA6RXhpZgAATU0AKgAAAAgAAwESAAMAAAABAAYAAAEo' + 'AAMAAAABAAIAAAITAAMAAAABAAEAAAAAAAD/2wBDAP//////////////////////////////' + '////////////////////////////////////////////////////////wAALCAABAAIBASIA' + '/8QAJgABAAAAAAAAAAAAAAAAAAAAAxABAAAAAAAAAAAAAAAAAAAAAP/aAAgBAQAAPwBH/9k=';\n  var isApplied;\n\n  var isBrowserApplyExif = function isBrowserApplyExif() {\n    var df = $__default['default'].Deferred();\n\n    if (isApplied !== undefined) {\n      df.resolve(isApplied);\n    } else {\n      var image = new window.Image();\n\n      image.onload = function () {\n        isApplied = image.naturalWidth < image.naturalHeight;\n        image.src = '//:0';\n        df.resolve(isApplied);\n      };\n\n      image.src = testImageSrc;\n    }\n\n    return df.promise();\n  };\n\n  var resizeCanvas = function resizeCanvas(img, w, h) {\n    var df = $__default['default'].Deferred();\n    defer(function () {\n      try {\n        var canvas = document.createElement('canvas');\n        var cx = canvas.getContext('2d');\n        canvas.width = w;\n        canvas.height = h;\n        cx.imageSmoothingQuality = 'high';\n        cx.drawImage(img, 0, 0, w, h);\n        img.src = '//:0'; // for image\n\n        img.width = img.height = 1; // for canvas\n\n        df.resolve(canvas);\n      } catch (e) {\n        log(\"Failed to shrink image to size \".concat(w, \"x\").concat(h, \".\"), e);\n        df.reject(e);\n      }\n    });\n    return df.promise();\n  };\n  /**\n   * Goes from target to source by step, the last incomplete step is dropped.\n   * Always returns at least one step - target. Source step is not included.\n   * Sorted descending.\n   *\n   * Example with step = 0.71, source = 2000, target = 400\n   * 400 (target) <- 563 <- 793 <- 1117 <- 1574 (dropped) <- [2000 (source)]\n   */\n\n\n  var calcShrinkSteps = function calcShrinkSteps(sourceW, targetW, targetH, step) {\n    var steps = [];\n    var sW = targetW;\n    var sH = targetH; // result should include at least one target step,\n    // even if abs(source - target) < step * source\n    // just to be sure nothing will break\n    // if the original resolution / target resolution condition changes\n\n    do {\n      steps.push([sW, sH]);\n      sW = Math.round(sW / step);\n      sH = Math.round(sH / step);\n    } while (sW < sourceW * step);\n\n    return steps.reverse();\n  };\n  /**\n   * Fallback resampling algorithm\n   *\n   * Reduces dimensions by step until reaches target dimensions,\n   * this gives a better output quality than one-step method\n   *\n   * Target dimensions expected to be supported by browser,\n   * unsupported steps will be dropped.\n   */\n\n\n  var runFallback = function runFallback(img, sourceW, targetW, targetH, step) {\n    var steps = calcShrinkSteps(sourceW, targetW, targetH, step);\n    var seriesDf = $__default['default'].Deferred();\n    var chainedDf = $__default['default'].Deferred();\n    chainedDf.resolve(img);\n\n    var _iterator = _createForOfIteratorHelper(steps),\n        _step;\n\n    try {\n      var _loop = function _loop() {\n        var _step$value = _slicedToArray(_step.value, 2),\n            w = _step$value[0],\n            h = _step$value[1];\n\n        chainedDf = chainedDf.then(function (canvas) {\n          var df = $__default['default'].Deferred();\n          testCanvasSize(w, h).then(function () {\n            return df.resolve(canvas, false);\n          }).fail(function () {\n            return df.resolve(canvas, true);\n          });\n          return df.promise();\n        }).then(function (canvas, skip) {\n          return skip ? canvas : resizeCanvas(canvas, w, h);\n        }).then(function (canvas) {\n          seriesDf.notify((sourceW - w) / (sourceW - targetW));\n          return canvas;\n        });\n      };\n\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    chainedDf.done(function (canvas) {\n      seriesDf.resolve(canvas);\n    });\n    chainedDf.fail(function (error) {\n      seriesDf.reject(error);\n    });\n    return seriesDf.promise();\n  };\n  /**\n   * Native high-quality canvas resampling\n   *\n   * Browser support: https://caniuse.com/mdn-api_canvasrenderingcontext2d_imagesmoothingenabled\n   * Target dimensions expected to be supported by browser.\n   */\n\n\n  var runNative = function runNative(img, targetW, targetH) {\n    return resizeCanvas(img, targetW, targetH);\n  };\n\n  var shrinkImage = function shrinkImage(img, settings) {\n    // in -> image\n    // out <- canvas\n    var df = $__default['default'].Deferred(); // do not shrink image if original resolution / target resolution ratio falls behind 2.0\n\n    var STEP = 0.71; // should be > sqrt(0.5)\n\n    if (img.width * STEP * img.height * STEP < settings.size) {\n      return df.reject('not required');\n    }\n\n    var sourceW = img.width;\n    var sourceH = img.height;\n    var ratio = sourceW / sourceH; // target size shouldn't be greater than settings.size in any case\n\n    var targetW = Math.floor(Math.sqrt(settings.size * ratio));\n    var targetH = Math.floor(settings.size / Math.sqrt(settings.size * ratio)); // we test the last step because we can skip all intermediate steps\n\n    testCanvasSize(targetW, targetH).fail(function () {\n      df.reject('not supported');\n    }).then(function () {\n      var cx = document.createElement('canvas').getContext('2d');\n      var supportNative = ('imageSmoothingQuality' in cx);\n      var task = supportNative ? runNative(img, targetW, targetH) : runFallback(img, sourceW, targetW, targetH, STEP);\n      task.done(function (canvas) {\n        return df.resolve(canvas);\n      }).progress(function (progress) {\n        return df.notify(progress);\n      }).fail(function () {\n        return df.reject('not supported');\n      });\n    });\n    return df.promise();\n  };\n\n  var DataView = isWindowDefined() && window.DataView;\n  var runner = taskRunner(1);\n\n  var shrinkFile = function shrinkFile(file, settings) {\n    var df; // in -> file\n    // out <- blob\n\n    df = $__default['default'].Deferred();\n\n    if (!(URL && DataView && Blob)) {\n      return df.reject('support');\n    } // start = new Date()\n\n\n    runner(function (release) {\n      var op; // console.log('delayed: ' + (new Date() - start))\n\n      df.always(release); // start = new Date()\n\n      op = imageLoader(URL.createObjectURL(file));\n      op.always(function (img) {\n        return URL.revokeObjectURL(img.src);\n      });\n      op.fail(function () {\n        return df.reject('not image');\n      });\n      return op.done(function (img) {\n        // console.log('load: ' + (new Date() - start))\n        df.notify(0.1);\n        var exifOp = $__default['default'].when(getExif(file), isBrowserApplyExif()).always(function (exif, isExifApplied) {\n          var e, isJPEG;\n          df.notify(0.2);\n          isJPEG = exifOp.state() === 'resolved'; // start = new Date()\n\n          op = shrinkImage(img, settings);\n          op.progress(function (progress) {\n            return df.notify(0.2 + progress * 0.6);\n          });\n          op.fail(df.reject);\n          op.done(function (canvas) {\n            var format, quality; // console.log('shrink: ' + (new Date() - start))\n            // start = new Date()\n\n            format = 'image/jpeg';\n            quality = settings.quality || 0.8;\n\n            if (!isJPEG && hasTransparency(canvas)) {\n              format = 'image/png';\n              quality = undefined;\n            }\n\n            return canvasToBlob(canvas, format, quality, function (blob) {\n              canvas.width = canvas.height = 1;\n              df.notify(0.9); // console.log('to blob: ' + (new Date() - start))\n\n              if (exif) {\n                if (isExifApplied) {\n                  setExifOrientation(exif, 1);\n                }\n\n                op = replaceJpegChunk(blob, 0xe1, [exif.buffer]);\n                op.done(df.resolve);\n                return op.fail(function () {\n                  return df.resolve(blob);\n                });\n              } else {\n                return df.resolve(blob);\n              }\n            });\n          });\n          e = null; // free reference\n\n          return e;\n        });\n        return exifOp;\n      });\n    });\n    return df.promise();\n  };\n\n  var drawFileToCanvas = function drawFileToCanvas(file, mW, mH, bg, maxSource) {\n    var df, op; // in -> file\n    // out <- canvas\n\n    df = $__default['default'].Deferred();\n\n    if (!URL) {\n      return df.reject('support');\n    }\n\n    op = imageLoader(URL.createObjectURL(file));\n    op.always(function (img) {\n      return URL.revokeObjectURL(img.src);\n    });\n    op.fail(function () {\n      return df.reject('not image');\n    });\n    op.done(function (img) {\n      df.always(function () {\n        img.src = '//:0';\n      });\n\n      if (maxSource && img.width * img.height > maxSource) {\n        return df.reject('max source');\n      }\n\n      return $__default['default'].when(getExif(file), isBrowserApplyExif()).always(function (exif, isExifApplied) {\n        var orientation = isExifApplied ? 1 : parseExifOrientation(exif) || 1;\n        var swap = orientation > 4;\n        var sSize = swap ? [img.height, img.width] : [img.width, img.height];\n\n        var _fitSize = fitSize(sSize, [mW, mH]),\n            _fitSize2 = _slicedToArray(_fitSize, 2),\n            dW = _fitSize2[0],\n            dH = _fitSize2[1];\n\n        var trns = [[1, 0, 0, 1, 0, 0], [-1, 0, 0, 1, dW, 0], [-1, 0, 0, -1, dW, dH], [1, 0, 0, -1, 0, dH], [0, 1, 1, 0, 0, 0], [0, 1, -1, 0, dW, 0], [0, -1, -1, 0, dW, dH], [0, -1, 1, 0, 0, dH]][orientation - 1];\n\n        if (!trns) {\n          return df.reject('bad image');\n        }\n\n        var canvas = document.createElement('canvas');\n        canvas.width = dW;\n        canvas.height = dH;\n        var ctx = canvas.getContext('2d');\n        ctx.transform.apply(ctx, trns);\n\n        if (swap) {\n          var _ref = [dH, dW];\n          dW = _ref[0];\n          dH = _ref[1];\n        }\n\n        if (bg) {\n          ctx.fillStyle = bg;\n          ctx.fillRect(0, 0, dW, dH);\n        }\n\n        ctx.drawImage(img, 0, 0, dW, dH);\n        return df.resolve(canvas, sSize);\n      });\n    });\n    return df.promise();\n  }; // Util functions\n\n\n  var readJpegChunks = function readJpegChunks(file) {\n    var df, pos, readNext, readNextChunk, readToView;\n\n    readToView = function readToView(file, cb) {\n      var reader;\n      reader = new FileReader();\n\n      reader.onload = function () {\n        return cb(new DataView(reader.result));\n      };\n\n      reader.onerror = function (e) {\n        return df.reject('reader', e);\n      };\n\n      return reader.readAsArrayBuffer(file);\n    };\n\n    readNext = function readNext() {\n      return readToView(file.slice(pos, pos + 128), function (view) {\n        var i, j, ref;\n\n        for (i = j = 0, ref = view.byteLength; ref >= 0 ? j < ref : j > ref; i = ref >= 0 ? ++j : --j) {\n          if (view.getUint8(i) === 0xff) {\n            pos += i;\n            break;\n          }\n        }\n\n        return readNextChunk();\n      });\n    };\n\n    readNextChunk = function readNextChunk() {\n      var startPos;\n      startPos = pos; // todo fix\n      // eslint-disable-next-line no-return-assign\n\n      return readToView(file.slice(pos, pos += 4), function (view) {\n        var length, marker;\n\n        if (view.byteLength !== 4 || view.getUint8(0) !== 0xff) {\n          return df.reject('corrupted');\n        }\n\n        marker = view.getUint8(1);\n\n        if (marker === 0xda) {\n          // Start Of Scan\n          // console.log('read jpeg chunks: ' + (new Date() - start))\n          return df.resolve();\n        }\n\n        length = view.getUint16(2) - 2; // eslint-disable-next-line no-return-assign\n\n        return readToView(file.slice(pos, pos += length), function (view) {\n          if (view.byteLength !== length) {\n            return df.reject('corrupted');\n          }\n\n          df.notify(startPos, length, marker, view);\n          return readNext();\n        });\n      });\n    };\n\n    df = $__default['default'].Deferred();\n\n    if (!(FileReader && DataView)) {\n      return df.reject('support');\n    } // start = new Date()\n\n\n    pos = 2;\n    readToView(file.slice(0, 2), function (view) {\n      if (view.getUint16(0) !== 0xffd8) {\n        return df.reject('not jpeg');\n      }\n\n      return readNext();\n    });\n    return df.promise();\n  };\n\n  var replaceJpegChunk = function replaceJpegChunk(blob, marker, chunks) {\n    var df, oldChunkLength, oldChunkPos, op;\n    df = $__default['default'].Deferred();\n    oldChunkPos = [];\n    oldChunkLength = [];\n    op = readJpegChunks(blob);\n    op.fail(df.reject);\n    op.progress(function (pos, length, oldMarker) {\n      if (oldMarker === marker) {\n        oldChunkPos.push(pos);\n        return oldChunkLength.push(length);\n      }\n    });\n    op.done(function () {\n      var chunk, i, intro, j, k, len, newChunks, pos, ref;\n      newChunks = [blob.slice(0, 2)];\n\n      for (j = 0, len = chunks.length; j < len; j++) {\n        chunk = chunks[j];\n        intro = new DataView(new ArrayBuffer(4));\n        intro.setUint16(0, 0xff00 + marker);\n        intro.setUint16(2, chunk.byteLength + 2);\n        newChunks.push(intro.buffer);\n        newChunks.push(chunk);\n      }\n\n      pos = 2;\n\n      for (i = k = 0, ref = oldChunkPos.length; ref >= 0 ? k < ref : k > ref; i = ref >= 0 ? ++k : --k) {\n        if (oldChunkPos[i] > pos) {\n          newChunks.push(blob.slice(pos, oldChunkPos[i]));\n        }\n\n        pos = oldChunkPos[i] + oldChunkLength[i] + 4;\n      }\n\n      newChunks.push(blob.slice(pos, blob.size));\n      return df.resolve(new Blob(newChunks, {\n        type: blob.type\n      }));\n    });\n    return df.promise();\n  };\n\n  var getExif = function getExif(file) {\n    var exif, op;\n    exif = null;\n    op = readJpegChunks(file);\n    op.progress(function (pos, l, marker, view) {\n      if (!exif && marker === 0xe1) {\n        if (view.byteLength >= 14) {\n          if (view.getUint32(0) === 0x45786966 && view.getUint16(4) === 0) {\n            exif = view;\n            return exif;\n          }\n        }\n      }\n    });\n    return op.then(function () {\n      return exif;\n    }, function (reason) {\n      return $__default['default'].Deferred().reject(exif, reason);\n    });\n  };\n\n  var setExifOrientation = function setExifOrientation(exif, orientation) {\n    findExifOrientation(exif, function (offset, little) {\n      return exif.setUint16(offset, orientation, little);\n    });\n  };\n\n  var parseExifOrientation = function parseExifOrientation(exif) {\n    return findExifOrientation(exif, function (offset, little) {\n      return exif.getUint16(offset, little);\n    });\n  };\n\n  var findExifOrientation = function findExifOrientation(exif, exifCallback) {\n    var count, j, little, offset, ref;\n\n    if (!exif || exif.byteLength < 14 || exif.getUint32(0) !== 0x45786966 || exif.getUint16(4) !== 0) {\n      return null;\n    }\n\n    if (exif.getUint16(6) === 0x4949) {\n      little = true;\n    } else if (exif.getUint16(6) === 0x4d4d) {\n      little = false;\n    } else {\n      return null;\n    }\n\n    if (exif.getUint16(8, little) !== 0x002a) {\n      return null;\n    }\n\n    offset = 8 + exif.getUint32(10, little);\n    count = exif.getUint16(offset - 2, little);\n\n    for (j = 0, ref = count; ref >= 0 ? j < ref : j > ref; ref >= 0 ? ++j : --j) {\n      if (exif.byteLength < offset + 10) {\n        return null;\n      }\n\n      if (exif.getUint16(offset, little) === 0x0112) {\n        return exifCallback(offset + 8, little);\n      }\n\n      offset += 12;\n    }\n\n    return null;\n  };\n\n  var hasTransparency = function hasTransparency(img) {\n    var canvas, ctx, data, i, j, pcsn, ref;\n    pcsn = 50;\n    canvas = document.createElement('canvas');\n    canvas.width = canvas.height = pcsn;\n    ctx = canvas.getContext('2d');\n    ctx.drawImage(img, 0, 0, pcsn, pcsn);\n    data = ctx.getImageData(0, 0, pcsn, pcsn).data;\n    canvas.width = canvas.height = 1;\n\n    for (i = j = 3, ref = data.length; j < ref; i = j += 4) {\n      if (data[i] < 254) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  // progressState: one of 'error', 'ready', 'uploading', 'uploaded'\n  // internal api\n  //   __notifyApi: file upload in progress\n  //   __resolveApi: file is ready\n  //   __rejectApi: file failed on any stage\n  //   __completeUpload: file uploaded, info required\n\n  var BaseFile = /*#__PURE__*/function () {\n    function BaseFile(param, settings1) {\n      var sourceInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      _classCallCheck(this, BaseFile);\n\n      var base;\n      this.settings = settings1;\n      this.sourceInfo = sourceInfo;\n      this.fileId = null;\n      this.fileName = null;\n      this.sanitizedName = null;\n      this.fileSize = null;\n      this.isStored = null;\n      this.cdnUrlModifiers = null;\n      this.isImage = null;\n      this.imageInfo = null;\n      this.mimeType = null;\n      this.s3Bucket = null;\n      (base = this.sourceInfo).source || (base.source = this.sourceName);\n\n      this.__setupValidation();\n\n      this.__initApi();\n    }\n\n    _createClass(BaseFile, [{\n      key: \"__startUpload\",\n      value: function __startUpload() {\n        return $__default['default'].Deferred().resolve();\n      }\n    }, {\n      key: \"__completeUpload\",\n      value: function __completeUpload() {\n        var _this = this;\n\n        var _check, logger, ncalls, timeout; // Update info until @apiDeferred resolved.\n\n\n        ncalls = 0;\n\n        if (this.settings.debugUploads) {\n          debug('Load file info.', this.fileId, this.settings.publicKey);\n          logger = setInterval(function () {\n            return debug('Still waiting for file ready.', ncalls, _this.fileId, _this.settings.publicKey);\n          }, 5000);\n          this.apiDeferred.done(function () {\n            return debug('File uploaded.', ncalls, _this.fileId, _this.settings.publicKey);\n          }).always(function () {\n            return clearInterval(logger);\n          });\n        }\n\n        timeout = 100;\n        return (_check = function check() {\n          if (_this.apiDeferred.state() === 'pending') {\n            ncalls += 1;\n            return _this.__updateInfo().done(function () {\n              setTimeout(_check, timeout);\n              timeout += 50;\n              return timeout;\n            });\n          }\n        })();\n      }\n    }, {\n      key: \"__updateInfo\",\n      value: function __updateInfo() {\n        var _this2 = this;\n\n        return jsonp(\"\".concat(this.settings.urlBase, \"/info/\"), 'GET', {\n          jsonerrors: 1,\n          file_id: this.fileId,\n          pub_key: this.settings.publicKey,\n          // Assume that we have all other info if isImage is set to something\n          // other than null and we only waiting for is_ready flag.\n          wait_is_ready: +(this.isImage === null)\n        }, {\n          headers: {\n            'X-UC-User-Agent': this.settings._userAgent\n          }\n        }).fail(function (reason) {\n          if (_this2.settings.debugUploads) {\n            log(\"Can't load file info. Probably removed.\", _this2.fileId, _this2.settings.publicKey, reason);\n          }\n\n          return _this2.__rejectApi('info');\n        }).done(this.__handleFileData.bind(this));\n      }\n    }, {\n      key: \"__handleFileData\",\n      value: function __handleFileData(data) {\n        this.fileName = data.original_filename;\n        this.sanitizedName = data.filename;\n        this.fileSize = data.size;\n        this.isImage = data.is_image;\n        this.imageInfo = data.image_info;\n        this.mimeType = data.mime_type;\n        this.isStored = data.is_stored;\n        this.s3Bucket = data.s3_bucket;\n\n        if (data.default_effects) {\n          this.cdnUrlModifiers = '-/' + data.default_effects;\n        }\n\n        if (this.s3Bucket && this.cdnUrlModifiers) {\n          this.__rejectApi('baddata');\n        }\n\n        this.__runValidators();\n\n        if (data.is_ready) {\n          return this.__resolveApi();\n        }\n      } // Retrieve info\n\n    }, {\n      key: \"__progressInfo\",\n      value: function __progressInfo() {\n        var ref;\n        return {\n          state: this.__progressState,\n          uploadProgress: this.__progress,\n          progress: (ref = this.__progressState) === 'ready' || ref === 'error' ? 1 : this.__progress * 0.9,\n          incompleteFileInfo: this.__fileInfo()\n        };\n      }\n    }, {\n      key: \"__fileInfo\",\n      value: function __fileInfo() {\n        var urlBase;\n\n        if (this.s3Bucket) {\n          urlBase = \"https://\".concat(this.s3Bucket, \".s3.amazonaws.com/\").concat(this.fileId, \"/\").concat(this.sanitizedName);\n        } else {\n          urlBase = \"\".concat(this.settings.cdnBase, \"/\").concat(this.fileId, \"/\");\n        }\n\n        return {\n          uuid: this.fileId,\n          name: this.fileName,\n          size: this.fileSize,\n          isStored: this.isStored,\n          isImage: !this.s3Bucket && this.isImage,\n          originalImageInfo: this.imageInfo,\n          mimeType: this.mimeType,\n          originalUrl: this.fileId ? urlBase : null,\n          cdnUrl: this.fileId ? \"\".concat(urlBase).concat(this.cdnUrlModifiers || '') : null,\n          cdnUrlModifiers: this.cdnUrlModifiers,\n          sourceInfo: this.sourceInfo\n        };\n      } // Validators\n\n    }, {\n      key: \"__setupValidation\",\n      value: function __setupValidation() {\n        this.validators = this.settings.validators || this.settings.__validators || [];\n\n        if (this.settings.imagesOnly) {\n          return this.validators.push(function (info) {\n            if (info.isImage === false) {\n              throw new Error('image');\n            }\n          });\n        }\n      }\n    }, {\n      key: \"__runValidators\",\n      value: function __runValidators() {\n        var err, i, info, len, ref, results, v;\n        info = this.__fileInfo();\n\n        try {\n          ref = this.validators;\n          results = [];\n\n          for (i = 0, len = ref.length; i < len; i++) {\n            v = ref[i];\n            results.push(v(info));\n          }\n\n          return results;\n        } catch (error) {\n          err = error;\n          return this.__rejectApi(err.message);\n        }\n      } // Internal API control\n\n    }, {\n      key: \"__initApi\",\n      value: function __initApi() {\n        this.apiDeferred = $__default['default'].Deferred();\n        this.__progressState = 'uploading';\n        this.__progress = 0;\n        return this.__notifyApi();\n      }\n    }, {\n      key: \"__notifyApi\",\n      value: function __notifyApi() {\n        return this.apiDeferred.notify(this.__progressInfo());\n      }\n    }, {\n      key: \"__rejectApi\",\n      value: function __rejectApi(err) {\n        this.__progressState = 'error';\n\n        this.__notifyApi();\n\n        return this.apiDeferred.reject(err, this.__fileInfo());\n      }\n    }, {\n      key: \"__resolveApi\",\n      value: function __resolveApi() {\n        this.__progressState = 'ready';\n\n        this.__notifyApi();\n\n        return this.apiDeferred.resolve(this.__fileInfo());\n      }\n    }, {\n      key: \"__cancel\",\n      value: function __cancel() {\n        return this.__rejectApi('user');\n      }\n    }, {\n      key: \"__extendApi\",\n      value: function __extendApi(api) {\n        var _this3 = this;\n\n        api.cancel = this.__cancel.bind(this);\n\n        api.pipe = api.then = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          // 'pipe' is alias to 'then' from jQuery 1.8\n          return _this3.__extendApi(fixedPipe.apply(void 0, [api].concat(args)));\n        };\n\n        return api; // extended promise\n      }\n    }, {\n      key: \"promise\",\n      value: function promise() {\n        var _this4 = this;\n\n        var op;\n\n        if (!this.__apiPromise) {\n          this.__apiPromise = this.__extendApi(this.apiDeferred.promise());\n\n          this.__runValidators();\n\n          if (this.apiDeferred.state() === 'pending') {\n            op = this.__startUpload();\n            op.done(function () {\n              _this4.__progressState = 'uploaded';\n              _this4.__progress = 1;\n\n              _this4.__notifyApi();\n\n              return _this4.__completeUpload();\n            });\n            op.progress(function (progress) {\n              if (progress > _this4.__progress) {\n                _this4.__progress = progress;\n                return _this4.__notifyApi();\n              }\n            });\n            op.fail(function () {\n              return _this4.__rejectApi('upload');\n            });\n            this.apiDeferred.always(op.reject);\n          }\n        }\n\n        return this.__apiPromise;\n      }\n    }]);\n\n    return BaseFile;\n  }();\n\n  var _directRunner = null;\n\n  var ObjectFile = /*#__PURE__*/function (_BaseFile) {\n    _inherits(ObjectFile, _BaseFile);\n\n    var _super = _createSuper(ObjectFile);\n\n    function ObjectFile(__file) {\n      var _this;\n\n      _classCallCheck(this, ObjectFile);\n\n      _this = _super.apply(this, arguments);\n      _this.__file = __file;\n      _this.fileName = _this.__file.name || 'original';\n\n      _this.__notifyApi();\n\n      return _this;\n    }\n\n    _createClass(ObjectFile, [{\n      key: \"setFile\",\n      value: function setFile(file) {\n        if (file) {\n          this.__file = file;\n        }\n\n        this.sourceInfo.file = this.__file;\n\n        if (!this.__file) {\n          return;\n        }\n\n        this.fileSize = this.__file.size;\n        this.fileType = this.__file.type || 'application/octet-stream';\n\n        if (this.settings.debugUploads) {\n          debug('Use local file.', this.fileName, this.fileType, this.fileSize);\n        }\n\n        this.__runValidators();\n\n        return this.__notifyApi();\n      }\n    }, {\n      key: \"__startUpload\",\n      value: function __startUpload() {\n        var _this2 = this;\n\n        var df, ios, resizeShare;\n        this.apiDeferred.always(function () {\n          _this2.__file = null;\n          return _this2.__file;\n        });\n\n        if (this.__file.size >= this.settings.multipartMinSize && Blob) {\n          this.setFile();\n          return this.multipartUpload();\n        }\n\n        ios = iOSVersion;\n\n        if (!this.settings.imageShrink || ios && ios < 8) {\n          this.setFile();\n          return this.directUpload();\n        } // if @settings.imageShrink\n\n\n        df = $__default['default'].Deferred();\n        resizeShare = 0.4;\n        shrinkFile(this.__file, this.settings.imageShrink).progress(function (progress) {\n          return df.notify(progress * resizeShare);\n        }).done(this.setFile.bind(this)).fail(function () {\n          _this2.setFile();\n\n          resizeShare = resizeShare * 0.1;\n          return resizeShare;\n        }).always(function () {\n          df.notify(resizeShare);\n          return _this2.directUpload().done(df.resolve).fail(df.reject).progress(function (progress) {\n            return df.notify(resizeShare + progress * (1 - resizeShare));\n          });\n        });\n        return df;\n      }\n    }, {\n      key: \"__autoAbort\",\n      value: function __autoAbort(xhr) {\n        this.apiDeferred.fail(xhr.abort);\n        return xhr;\n      }\n    }, {\n      key: \"directRunner\",\n      value: function directRunner(task) {\n        if (!_directRunner) {\n          _directRunner = taskRunner(this.settings.parallelDirectUploads);\n        }\n\n        return _directRunner(task);\n      }\n    }, {\n      key: \"directUpload\",\n      value: function directUpload() {\n        var _this3 = this;\n\n        var df;\n        df = $__default['default'].Deferred();\n\n        if (!this.__file) {\n          this.__rejectApi('baddata');\n\n          return df;\n        }\n\n        if (this.fileSize > 100 * 1024 * 1024) {\n          this.__rejectApi('size');\n\n          return df;\n        }\n\n        this.directRunner(function (release) {\n          var formData;\n          df.always(release);\n\n          if (_this3.apiDeferred.state() !== 'pending') {\n            return;\n          }\n\n          formData = new window.FormData();\n          formData.append('UPLOADCARE_PUB_KEY', _this3.settings.publicKey);\n          formData.append('signature', _this3.settings.secureSignature);\n          formData.append('expire', _this3.settings.secureExpire);\n          formData.append('UPLOADCARE_STORE', _this3.settings.doNotStore ? '' : 'auto');\n          formData.append('file', _this3.__file, _this3.fileName);\n          formData.append('file_name', _this3.fileName);\n          formData.append('source', _this3.sourceInfo.source);\n          return _this3.__autoAbort($__default['default'].ajax({\n            xhr: function xhr() {\n              var xhr; // Naked XHR for progress tracking\n\n              xhr = $__default['default'].ajaxSettings.xhr();\n\n              if (xhr.upload) {\n                xhr.upload.addEventListener('progress', function (e) {\n                  return df.notify(e.loaded / e.total);\n                }, false);\n              }\n\n              return xhr;\n            },\n            crossDomain: true,\n            type: 'POST',\n            url: \"\".concat(_this3.settings.urlBase, \"/base/?jsonerrors=1\"),\n            headers: {\n              'X-UC-User-Agent': _this3.settings._userAgent\n            },\n            contentType: false,\n            // For correct boundary string\n            processData: false,\n            data: formData,\n            dataType: 'json',\n            error: df.reject,\n            success: function success(data) {\n              if (data != null ? data.file : undefined) {\n                _this3.fileId = data.file;\n                return df.resolve();\n              } else {\n                return df.reject();\n              }\n            }\n          }));\n        });\n        return df;\n      }\n    }, {\n      key: \"multipartUpload\",\n      value: function multipartUpload() {\n        var _this4 = this;\n\n        var df;\n        df = $__default['default'].Deferred();\n\n        if (!this.__file) {\n          return df;\n        }\n\n        this.multipartStart().done(function (data) {\n          return _this4.uploadParts(data.parts, data.uuid).done(function () {\n            return _this4.multipartComplete(data.uuid).done(function (data) {\n              _this4.fileId = data.uuid;\n\n              _this4.__handleFileData(data);\n\n              return df.resolve();\n            }).fail(df.reject);\n          }).progress(df.notify).fail(df.reject);\n        }).fail(df.reject);\n        return df;\n      }\n    }, {\n      key: \"multipartStart\",\n      value: function multipartStart() {\n        var _this5 = this;\n\n        var data;\n        data = {\n          UPLOADCARE_PUB_KEY: this.settings.publicKey,\n          signature: this.settings.secureSignature,\n          expire: this.settings.secureExpire,\n          filename: this.fileName,\n          source: this.sourceInfo.source,\n          size: this.fileSize,\n          content_type: this.fileType,\n          part_size: this.settings.multipartPartSize,\n          UPLOADCARE_STORE: this.settings.doNotStore ? '' : 'auto'\n        };\n        return this.__autoAbort(jsonp(\"\".concat(this.settings.urlBase, \"/multipart/start/?jsonerrors=1\"), 'POST', data, {\n          headers: {\n            'X-UC-User-Agent': this.settings._userAgent\n          }\n        })).fail(function (reason) {\n          if (_this5.settings.debugUploads) {\n            return log(\"Can't start multipart upload.\", reason, data);\n          }\n        });\n      }\n    }, {\n      key: \"uploadParts\",\n      value: function uploadParts(parts, uuid) {\n        var _this6 = this;\n\n        var df, inProgress, j, lastUpdate, progress, ref1, _submit, submittedBytes, submittedParts, updateProgress;\n\n        progress = [];\n        lastUpdate = Date.now();\n\n        updateProgress = function updateProgress(i, loaded) {\n          var j, len, total;\n          progress[i] = loaded;\n\n          if (Date.now() - lastUpdate < 250) {\n            return;\n          }\n\n          lastUpdate = Date.now();\n          total = 0;\n\n          for (j = 0, len = progress.length; j < len; j++) {\n            loaded = progress[j];\n            total += loaded;\n          }\n\n          return df.notify(total / _this6.fileSize);\n        };\n\n        df = $__default['default'].Deferred();\n        inProgress = 0;\n        submittedParts = 0;\n        submittedBytes = 0;\n\n        _submit = function submit() {\n          var attempts, blob, bytesToSubmit, partNo, _retry;\n\n          if (submittedBytes >= _this6.fileSize) {\n            return;\n          }\n\n          bytesToSubmit = submittedBytes + _this6.settings.multipartPartSize;\n\n          if (_this6.fileSize < bytesToSubmit + _this6.settings.multipartMinLastPartSize) {\n            bytesToSubmit = _this6.fileSize;\n          }\n\n          blob = _this6.__file.slice(submittedBytes, bytesToSubmit);\n          submittedBytes = bytesToSubmit;\n          partNo = submittedParts;\n          inProgress += 1;\n          submittedParts += 1;\n          attempts = 0;\n          return (_retry = function retry() {\n            if (_this6.apiDeferred.state() !== 'pending') {\n              return;\n            }\n\n            progress[partNo] = 0;\n            return _this6.__autoAbort($__default['default'].ajax({\n              xhr: function xhr() {\n                var xhr; // Naked XHR for progress tracking\n\n                xhr = $__default['default'].ajaxSettings.xhr();\n                xhr.responseType = 'text';\n\n                if (xhr.upload) {\n                  xhr.upload.addEventListener('progress', function (e) {\n                    return updateProgress(partNo, e.loaded);\n                  }, false);\n                }\n\n                return xhr;\n              },\n              url: parts[partNo],\n              crossDomain: true,\n              type: 'PUT',\n              processData: false,\n              contentType: _this6.fileType,\n              data: blob,\n              error: function error() {\n                attempts += 1;\n\n                if (attempts > _this6.settings.multipartMaxAttempts) {\n                  if (_this6.settings.debugUploads) {\n                    log(\"Part #\".concat(partNo, \" and file upload is failed.\"), uuid);\n                  }\n\n                  return df.reject();\n                } else {\n                  if (_this6.settings.debugUploads) {\n                    debug(\"Part #\".concat(partNo, \"(\").concat(attempts, \") upload is failed.\"), uuid);\n                  }\n\n                  return _retry();\n                }\n              },\n              success: function success() {\n                inProgress -= 1;\n\n                _submit();\n\n                if (!inProgress) {\n                  return df.resolve();\n                }\n              }\n            }));\n          })();\n        };\n\n        for (j = 0, ref1 = this.settings.multipartConcurrency; ref1 >= 0 ? j < ref1 : j > ref1; ref1 >= 0 ? ++j : --j) {\n          _submit();\n        }\n\n        return df;\n      }\n    }, {\n      key: \"multipartComplete\",\n      value: function multipartComplete(uuid) {\n        var _this7 = this;\n\n        var data;\n        data = {\n          UPLOADCARE_PUB_KEY: this.settings.publicKey,\n          uuid: uuid\n        };\n        return this.__autoAbort(jsonp(\"\".concat(this.settings.urlBase, \"/multipart/complete/?jsonerrors=1\"), 'POST', data, {\n          headers: {\n            'X-UC-User-Agent': this.settings._userAgent\n          }\n        })).fail(function (reason) {\n          if (_this7.settings.debugUploads) {\n            return log(\"Can't complete multipart upload.\", uuid, _this7.settings.publicKey, reason);\n          }\n        });\n      }\n    }]);\n\n    return ObjectFile;\n  }(BaseFile);\n\n  ObjectFile.prototype.sourceName = 'local';\n\n  var InputFile = /*#__PURE__*/function (_BaseFile) {\n    _inherits(InputFile, _BaseFile);\n\n    var _super = _createSuper(InputFile);\n\n    function InputFile(__input) {\n      var _this;\n\n      _classCallCheck(this, InputFile);\n\n      _this = _super.apply(this, arguments);\n      _this.__input = __input;\n      _this.fileId = uuid();\n      _this.fileName = $__default['default'](_this.__input).val().split('\\\\').pop();\n\n      _this.__notifyApi();\n\n      return _this;\n    }\n\n    _createClass(InputFile, [{\n      key: \"__startUpload\",\n      value: function __startUpload() {\n        var df, formParam, iframeId, targetUrl;\n        df = $__default['default'].Deferred();\n        targetUrl = \"\".concat(this.settings.urlBase, \"/iframe/\");\n        iframeId = \"uploadcare--iframe-\".concat(this.fileId);\n        this.__iframe = $__default['default']('<iframe>').attr({\n          id: iframeId,\n          name: iframeId\n        }).css('display', 'none').appendTo('body').on('load', df.resolve).on('error', df.reject);\n\n        formParam = function formParam(name, value) {\n          return $__default['default']('<input/>', {\n            type: 'hidden',\n            name: name,\n            value: value\n          });\n        };\n\n        $__default['default'](this.__input).attr('name', 'file');\n        this.__iframeForm = $__default['default']('<form>').attr({\n          method: 'POST',\n          action: targetUrl,\n          enctype: 'multipart/form-data',\n          target: iframeId\n        }).append(formParam('UPLOADCARE_PUB_KEY', this.settings.publicKey)).append(formParam('UPLOADCARE_SIGNATURE', this.settings.secureSignature)).append(formParam('UPLOADCARE_EXPIRE', this.settings.secureExpire)).append(formParam('UPLOADCARE_FILE_ID', this.fileId)).append(formParam('UPLOADCARE_STORE', this.settings.doNotStore ? '' : 'auto')).append(formParam('UPLOADCARE_SOURCE', this.sourceInfo.source)).append(this.__input).css('display', 'none').appendTo('body').submit();\n        return df.always(this.__cleanUp.bind(this));\n      }\n    }, {\n      key: \"__cleanUp\",\n      value: function __cleanUp() {\n        var ref1, ref2;\n\n        if ((ref1 = this.__iframe) != null) {\n          ref1.off('load error').remove();\n        }\n\n        if ((ref2 = this.__iframeForm) != null) {\n          ref2.remove();\n        }\n\n        this.__iframe = null;\n        this.__iframeForm = null;\n        return this.__iframeForm;\n      }\n    }]);\n\n    return InputFile;\n  }(BaseFile);\n\n  InputFile.prototype.sourceName = 'local-compat';\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var pusher = createCommonjsModule(function (module, exports) {\n  // changed:\n  //   Pusher.dependency_suffix = '.min'; (was '')\n  //   window.WEB_SOCKET_SWF_LOCATION = \"https://s3.amazonaws.com/uploadcare-static/WebSocketMainInsecure.swf\"\n\n  /*!\n   * Pusher JavaScript Library v1.12.2\n   * http://pusherapp.com/\n   *\n   * Copyright 2011, Pusher\n   * Released under the MIT licence.\n   */\n  var isWindowDefined = isWindowDefined$1.isWindowDefined;\n\n  (function () {\n    var _Pusher, _require;\n\n    (function () {\n      _Pusher = function Pusher(app_key, options) {\n        this.options = options || {};\n        this.key = app_key;\n        this.channels = new _Pusher.Channels();\n        this.global_emitter = new _Pusher.EventsDispatcher();\n        var self = this;\n        this.checkAppKey();\n        this.connection = new _Pusher.Connection(this.key, this.options); // Setup / teardown connection\n\n        this.connection.bind('connected', function () {\n          self.subscribeAll();\n        }).bind('message', function (params) {\n          var internal = params.event.indexOf('pusher_internal:') === 0;\n\n          if (params.channel) {\n            var channel;\n\n            if (channel = self.channel(params.channel)) {\n              channel.emit(params.event, params.data);\n            }\n          } // Emit globaly [deprecated]\n\n\n          if (!internal) self.global_emitter.emit(params.event, params.data);\n        }).bind('disconnected', function () {\n          self.channels.disconnect();\n        }).bind('error', function (err) {\n          _Pusher.warn('Error', err);\n        });\n\n        _Pusher.instances.push(this);\n\n        if (_Pusher.isReady) self.connect();\n      };\n\n      _Pusher.instances = [];\n      _Pusher.prototype = {\n        channel: function channel(name) {\n          return this.channels.find(name);\n        },\n        connect: function connect() {\n          this.connection.connect();\n        },\n        disconnect: function disconnect() {\n          this.connection.disconnect();\n        },\n        bind: function bind(event_name, callback) {\n          this.global_emitter.bind(event_name, callback);\n          return this;\n        },\n        bind_all: function bind_all(callback) {\n          this.global_emitter.bind_all(callback);\n          return this;\n        },\n        subscribeAll: function subscribeAll() {\n          var channelName;\n\n          for (channelName in this.channels.channels) {\n            if (this.channels.channels.hasOwnProperty(channelName)) {\n              this.subscribe(channelName);\n            }\n          }\n        },\n        subscribe: function subscribe(channel_name) {\n          var self = this;\n          var channel = this.channels.add(channel_name, this);\n\n          if (this.connection.state === 'connected') {\n            channel.authorize(this.connection.socket_id, this.options, function (err, data) {\n              if (err) {\n                channel.emit('pusher:subscription_error', data);\n              } else {\n                self.send_event('pusher:subscribe', {\n                  channel: channel_name,\n                  auth: data.auth,\n                  channel_data: data.channel_data\n                });\n              }\n            });\n          }\n\n          return channel;\n        },\n        unsubscribe: function unsubscribe(channel_name) {\n          this.channels.remove(channel_name);\n\n          if (this.connection.state === 'connected') {\n            this.send_event('pusher:unsubscribe', {\n              channel: channel_name\n            });\n          }\n        },\n        send_event: function send_event(event_name, data, channel) {\n          return this.connection.send_event(event_name, data, channel);\n        },\n        checkAppKey: function checkAppKey() {\n          if (this.key === null || this.key === undefined) {\n            _Pusher.warn('Warning', 'You must pass your app key when you instantiate Pusher.');\n          }\n        }\n      };\n      _Pusher.Util = {\n        extend: function extend(target, extensions) {\n          for (var property in extensions) {\n            if (extensions[property] && extensions[property].constructor && extensions[property].constructor === Object) {\n              target[property] = extend(target[property] || {}, extensions[property]);\n            } else {\n              target[property] = extensions[property];\n            }\n          }\n\n          return target;\n        },\n        stringify: function stringify() {\n          var m = [\"Pusher\"];\n\n          for (var i = 0; i < arguments.length; i++) {\n            if (typeof arguments[i] === \"string\") {\n              m.push(arguments[i]);\n            } else {\n              if (window['JSON'] == undefined) {\n                m.push(arguments[i].toString());\n              } else {\n                m.push(JSON.stringify(arguments[i]));\n              }\n            }\n          }\n          return m.join(\" : \");\n        },\n        arrayIndexOf: function arrayIndexOf(array, item) {\n          // MSIE doesn't have array.indexOf\n          var nativeIndexOf = Array.prototype.indexOf;\n          if (array == null) return -1;\n          if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);\n\n          for (i = 0, l = array.length; i < l; i++) {\n            if (array[i] === item) return i;\n          }\n\n          return -1;\n        }\n      }; // To receive log output provide a Pusher.log function, for example\n      // Pusher.log = function(m){console.log(m)}\n\n      _Pusher.debug = function () {\n        if (!_Pusher.log) return;\n\n        _Pusher.log(_Pusher.Util.stringify.apply(this, arguments));\n      };\n\n      _Pusher.warn = function () {\n        if (window.console && window.console.warn) {\n          window.console.warn(_Pusher.Util.stringify.apply(this, arguments));\n        } else {\n          if (!_Pusher.log) return;\n\n          _Pusher.log(_Pusher.Util.stringify.apply(this, arguments));\n        }\n      }; // Pusher defaults\n\n\n      _Pusher.VERSION = '1.12.2';\n      _Pusher.host = 'ws.pusherapp.com';\n      _Pusher.ws_port = 80;\n      _Pusher.wss_port = 443;\n      _Pusher.channel_auth_endpoint = '/pusher/auth';\n      _Pusher.cdn_http = 'http://js.pusher.com/';\n      _Pusher.cdn_https = 'https://d3dy5gmtp8yhk7.cloudfront.net/';\n      _Pusher.dependency_suffix = '.min';\n      _Pusher.channel_auth_transport = 'ajax';\n      _Pusher.activity_timeout = 120000;\n      _Pusher.pong_timeout = 30000;\n      _Pusher.isReady = false;\n\n      _Pusher.ready = function () {\n        _Pusher.isReady = true;\n\n        for (var i = 0, l = _Pusher.instances.length; i < l; i++) {\n          _Pusher.instances[i].connect();\n        }\n      };\n    })();\n\n    (function () {\n      /* Abstract event binding\n      Example:\n      \n          var MyEventEmitter = function(){};\n          MyEventEmitter.prototype = new Pusher.EventsDispatcher;\n      \n          var emitter = new MyEventEmitter();\n      \n          // Bind to single event\n          emitter.bind('foo_event', function(data){ alert(data)} );\n      \n          // Bind to all\n          emitter.bind_all(function(eventName, data){ alert(data) });\n      \n      --------------------------------------------------------*/\n      function CallbackRegistry() {\n        this._callbacks = {};\n      }\n\n      CallbackRegistry.prototype.get = function (eventName) {\n        return this._callbacks[this._prefix(eventName)];\n      };\n\n      CallbackRegistry.prototype.add = function (eventName, callback) {\n        var prefixedEventName = this._prefix(eventName);\n\n        this._callbacks[prefixedEventName] = this._callbacks[prefixedEventName] || [];\n\n        this._callbacks[prefixedEventName].push(callback);\n      };\n\n      CallbackRegistry.prototype.remove = function (eventName, callback) {\n        if (this.get(eventName)) {\n          var index = _Pusher.Util.arrayIndexOf(this.get(eventName), callback);\n\n          this._callbacks[this._prefix(eventName)].splice(index, 1);\n        }\n      };\n\n      CallbackRegistry.prototype._prefix = function (eventName) {\n        return \"_\" + eventName;\n      };\n\n      function EventsDispatcher(failThrough) {\n        this.callbacks = new CallbackRegistry();\n        this.global_callbacks = []; // Run this function when dispatching an event when no callbacks defined\n\n        this.failThrough = failThrough;\n      }\n\n      EventsDispatcher.prototype.bind = function (eventName, callback) {\n        this.callbacks.add(eventName, callback);\n        return this; // chainable\n      };\n\n      EventsDispatcher.prototype.unbind = function (eventName, callback) {\n        this.callbacks.remove(eventName, callback);\n        return this;\n      };\n\n      EventsDispatcher.prototype.emit = function (eventName, data) {\n        // Global callbacks\n        for (var i = 0; i < this.global_callbacks.length; i++) {\n          this.global_callbacks[i](eventName, data);\n        } // Event callbacks\n\n\n        var callbacks = this.callbacks.get(eventName);\n\n        if (callbacks) {\n          for (var i = 0; i < callbacks.length; i++) {\n            callbacks[i](data);\n          }\n        } else if (this.failThrough) {\n          this.failThrough(eventName, data);\n        }\n\n        return this;\n      };\n\n      EventsDispatcher.prototype.bind_all = function (callback) {\n        this.global_callbacks.push(callback);\n        return this;\n      };\n\n      _Pusher.EventsDispatcher = EventsDispatcher;\n    })();\n\n    (function () {\n      /*-----------------------------------------------\n        Helpers:\n      -----------------------------------------------*/\n      function capitalize(str) {\n        return str.substr(0, 1).toUpperCase() + str.substr(1);\n      }\n\n      function safeCall(method, obj, data) {\n        if (obj[method] !== undefined) {\n          obj[method](data);\n        }\n      }\n      /*-----------------------------------------------\n        The State Machine\n      -----------------------------------------------*/\n\n\n      function Machine(initialState, transitions, stateActions) {\n        _Pusher.EventsDispatcher.call(this);\n\n        this.state = undefined;\n        this.errors = []; // functions for each state\n\n        this.stateActions = stateActions; // set up the transitions\n\n        this.transitions = transitions;\n        this.transition(initialState);\n      }\n\n      Machine.prototype.transition = function (nextState, data) {\n        var prevState = this.state;\n        var stateCallbacks = this.stateActions;\n\n        if (prevState && _Pusher.Util.arrayIndexOf(this.transitions[prevState], nextState) == -1) {\n          this.emit('invalid_transition_attempt', {\n            oldState: prevState,\n            newState: nextState\n          });\n          throw new Error('Invalid transition [' + prevState + ' to ' + nextState + ']');\n        } // exit\n\n\n        safeCall(prevState + 'Exit', stateCallbacks, data); // tween\n\n        safeCall(prevState + 'To' + capitalize(nextState), stateCallbacks, data); // pre\n\n        safeCall(nextState + 'Pre', stateCallbacks, data); // change state:\n\n        this.state = nextState; // handy to bind to\n\n        this.emit('state_change', {\n          oldState: prevState,\n          newState: nextState\n        }); // Post:\n\n        safeCall(nextState + 'Post', stateCallbacks, data);\n      };\n\n      Machine.prototype.is = function (state) {\n        return this.state === state;\n      };\n\n      Machine.prototype.isNot = function (state) {\n        return this.state !== state;\n      };\n\n      _Pusher.Util.extend(Machine.prototype, _Pusher.EventsDispatcher.prototype);\n\n      _Pusher.Machine = Machine;\n    })();\n\n    (function () {\n      /*\n        A little bauble to interface with window.navigator.onLine,\n        window.ononline and window.onoffline.  Easier to mock.\n      */\n      var NetInfo = function NetInfo() {\n        var self = this;\n\n        _Pusher.EventsDispatcher.call(this); // This is okay, as IE doesn't support this stuff anyway.\n\n\n        if (window.addEventListener !== undefined) {\n          window.addEventListener(\"online\", function () {\n            self.emit('online', null);\n          }, false);\n          window.addEventListener(\"offline\", function () {\n            self.emit('offline', null);\n          }, false);\n        }\n      }; // Offline means definitely offline (no connection to router).\n      // Inverse does NOT mean definitely online (only currently supported in Safari\n      // and even there only means the device has a connection to the router).\n\n\n      NetInfo.prototype.isOnLine = function () {\n        if (window.navigator.onLine === undefined) {\n          return true;\n        } else {\n          return window.navigator.onLine;\n        }\n      };\n\n      _Pusher.Util.extend(NetInfo.prototype, _Pusher.EventsDispatcher.prototype);\n\n      _Pusher.NetInfo = NetInfo;\n    })();\n\n    (function () {\n      var machineTransitions = {\n        'initialized': ['waiting', 'failed'],\n        'waiting': ['connecting', 'permanentlyClosed'],\n        'connecting': ['open', 'permanentlyClosing', 'impermanentlyClosing', 'waiting'],\n        'open': ['connected', 'permanentlyClosing', 'impermanentlyClosing', 'waiting'],\n        'connected': ['permanentlyClosing', 'waiting'],\n        'impermanentlyClosing': ['waiting', 'permanentlyClosing'],\n        'permanentlyClosing': ['permanentlyClosed'],\n        'permanentlyClosed': ['waiting', 'failed'],\n        'failed': ['permanentlyClosed']\n      }; // Amount to add to time between connection attemtpts per failed attempt.\n\n      var UNSUCCESSFUL_CONNECTION_ATTEMPT_ADDITIONAL_WAIT = 2000;\n      var UNSUCCESSFUL_OPEN_ATTEMPT_ADDITIONAL_TIMEOUT = 2000;\n      var UNSUCCESSFUL_CONNECTED_ATTEMPT_ADDITIONAL_TIMEOUT = 2000;\n      var MAX_CONNECTION_ATTEMPT_WAIT = 5 * UNSUCCESSFUL_CONNECTION_ATTEMPT_ADDITIONAL_WAIT;\n      var MAX_OPEN_ATTEMPT_TIMEOUT = 5 * UNSUCCESSFUL_OPEN_ATTEMPT_ADDITIONAL_TIMEOUT;\n      var MAX_CONNECTED_ATTEMPT_TIMEOUT = 5 * UNSUCCESSFUL_CONNECTED_ATTEMPT_ADDITIONAL_TIMEOUT;\n\n      function resetConnectionParameters(connection) {\n        connection.connectionWait = 0;\n\n        if (_Pusher.TransportType === 'flash') {\n          // Flash needs a bit more time\n          connection.openTimeout = 5000;\n        } else {\n          connection.openTimeout = 2000;\n        }\n\n        connection.connectedTimeout = 2000;\n        connection.connectionSecure = connection.compulsorySecure;\n        connection.connectionAttempts = 0;\n      }\n\n      function Connection(key, options) {\n        var self = this;\n\n        _Pusher.EventsDispatcher.call(this);\n\n        this.options = _Pusher.Util.extend({\n          encrypted: false\n        }, options);\n        this.netInfo = new _Pusher.NetInfo();\n        this.netInfo.bind('online', function () {\n          if (self._machine.is('waiting')) {\n            self._machine.transition('connecting');\n\n            updateState('connecting');\n          }\n        });\n        this.netInfo.bind('offline', function () {\n          if (self._machine.is('connected')) {\n            // These are for Chrome 15, which ends up\n            // having two sockets hanging around.\n            self.socket.onclose = undefined;\n            self.socket.onmessage = undefined;\n            self.socket.onerror = undefined;\n            self.socket.onopen = undefined;\n            self.socket.close();\n            self.socket = undefined;\n\n            self._machine.transition('waiting');\n          }\n        }); // define the state machine that runs the connection\n\n        this._machine = new _Pusher.Machine('initialized', machineTransitions, {\n          initializedPre: function initializedPre() {\n            self.compulsorySecure = self.options.encrypted;\n            self.key = key;\n            self.socket = null;\n            self.socket_id = null;\n            self.state = 'initialized';\n          },\n          waitingPre: function waitingPre() {\n            if (self.connectionWait > 0) {\n              self.emit('connecting_in', self.connectionWait);\n            }\n\n            if (self.netInfo.isOnLine() && self.connectionAttempts <= 4) {\n              updateState('connecting');\n            } else {\n              updateState('unavailable');\n            } // When in the unavailable state we attempt to connect, but don't\n            // broadcast that fact\n\n\n            if (self.netInfo.isOnLine()) {\n              self._waitingTimer = setTimeout(function () {\n                self._machine.transition('connecting');\n              }, connectionDelay());\n            }\n          },\n          waitingExit: function waitingExit() {\n            clearTimeout(self._waitingTimer);\n          },\n          connectingPre: function connectingPre() {\n            // Case that a user manages to get to the connecting\n            // state even when offline.\n            if (self.netInfo.isOnLine() === false) {\n              self._machine.transition('waiting');\n\n              updateState('unavailable');\n              return;\n            }\n\n            var url = formatURL(self.key, self.connectionSecure);\n\n            _Pusher.debug('Connecting', url);\n\n            self.socket = new _Pusher.Transport(url); // now that the socket connection attempt has been started,\n            // set up the callbacks fired by the socket for different outcomes\n\n            self.socket.onopen = ws_onopen;\n            self.socket.onclose = transitionToWaiting;\n            self.socket.onerror = ws_onError; // allow time to get ws_onOpen, otherwise close socket and try again\n\n            self._connectingTimer = setTimeout(TransitionToImpermanentlyClosing, self.openTimeout);\n          },\n          connectingExit: function connectingExit() {\n            clearTimeout(self._connectingTimer);\n            self.socket.onopen = undefined; // unbind to avoid open events that are no longer relevant\n          },\n          connectingToWaiting: function connectingToWaiting() {\n            updateConnectionParameters(); // FUTURE: update only ssl\n          },\n          connectingToImpermanentlyClosing: function connectingToImpermanentlyClosing() {\n            updateConnectionParameters(); // FUTURE: update only timeout\n          },\n          openPre: function openPre() {\n            self.socket.onmessage = ws_onMessageOpen;\n            self.socket.onerror = ws_onError;\n            self.socket.onclose = transitionToWaiting; // allow time to get connected-to-Pusher message, otherwise close socket, try again\n\n            self._openTimer = setTimeout(TransitionToImpermanentlyClosing, self.connectedTimeout);\n          },\n          openExit: function openExit() {\n            clearTimeout(self._openTimer);\n            self.socket.onmessage = undefined; // unbind to avoid messages that are no longer relevant\n          },\n          openToWaiting: function openToWaiting() {\n            updateConnectionParameters();\n          },\n          openToImpermanentlyClosing: function openToImpermanentlyClosing() {\n            updateConnectionParameters();\n          },\n          connectedPre: function connectedPre(socket_id) {\n            self.socket_id = socket_id;\n            self.socket.onmessage = ws_onMessageConnected;\n            self.socket.onerror = ws_onError;\n            self.socket.onclose = transitionToWaiting;\n            resetConnectionParameters(self);\n            self.connectedAt = new Date().getTime();\n            resetActivityCheck();\n          },\n          connectedPost: function connectedPost() {\n            updateState('connected');\n          },\n          connectedExit: function connectedExit() {\n            stopActivityCheck();\n            updateState('disconnected');\n          },\n          impermanentlyClosingPost: function impermanentlyClosingPost() {\n            if (self.socket) {\n              self.socket.onclose = transitionToWaiting;\n              self.socket.close();\n            }\n          },\n          permanentlyClosingPost: function permanentlyClosingPost() {\n            if (self.socket) {\n              self.socket.onclose = function () {\n                resetConnectionParameters(self);\n\n                self._machine.transition('permanentlyClosed');\n              };\n\n              self.socket.close();\n            } else {\n              resetConnectionParameters(self);\n\n              self._machine.transition('permanentlyClosed');\n            }\n          },\n          failedPre: function failedPre() {\n            updateState('failed');\n\n            _Pusher.debug('WebSockets are not available in this browser.');\n          },\n          permanentlyClosedPost: function permanentlyClosedPost() {\n            updateState('disconnected');\n          }\n        });\n        /*-----------------------------------------------\n          -----------------------------------------------*/\n\n        function updateConnectionParameters() {\n          if (self.connectionWait < MAX_CONNECTION_ATTEMPT_WAIT) {\n            self.connectionWait += UNSUCCESSFUL_CONNECTION_ATTEMPT_ADDITIONAL_WAIT;\n          }\n\n          if (self.openTimeout < MAX_OPEN_ATTEMPT_TIMEOUT) {\n            self.openTimeout += UNSUCCESSFUL_OPEN_ATTEMPT_ADDITIONAL_TIMEOUT;\n          }\n\n          if (self.connectedTimeout < MAX_CONNECTED_ATTEMPT_TIMEOUT) {\n            self.connectedTimeout += UNSUCCESSFUL_CONNECTED_ATTEMPT_ADDITIONAL_TIMEOUT;\n          }\n\n          if (self.compulsorySecure !== true) {\n            self.connectionSecure = !self.connectionSecure;\n          }\n\n          self.connectionAttempts++;\n        }\n\n        function formatURL(key, isSecure) {\n          var port = _Pusher.ws_port;\n          var protocol = 'ws://'; // Always connect with SSL if the current page has\n          // been loaded via HTTPS.\n          //\n          // FUTURE: Always connect using SSL.\n          //\n\n          if (isSecure || document.location.protocol === 'https:') {\n            port = _Pusher.wss_port;\n            protocol = 'wss://';\n          }\n\n          var flash = _Pusher.TransportType === \"flash\" ? \"true\" : \"false\";\n          return protocol + _Pusher.host + ':' + port + '/app/' + key + '?protocol=5&client=js' + '&version=' + _Pusher.VERSION + '&flash=' + flash;\n        } // callback for close and retry.  Used on timeouts.\n\n\n        function TransitionToImpermanentlyClosing() {\n          self._machine.transition('impermanentlyClosing');\n        }\n\n        function resetActivityCheck() {\n          if (self._activityTimer) {\n            clearTimeout(self._activityTimer);\n          } // Send ping after inactivity\n\n\n          self._activityTimer = setTimeout(function () {\n            self.send_event('pusher:ping', {}); // Wait for pong response\n\n            self._activityTimer = setTimeout(function () {\n              self.socket.close();\n            }, self.options.pong_timeout || _Pusher.pong_timeout);\n          }, self.options.activity_timeout || _Pusher.activity_timeout);\n        }\n\n        function stopActivityCheck() {\n          if (self._activityTimer) {\n            clearTimeout(self._activityTimer);\n          }\n        } // Returns the delay before the next connection attempt should be made\n        //\n        // This function guards against attempting to connect more frequently than\n        // once every second\n        //\n\n\n        function connectionDelay() {\n          var delay = self.connectionWait;\n\n          if (delay === 0) {\n            if (self.connectedAt) {\n              var t = 1000;\n              var connectedFor = new Date().getTime() - self.connectedAt;\n\n              if (connectedFor < t) {\n                delay = t - connectedFor;\n              }\n            }\n          }\n\n          return delay;\n        }\n        /*-----------------------------------------------\n          WebSocket Callbacks\n          -----------------------------------------------*/\n        // no-op, as we only care when we get pusher:connection_established\n\n\n        function ws_onopen() {\n          self._machine.transition('open');\n        }\n\n        function handleCloseCode(code, message) {\n          // first inform the end-developer of this error\n          self.emit('error', {\n            type: 'PusherError',\n            data: {\n              code: code,\n              message: message\n            }\n          });\n\n          if (code === 4000) {\n            // SSL only app\n            self.compulsorySecure = true;\n            self.connectionSecure = true;\n            self.options.encrypted = true;\n            TransitionToImpermanentlyClosing();\n          } else if (code < 4100) {\n            // Permentently close connection\n            self._machine.transition('permanentlyClosing');\n          } else if (code < 4200) {\n            // Backoff before reconnecting\n            self.connectionWait = 1000;\n\n            self._machine.transition('waiting');\n          } else if (code < 4300) {\n            // Reconnect immediately\n            TransitionToImpermanentlyClosing();\n          } else {\n            // Unknown error\n            self._machine.transition('permanentlyClosing');\n          }\n        }\n\n        function ws_onMessageOpen(event) {\n          var params = parseWebSocketEvent(event);\n\n          if (params !== undefined) {\n            if (params.event === 'pusher:connection_established') {\n              self._machine.transition('connected', params.data.socket_id);\n            } else if (params.event === 'pusher:error') {\n              handleCloseCode(params.data.code, params.data.message);\n            }\n          }\n        }\n\n        function ws_onMessageConnected(event) {\n          resetActivityCheck();\n          var params = parseWebSocketEvent(event);\n\n          if (params !== undefined) {\n            _Pusher.debug('Event recd', params);\n\n            switch (params.event) {\n              case 'pusher:error':\n                self.emit('error', {\n                  type: 'PusherError',\n                  data: params.data\n                });\n                break;\n\n              case 'pusher:ping':\n                self.send_event('pusher:pong', {});\n                break;\n            }\n\n            self.emit('message', params);\n          }\n        }\n        /**\n         * Parses an event from the WebSocket to get\n         * the JSON payload that we require\n         *\n         * @param {MessageEvent} event  The event from the WebSocket.onmessage handler.\n        **/\n\n\n        function parseWebSocketEvent(event) {\n          try {\n            var params = JSON.parse(event.data);\n\n            if (typeof params.data === 'string') {\n              try {\n                params.data = JSON.parse(params.data);\n              } catch (e) {\n                if (!(e instanceof SyntaxError)) {\n                  throw e;\n                }\n              }\n            }\n\n            return params;\n          } catch (e) {\n            self.emit('error', {\n              type: 'MessageParseError',\n              error: e,\n              data: event.data\n            });\n          }\n        }\n\n        function transitionToWaiting() {\n          self._machine.transition('waiting');\n        }\n\n        function ws_onError(error) {\n          // just emit error to user - socket will already be closed by browser\n          self.emit('error', {\n            type: 'WebSocketError',\n            error: error\n          });\n        } // Updates the public state information exposed by connection\n        //\n        // This is distinct from the internal state information used by _machine\n        // to manage the connection\n        //\n\n\n        function updateState(newState, data) {\n          var prevState = self.state;\n          self.state = newState; // Only emit when the state changes\n\n          if (prevState !== newState) {\n            _Pusher.debug('State changed', prevState + ' -> ' + newState);\n\n            self.emit('state_change', {\n              previous: prevState,\n              current: newState\n            });\n            self.emit(newState, data);\n          }\n        }\n      }\n\n      Connection.prototype.connect = function () {\n        // no WebSockets\n        if (!this._machine.is('failed') && !_Pusher.Transport) {\n          this._machine.transition('failed');\n        } // initial open of connection\n        else if (this._machine.is('initialized')) {\n            resetConnectionParameters(this);\n\n            this._machine.transition('waiting');\n          } // user skipping connection wait\n          else if (this._machine.is('waiting') && this.netInfo.isOnLine() === true) {\n              this._machine.transition('connecting');\n            } // user re-opening connection after closing it\n            else if (this._machine.is(\"permanentlyClosed\")) {\n                resetConnectionParameters(this);\n\n                this._machine.transition('waiting');\n              }\n      };\n\n      Connection.prototype.send = function (data) {\n        if (this._machine.is('connected')) {\n          // Workaround for MobileSafari bug (see https://gist.github.com/2052006)\n          var self = this;\n          setTimeout(function () {\n            self.socket.send(data);\n          }, 0);\n          return true;\n        } else {\n          return false;\n        }\n      };\n\n      Connection.prototype.send_event = function (event_name, data, channel) {\n        var payload = {\n          event: event_name,\n          data: data\n        };\n        if (channel) payload['channel'] = channel;\n\n        _Pusher.debug('Event sent', payload);\n\n        return this.send(JSON.stringify(payload));\n      };\n\n      Connection.prototype.disconnect = function () {\n        if (this._machine.is('permanentlyClosed')) return;\n\n        if (this._machine.is('waiting') || this._machine.is('failed')) {\n          this._machine.transition('permanentlyClosed');\n        } else {\n          this._machine.transition('permanentlyClosing');\n        }\n      };\n\n      _Pusher.Util.extend(Connection.prototype, _Pusher.EventsDispatcher.prototype);\n\n      _Pusher.Connection = Connection;\n    })();\n\n    (function () {\n      _Pusher.Channels = function () {\n        this.channels = {};\n      };\n\n      _Pusher.Channels.prototype = {\n        add: function add(channel_name, pusher) {\n          var existing_channel = this.find(channel_name);\n\n          if (!existing_channel) {\n            var channel = _Pusher.Channel.factory(channel_name, pusher);\n\n            this.channels[channel_name] = channel;\n            return channel;\n          } else {\n            return existing_channel;\n          }\n        },\n        find: function find(channel_name) {\n          return this.channels[channel_name];\n        },\n        remove: function remove(channel_name) {\n          delete this.channels[channel_name];\n        },\n        disconnect: function disconnect() {\n          for (var channel_name in this.channels) {\n            this.channels[channel_name].disconnect();\n          }\n        }\n      };\n\n      _Pusher.Channel = function (channel_name, pusher) {\n        var self = this;\n\n        _Pusher.EventsDispatcher.call(this, function (event_name, event_data) {\n          _Pusher.debug('No callbacks on ' + channel_name + ' for ' + event_name);\n        });\n\n        this.pusher = pusher;\n        this.name = channel_name;\n        this.subscribed = false;\n        this.bind('pusher_internal:subscription_succeeded', function (data) {\n          self.onSubscriptionSucceeded(data);\n        });\n      };\n\n      _Pusher.Channel.prototype = {\n        // inheritable constructor\n        init: function init() {},\n        disconnect: function disconnect() {\n          this.subscribed = false;\n          this.emit(\"pusher_internal:disconnected\");\n        },\n        onSubscriptionSucceeded: function onSubscriptionSucceeded(data) {\n          this.subscribed = true;\n          this.emit('pusher:subscription_succeeded');\n        },\n        authorize: function authorize(socketId, options, callback) {\n          return callback(false, {}); // normal channels don't require auth\n        },\n        trigger: function trigger(event, data) {\n          return this.pusher.send_event(event, data, this.name);\n        }\n      };\n\n      _Pusher.Util.extend(_Pusher.Channel.prototype, _Pusher.EventsDispatcher.prototype);\n\n      _Pusher.Channel.PrivateChannel = {\n        authorize: function authorize(socketId, options, callback) {\n          var self = this;\n          var authorizer = new _Pusher.Channel.Authorizer(this, _Pusher.channel_auth_transport, options);\n          return authorizer.authorize(socketId, function (err, authData) {\n            if (!err) {\n              self.emit('pusher_internal:authorized', authData);\n            }\n\n            callback(err, authData);\n          });\n        }\n      };\n      _Pusher.Channel.PresenceChannel = {\n        init: function init() {\n          this.members = new Members(this); // leeches off channel events\n        },\n        onSubscriptionSucceeded: function onSubscriptionSucceeded(data) {\n          this.subscribed = true; // We override this because we want the Members obj to be responsible for\n          // emitting the pusher:subscription_succeeded.  It will do this after it has done its work.\n        }\n      };\n\n      var Members = function Members(channel) {\n        var self = this;\n\n        var reset = function reset() {\n          this._members_map = {};\n          this.count = 0;\n          this.me = null;\n        };\n\n        reset.call(this);\n        channel.bind('pusher_internal:authorized', function (authorizedData) {\n          var channelData = JSON.parse(authorizedData.channel_data);\n          channel.bind(\"pusher_internal:subscription_succeeded\", function (subscriptionData) {\n            self._members_map = subscriptionData.presence.hash;\n            self.count = subscriptionData.presence.count;\n            self.me = self.get(channelData.user_id);\n            channel.emit('pusher:subscription_succeeded', self);\n          });\n        });\n        channel.bind('pusher_internal:member_added', function (data) {\n          if (self.get(data.user_id) === null) {\n            // only incr if user_id does not already exist\n            self.count++;\n          }\n\n          self._members_map[data.user_id] = data.user_info;\n          channel.emit('pusher:member_added', self.get(data.user_id));\n        });\n        channel.bind('pusher_internal:member_removed', function (data) {\n          var member = self.get(data.user_id);\n\n          if (member) {\n            delete self._members_map[data.user_id];\n            self.count--;\n            channel.emit('pusher:member_removed', member);\n          }\n        });\n        channel.bind('pusher_internal:disconnected', function () {\n          reset.call(self);\n        });\n      };\n\n      Members.prototype = {\n        each: function each(callback) {\n          for (var i in this._members_map) {\n            callback(this.get(i));\n          }\n        },\n        get: function get(user_id) {\n          if (this._members_map.hasOwnProperty(user_id)) {\n            // have heard of this user user_id\n            return {\n              id: user_id,\n              info: this._members_map[user_id]\n            };\n          } else {\n            // have never heard of this user\n            return null;\n          }\n        }\n      };\n\n      _Pusher.Channel.factory = function (channel_name, pusher) {\n        var channel = new _Pusher.Channel(channel_name, pusher);\n\n        if (channel_name.indexOf('private-') === 0) {\n          _Pusher.Util.extend(channel, _Pusher.Channel.PrivateChannel);\n        } else if (channel_name.indexOf('presence-') === 0) {\n          _Pusher.Util.extend(channel, _Pusher.Channel.PrivateChannel);\n\n          _Pusher.Util.extend(channel, _Pusher.Channel.PresenceChannel);\n        }\n        channel.init();\n        return channel;\n      };\n    })();\n\n    (function () {\n      _Pusher.Channel.Authorizer = function (channel, type, options) {\n        this.channel = channel;\n        this.type = type;\n        this.authOptions = (options || {}).auth || {};\n      };\n\n      _Pusher.Channel.Authorizer.prototype = {\n        composeQuery: function composeQuery(socketId) {\n          var query = '&socket_id=' + encodeURIComponent(socketId) + '&channel_name=' + encodeURIComponent(this.channel.name);\n\n          for (var i in this.authOptions.params) {\n            query += \"&\" + encodeURIComponent(i) + \"=\" + encodeURIComponent(this.authOptions.params[i]);\n          }\n\n          return query;\n        },\n        authorize: function authorize(socketId, callback) {\n          return _Pusher.authorizers[this.type].call(this, socketId, callback);\n        }\n      };\n      _Pusher.auth_callbacks = {};\n      _Pusher.authorizers = {\n        ajax: function ajax(socketId, callback) {\n          var xhr;\n\n          if (_Pusher.XHR) {\n            xhr = new _Pusher.XHR();\n          } else {\n            xhr = window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject(\"Microsoft.XMLHTTP\");\n          }\n\n          xhr.open(\"POST\", _Pusher.channel_auth_endpoint, true); // add request headers\n\n          xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n          for (var headerName in this.authOptions.headers) {\n            xhr.setRequestHeader(headerName, this.authOptions.headers[headerName]);\n          }\n\n          xhr.onreadystatechange = function () {\n            if (xhr.readyState == 4) {\n              if (xhr.status == 200) {\n                var data,\n                    parsed = false;\n\n                try {\n                  data = JSON.parse(xhr.responseText);\n                  parsed = true;\n                } catch (e) {\n                  callback(true, 'JSON returned from webapp was invalid, yet status code was 200. Data was: ' + xhr.responseText);\n                }\n\n                if (parsed) {\n                  // prevents double execution.\n                  callback(false, data);\n                }\n              } else {\n                _Pusher.warn(\"Couldn't get auth info from your webapp\", xhr.status);\n\n                callback(true, xhr.status);\n              }\n            }\n          };\n\n          xhr.send(this.composeQuery(socketId));\n          return xhr;\n        },\n        jsonp: function jsonp(socketId, callback) {\n          if (this.authOptions.headers !== undefined) {\n            _Pusher.warn(\"Warn\", \"To send headers with the auth request, you must use AJAX, rather than JSONP.\");\n          }\n\n          var script = document.createElement(\"script\"); // Hacked wrapper.\n\n          _Pusher.auth_callbacks[this.channel.name] = function (data) {\n            callback(false, data);\n          };\n\n          var callback_name = \"Pusher.auth_callbacks['\" + this.channel.name + \"']\";\n          script.src = _Pusher.channel_auth_endpoint + '?callback=' + encodeURIComponent(callback_name) + this.composeQuery(socketId);\n          var head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n          head.insertBefore(script, head.firstChild);\n        }\n      };\n    })(); // _require(dependencies, callback) takes an array of dependency urls and a\n    // callback to call when all the dependecies have finished loading\n\n\n    var _require = function () {\n      function handleScriptLoaded(elem, callback) {\n        if (document.addEventListener) {\n          elem.addEventListener('load', callback, false);\n        } else {\n          elem.attachEvent('onreadystatechange', function () {\n            if (elem.readyState == 'loaded' || elem.readyState == 'complete') {\n              callback();\n            }\n          });\n        }\n      }\n\n      function addScript(src, callback) {\n        var head = document.getElementsByTagName('head')[0];\n        var script = document.createElement('script');\n        script.setAttribute('src', src);\n        script.setAttribute(\"type\", \"text/javascript\");\n        script.setAttribute('async', true);\n        handleScriptLoaded(script, function () {\n          callback();\n        });\n        head.appendChild(script);\n      }\n\n      return function (deps, callback) {\n        var deps_loaded = 0;\n\n        for (var i = 0; i < deps.length; i++) {\n          addScript(deps[i], function () {\n            if (deps.length == ++deps_loaded) {\n              // This setTimeout is a workaround for an Opera issue\n              setTimeout(callback, 0);\n            }\n          });\n        }\n      };\n    }();\n\n    (function () {\n      // Support Firefox versions which prefix WebSocket\n      if (isWindowDefined() && !window['WebSocket'] && window['MozWebSocket']) {\n        window['WebSocket'] = window['MozWebSocket'];\n      }\n\n      if (isWindowDefined() && window['WebSocket']) {\n        _Pusher.Transport = window['WebSocket'];\n        _Pusher.TransportType = 'native';\n      }\n\n      var cdn = isWindowDefined() && (document.location.protocol == 'http:' ? _Pusher.cdn_http : _Pusher.cdn_https);\n      var root = cdn + _Pusher.VERSION;\n      var deps = [];\n\n      if (isWindowDefined() && !window['JSON']) {\n        deps.push(root + '/json2' + _Pusher.dependency_suffix + '.js');\n      }\n\n      if (isWindowDefined() && !window['WebSocket']) {\n        // We manually initialize web-socket-js to iron out cross browser issues\n        window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;\n        deps.push(root + '/flashfallback' + _Pusher.dependency_suffix + '.js');\n      }\n\n      var initialize = function () {\n        if (isWindowDefined() && window['WebSocket']) {\n          // Initialize function in the case that we have native WebSocket support\n          return function () {\n            _Pusher.ready();\n          };\n        } else {\n          // Initialize function for fallback case\n          return function () {\n            if (window['WebSocket']) {\n              // window['WebSocket'] is a flash emulation of WebSocket\n              _Pusher.Transport = window['WebSocket'];\n              _Pusher.TransportType = 'flash'; // window.WEB_SOCKET_SWF_LOCATION = root + \"/WebSocketMain.swf\";\n\n              window.WEB_SOCKET_SWF_LOCATION = \"https://s3.amazonaws.com/uploadcare-static/WebSocketMainInsecure.swf\";\n\n              WebSocket.__addTask(function () {\n                _Pusher.ready();\n              });\n\n              WebSocket.__initialize();\n            } else {\n              // Flash must not be installed\n              _Pusher.Transport = null;\n              _Pusher.TransportType = 'none';\n\n              _Pusher.ready();\n            }\n          };\n        }\n      }(); // Allows calling a function when the document body is available\n\n\n      var ondocumentbody = function ondocumentbody(callback) {\n        var load_body = function load_body() {\n          isWindowDefined() && (document.body ? callback() : setTimeout(load_body, 0));\n        };\n\n        load_body();\n      };\n\n      var initializeOnDocumentBody = function initializeOnDocumentBody() {\n        ondocumentbody(initialize);\n      };\n\n      if (deps.length > 0) {\n        _require(deps, initializeOnDocumentBody);\n      } else {\n        initializeOnDocumentBody();\n      }\n    })();\n\n    this.Pusher = _Pusher;\n  }).call(exports);\n  });\n  var pusher_1 = pusher.Pusher;\n\n  var pushers = {}; // This fixes Pusher's prototype. Because Pusher replaces it:\n  // Pusher.prototype = {method: ...}\n  // instead of extending:\n  // Pusher.prototype.method = ...\n\n  pusher_1.prototype.constructor = pusher_1;\n\n  var ManagedPusher = /*#__PURE__*/function (_Pusher) {\n    _inherits(ManagedPusher, _Pusher);\n\n    var _super = _createSuper(ManagedPusher);\n\n    function ManagedPusher() {\n      _classCallCheck(this, ManagedPusher);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(ManagedPusher, [{\n      key: \"subscribe\",\n      value: function subscribe(name) {\n        // Ensure we are connected when subscribing.\n        if (this.disconnectTimeout) {\n          clearTimeout(this.disconnectTimeout);\n          this.disconnectTimeout = null;\n        }\n\n        this.connect();\n        return _get(_getPrototypeOf(ManagedPusher.prototype), \"subscribe\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"unsubscribe\",\n      value: function unsubscribe(name) {\n        var _this = this;\n\n        _get(_getPrototypeOf(ManagedPusher.prototype), \"unsubscribe\", this).apply(this, arguments); // Schedule disconnect if no channels left.\n\n\n        if ($__default['default'].isEmptyObject(this.channels.channels)) {\n          this.disconnectTimeout = setTimeout(function () {\n            _this.disconnectTimeout = null;\n            return _this.disconnect();\n          }, 5000);\n        }\n      }\n    }]);\n\n    return ManagedPusher;\n  }(pusher_1);\n\n  var getPusher = function getPusher(key) {\n    if (pushers[key] == null) {\n      pushers[key] = new ManagedPusher(key);\n    } // Preconnect before we actually need channel.\n\n\n    pushers[key].connect();\n    return pushers[key];\n  };\n\n  var UrlFile = /*#__PURE__*/function (_BaseFile) {\n    _inherits(UrlFile, _BaseFile);\n\n    var _super = _createSuper(UrlFile);\n\n    function UrlFile(__url) {\n      var _this;\n\n      _classCallCheck(this, UrlFile);\n\n      var filename;\n      _this = _super.apply(this, arguments);\n      _this.__url = __url;\n      filename = splitUrlRegex.exec(_this.__url)[3].split('/').pop();\n\n      if (filename) {\n        try {\n          _this.fileName = decodeURIComponent(filename);\n        } catch (error) {\n          _this.fileName = filename;\n        }\n      }\n\n      _this.__notifyApi();\n\n      return _this;\n    }\n\n    _createClass(UrlFile, [{\n      key: \"setName\",\n      value: function setName(fileName) {\n        this.fileName = fileName;\n        this.__realFileName = fileName;\n        return this.__notifyApi();\n      }\n    }, {\n      key: \"setIsImage\",\n      value: function setIsImage(isImage) {\n        this.isImage = isImage;\n        return this.__notifyApi();\n      }\n    }, {\n      key: \"__startUpload\",\n      value: function __startUpload() {\n        var _this2 = this;\n\n        var data, df, pollWatcher, pusherWatcher;\n        df = $__default['default'].Deferred();\n        pusherWatcher = new PusherWatcher(this.settings);\n        pollWatcher = new PollWatcher(this.settings);\n        data = {\n          pub_key: this.settings.publicKey,\n          signature: this.settings.secureSignature,\n          expire: this.settings.secureExpire,\n          source_url: this.__url,\n          filename: this.__realFileName || '',\n          source: this.sourceInfo.source,\n          store: this.settings.doNotStore ? '' : 'auto',\n          jsonerrors: 1\n        };\n        defer(function () {\n          if (_this2.apiDeferred.state() !== 'pending') {\n            return;\n          }\n\n          return jsonp(\"\".concat(_this2.settings.urlBase, \"/from_url/\"), 'GET', data, {\n            headers: {\n              'X-UC-User-Agent': _this2.settings._userAgent\n            }\n          }).fail(function (reason) {\n            if (_this2.settings.debugUploads) {\n              debug(\"Can't start upload from URL.\", reason, data);\n            }\n\n            return df.reject();\n          }).done(function (data) {\n            var logger;\n\n            if (_this2.apiDeferred.state() !== 'pending') {\n              return;\n            }\n\n            if (_this2.settings.debugUploads) {\n              debug('Start watchers.', data.token);\n              logger = setInterval(function () {\n                return debug('Still watching.', data.token);\n              }, 5000);\n              df.done(function () {\n                return debug('Stop watchers.', data.token);\n              }).always(function () {\n                return clearInterval(logger);\n              });\n            }\n\n            _this2.__listenWatcher(df, $__default['default']([pusherWatcher, pollWatcher]));\n\n            df.always(function () {\n              $__default['default']([pusherWatcher, pollWatcher]).off(_this2.allEvents);\n              pusherWatcher.stopWatching();\n              return pollWatcher.stopWatching();\n            }); // turn off pollWatcher if we receive any message from pusher\n\n            $__default['default'](pusherWatcher).one(_this2.allEvents, function () {\n              if (!pollWatcher.interval) {\n                return;\n              }\n\n              if (_this2.settings.debugUploads) {\n                debug('Start using pusher.', data.token);\n              }\n\n              return pollWatcher.stopWatching();\n            });\n            pusherWatcher.watch(data.token);\n            return pollWatcher.watch(data.token);\n          });\n        });\n        return df;\n      }\n    }, {\n      key: \"__listenWatcher\",\n      value: function __listenWatcher(df, watcher) {\n        var _this3 = this;\n\n        return watcher.on('progress', function (e, data) {\n          _this3.fileSize = data.total;\n          return df.notify(data.done / data.total);\n        }).on('success', function (e, data) {\n          $__default['default'](e.target).trigger('progress', data);\n          _this3.fileId = data.uuid;\n\n          _this3.__handleFileData(data);\n\n          return df.resolve();\n        }).on('error fail', df.reject);\n      }\n    }]);\n\n    return UrlFile;\n  }(BaseFile);\n\n  UrlFile.prototype.sourceName = 'url';\n  UrlFile.prototype.allEvents = 'progress success error fail';\n\n  var PusherWatcher = /*#__PURE__*/function () {\n    function PusherWatcher(settings) {\n      _classCallCheck(this, PusherWatcher);\n\n      this.settings = settings;\n\n      try {\n        this.pusher = getPusher(this.settings.pusherKey);\n      } catch (error) {\n        this.pusher = null;\n      }\n    }\n\n    _createClass(PusherWatcher, [{\n      key: \"watch\",\n      value: function watch(token) {\n        var _this4 = this;\n\n        var channel;\n        this.token = token;\n\n        if (!this.pusher) {\n          return;\n        }\n\n        channel = this.pusher.subscribe(\"task-status-\".concat(this.token));\n        return channel.bind_all(function (ev, data) {\n          return $__default['default'](_this4).trigger(ev, data);\n        });\n      }\n    }, {\n      key: \"stopWatching\",\n      value: function stopWatching() {\n        if (!this.pusher) {\n          return;\n        }\n\n        return this.pusher.unsubscribe(\"task-status-\".concat(this.token));\n      }\n    }]);\n\n    return PusherWatcher;\n  }();\n\n  var PollWatcher = /*#__PURE__*/function () {\n    function PollWatcher(settings) {\n      _classCallCheck(this, PollWatcher);\n\n      this.settings = settings;\n      this.poolUrl = \"\".concat(this.settings.urlBase, \"/from_url/status/\");\n    }\n\n    _createClass(PollWatcher, [{\n      key: \"watch\",\n      value: function watch(token) {\n        var _this5 = this;\n\n        this.token = token;\n\n        var bind = function bind() {\n          _this5.interval = setTimeout(function () {\n            _this5.__updateStatus().done(function () {\n              if (_this5.interval) {\n                // Do not schedule next request if watcher stopped.\n                bind();\n              }\n            });\n          }, 333);\n          return _this5.interval;\n        };\n\n        return bind();\n      }\n    }, {\n      key: \"stopWatching\",\n      value: function stopWatching() {\n        if (this.interval) {\n          clearTimeout(this.interval);\n        }\n\n        this.interval = null;\n        return this.interval;\n      }\n    }, {\n      key: \"__updateStatus\",\n      value: function __updateStatus() {\n        var _this6 = this;\n\n        return jsonp(this.poolUrl, 'GET', {\n          token: this.token\n        }, {\n          headers: {\n            'X-UC-User-Agent': this.settings._userAgent\n          }\n        }).fail(function (reason) {\n          return $__default['default'](_this6).trigger('error');\n        }).done(function (data) {\n          return $__default['default'](_this6).trigger(data.status, data);\n        });\n      }\n    }]);\n\n    return PollWatcher;\n  }();\n\n  var UploadedFile = /*#__PURE__*/function (_BaseFile) {\n    _inherits(UploadedFile, _BaseFile);\n\n    var _super = _createSuper(UploadedFile);\n\n    function UploadedFile(fileIdOrUrl) {\n      var _this;\n\n      _classCallCheck(this, UploadedFile);\n\n      var cdnUrl;\n      _this = _super.apply(this, arguments);\n      cdnUrl = splitCdnUrl(fileIdOrUrl);\n\n      if (cdnUrl) {\n        _this.fileId = cdnUrl[1];\n\n        if (cdnUrl[2]) {\n          _this.cdnUrlModifiers = cdnUrl[2];\n        }\n      } else {\n        _this.__rejectApi('baddata');\n      }\n\n      return _this;\n    }\n\n    return UploadedFile;\n  }(BaseFile);\n\n  UploadedFile.prototype.sourceName = 'uploaded';\n\n  var ReadyFile = /*#__PURE__*/function (_BaseFile2) {\n    _inherits(ReadyFile, _BaseFile2);\n\n    var _super2 = _createSuper(ReadyFile);\n\n    function ReadyFile(data) {\n      var _this2;\n\n      _classCallCheck(this, ReadyFile);\n\n      _this2 = _super2.apply(this, arguments);\n\n      if (!data) {\n        _this2.__rejectApi('deleted');\n      } else {\n        _this2.fileId = data.uuid;\n\n        _this2.__handleFileData(data);\n      }\n\n      return _this2;\n    }\n\n    return ReadyFile;\n  }(BaseFile);\n\n  ReadyFile.prototype.sourceName = 'uploaded';\n\n  var converters = {\n    object: ObjectFile,\n    input: InputFile,\n    url: UrlFile,\n    uploaded: UploadedFile,\n    ready: ReadyFile\n  };\n\n  var fileFrom = function fileFrom(type, data, s) {\n    return filesFrom(type, [data], s)[0];\n  };\n\n  var filesFrom = function filesFrom(type, data, s) {\n    var i, info, len, param, results;\n    s = build(s || {});\n    results = [];\n\n    for (i = 0, len = data.length; i < len; i++) {\n      param = data[i];\n      info = undefined;\n\n      if ($__default['default'].isArray(param)) {\n        info = param[1];\n        param = param[0];\n      }\n\n      results.push(new converters[type](param, s, info).promise());\n    }\n\n    return results;\n  };\n\n  var isFile = function isFile(obj) {\n    return obj && obj.done && obj.fail && obj.cancel;\n  }; // Converts user-given value to File object.\n\n\n  var valueToFile = function valueToFile(value, settings) {\n    if (value && !isFile(value)) {\n      value = fileFrom('uploaded', value, settings);\n    }\n\n    return value || null;\n  };\n\n  var isFileGroup = function isFileGroup(obj) {\n    return obj && obj.files && obj.promise;\n  }; // Converts user-given value to FileGroup object.\n\n\n  var valueToGroup = function valueToGroup(value, settings) {\n    var files, item;\n\n    if (value) {\n      if ($__default['default'].isArray(value)) {\n        files = function () {\n          var j, len, results;\n          results = [];\n\n          for (j = 0, len = value.length; j < len; j++) {\n            item = value[j];\n            results.push(valueToFile(item, settings));\n          }\n\n          return results;\n        }();\n\n        value = FileGroup(files, settings);\n      } else {\n        if (!isFileGroup(value)) {\n          return loadFileGroup(value, settings);\n        }\n      }\n    }\n\n    return wrapToPromise(value || null);\n  }; // check if two groups contains same files in same order\n\n\n  var isFileGroupsEqual = function isFileGroupsEqual(group1, group2) {\n    var file, files1, files2, i, j, len;\n\n    if (group1 === group2) {\n      return true;\n    }\n\n    if (!(isFileGroup(group1) && isFileGroup(group2))) {\n      return false;\n    }\n\n    files1 = group1.files();\n    files2 = group2.files();\n\n    if (files1.length !== files2.length) {\n      return false;\n    }\n\n    for (i = j = 0, len = files1.length; j < len; i = ++j) {\n      file = files1[i];\n\n      if (file !== files2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var indexOf = [].indexOf; // utils\n\n  var Collection = /*#__PURE__*/function () {\n    function Collection() {\n      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var after = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      _classCallCheck(this, Collection);\n\n      this.onAdd = $__default['default'].Callbacks();\n      this.onRemove = $__default['default'].Callbacks();\n      this.onSort = $__default['default'].Callbacks();\n      this.onReplace = $__default['default'].Callbacks();\n      this.__items = [];\n\n      if (!after) {\n        this.init(items);\n      }\n    }\n\n    _createClass(Collection, [{\n      key: \"init\",\n      value: function init(items) {\n        var item, j, len;\n\n        for (j = 0, len = items.length; j < len; j++) {\n          item = items[j];\n          this.add(item);\n        }\n      }\n    }, {\n      key: \"add\",\n      value: function add(item) {\n        return this.__add(item, this.__items.length);\n      }\n    }, {\n      key: \"__add\",\n      value: function __add(item, i) {\n        this.__items.splice(i, 0, item);\n\n        return this.onAdd.fire(item, i);\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(item) {\n        var i;\n        i = $__default['default'].inArray(item, this.__items);\n\n        if (i !== -1) {\n          return this.__remove(item, i);\n        }\n      }\n    }, {\n      key: \"__remove\",\n      value: function __remove(item, i) {\n        this.__items.splice(i, 1);\n\n        return this.onRemove.fire(item, i);\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        var i, item, items, j, len, results;\n        items = this.get();\n        this.__items.length = 0;\n        results = [];\n\n        for (i = j = 0, len = items.length; j < len; i = ++j) {\n          item = items[i];\n          results.push(this.onRemove.fire(item, i));\n        }\n\n        return results;\n      }\n    }, {\n      key: \"replace\",\n      value: function replace(oldItem, newItem) {\n        var i;\n\n        if (oldItem !== newItem) {\n          i = $__default['default'].inArray(oldItem, this.__items);\n\n          if (i !== -1) {\n            return this.__replace(oldItem, newItem, i);\n          }\n        }\n      }\n    }, {\n      key: \"__replace\",\n      value: function __replace(oldItem, newItem, i) {\n        this.__items[i] = newItem;\n        return this.onReplace.fire(oldItem, newItem, i);\n      }\n    }, {\n      key: \"sort\",\n      value: function sort(comparator) {\n        this.__items.sort(comparator);\n\n        return this.onSort.fire();\n      }\n    }, {\n      key: \"get\",\n      value: function get(index) {\n        if (index != null) {\n          return this.__items[index];\n        } else {\n          return this.__items.slice(0);\n        }\n      }\n    }, {\n      key: \"length\",\n      value: function length() {\n        return this.__items.length;\n      }\n    }]);\n\n    return Collection;\n  }();\n\n  var UniqCollection = /*#__PURE__*/function (_Collection) {\n    _inherits(UniqCollection, _Collection);\n\n    var _super = _createSuper(UniqCollection);\n\n    function UniqCollection() {\n      _classCallCheck(this, UniqCollection);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(UniqCollection, [{\n      key: \"add\",\n      value: function add(item) {\n        if (indexOf.call(this.__items, item) >= 0) {\n          return;\n        }\n\n        return _get(_getPrototypeOf(UniqCollection.prototype), \"add\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"__replace\",\n      value: function __replace(oldItem, newItem, i) {\n        if (indexOf.call(this.__items, newItem) >= 0) {\n          return this.remove(oldItem);\n        } else {\n          return _get(_getPrototypeOf(UniqCollection.prototype), \"__replace\", this).apply(this, arguments);\n        }\n      }\n    }]);\n\n    return UniqCollection;\n  }(Collection);\n\n  var CollectionOfPromises = /*#__PURE__*/function (_UniqCollection) {\n    _inherits(CollectionOfPromises, _UniqCollection);\n\n    var _super2 = _createSuper(CollectionOfPromises);\n\n    function CollectionOfPromises() {\n      var _thisSuper, _this;\n\n      _classCallCheck(this, CollectionOfPromises);\n\n      _this = _super2.call.apply(_super2, [this].concat(Array.prototype.slice.call(arguments), [true]));\n      _this.anyDoneList = $__default['default'].Callbacks();\n      _this.anyFailList = $__default['default'].Callbacks();\n      _this.anyProgressList = $__default['default'].Callbacks();\n      _this._thenArgs = null;\n\n      _this.anyProgressList.add(function (item, firstArgument) {\n        return $__default['default'](item).data('lastProgress', firstArgument);\n      });\n\n      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(CollectionOfPromises.prototype)), \"init\", _thisSuper).call(_thisSuper, arguments[0]);\n\n      return _this;\n    }\n\n    _createClass(CollectionOfPromises, [{\n      key: \"onAnyDone\",\n      value: function onAnyDone(cb) {\n        var file, j, len, ref1, results;\n        this.anyDoneList.add(cb);\n        ref1 = this.__items;\n        results = [];\n\n        for (j = 0, len = ref1.length; j < len; j++) {\n          file = ref1[j];\n\n          if (file.state() === 'resolved') {\n            results.push(file.done(function () {\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return cb.apply(void 0, [file].concat(args));\n            }));\n          } else {\n            results.push(undefined);\n          }\n        }\n\n        return results;\n      }\n    }, {\n      key: \"onAnyFail\",\n      value: function onAnyFail(cb) {\n        var file, j, len, ref1, results;\n        this.anyFailList.add(cb);\n        ref1 = this.__items;\n        results = [];\n\n        for (j = 0, len = ref1.length; j < len; j++) {\n          file = ref1[j];\n\n          if (file.state() === 'rejected') {\n            results.push(file.fail(function () {\n              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n              }\n\n              return cb.apply(void 0, [file].concat(args));\n            }));\n          } else {\n            results.push(undefined);\n          }\n        }\n\n        return results;\n      }\n    }, {\n      key: \"onAnyProgress\",\n      value: function onAnyProgress(cb) {\n        var file, j, len, ref1, results;\n        this.anyProgressList.add(cb);\n        ref1 = this.__items;\n        results = [];\n\n        for (j = 0, len = ref1.length; j < len; j++) {\n          file = ref1[j];\n          results.push(cb(file, $__default['default'](file).data('lastProgress')));\n        }\n\n        return results;\n      }\n    }, {\n      key: \"lastProgresses\",\n      value: function lastProgresses() {\n        var item, j, len, ref1, results;\n        ref1 = this.__items;\n        results = [];\n\n        for (j = 0, len = ref1.length; j < len; j++) {\n          item = ref1[j];\n          results.push($__default['default'](item).data('lastProgress'));\n        }\n\n        return results;\n      }\n    }, {\n      key: \"add\",\n      value: function add(item) {\n        if (!(item && item.then)) {\n          return;\n        }\n\n        if (this._thenArgs) {\n          var _item;\n\n          item = (_item = item).then.apply(_item, _toConsumableArray(this._thenArgs));\n        }\n\n        _get(_getPrototypeOf(CollectionOfPromises.prototype), \"add\", this).call(this, item);\n\n        return this.__watchItem(item);\n      }\n    }, {\n      key: \"__replace\",\n      value: function __replace(oldItem, newItem, i) {\n        if (!(newItem && newItem.then)) {\n          return this.remove(oldItem);\n        } else {\n          _get(_getPrototypeOf(CollectionOfPromises.prototype), \"__replace\", this).apply(this, arguments);\n\n          return this.__watchItem(newItem);\n        }\n      }\n    }, {\n      key: \"__watchItem\",\n      value: function __watchItem(item) {\n        var _this2 = this;\n\n        var handler = function handler(callbacks) {\n          return function () {\n            if (indexOf.call(_this2.__items, item) >= 0) {\n              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args[_key3] = arguments[_key3];\n              }\n\n              return callbacks.fire.apply(callbacks, [item].concat(args));\n            }\n          };\n        };\n\n        return item.then(handler(this.anyDoneList), handler(this.anyFailList), handler(this.anyProgressList));\n      }\n    }, {\n      key: \"autoThen\",\n      value: function autoThen() {\n        var i, item, j, len, ref1, results;\n\n        if (this._thenArgs) {\n          throw new Error('CollectionOfPromises.then() could be used only once');\n        }\n\n        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        this._thenArgs = args;\n        ref1 = this.__items;\n        results = [];\n\n        for (i = j = 0, len = ref1.length; j < len; i = ++j) {\n          var _item2;\n\n          item = ref1[i];\n          results.push(this.__replace(item, (_item2 = item).then.apply(_item2, _toConsumableArray(this._thenArgs)), i));\n        }\n\n        return results;\n      }\n    }]);\n\n    return CollectionOfPromises;\n  }(UniqCollection);\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$t = {\n    uploading: 'جاري الرفع... الرجاء الانتظار',\n    loadingInfo: 'جار تحميل المعلومات ...',\n    errors: {\n      default: 'خطأ',\n      baddata: 'قيمة غير صحيحة',\n      size: 'ملف كبير جداً',\n      upload: 'يتعذر الرفع',\n      user: 'تم إلغاء الرفع',\n      info: 'يتعذر تحميل المعلومات',\n      image: 'يسمح بالصور فقط',\n      createGroup: 'لا يمكن إنشاء مجموعة ملفات',\n      deleted: 'تم حذف الملف'\n    },\n    draghere: 'أسقط ملف هنا',\n    file: {\n      one: '%1 ملف',\n      other: '%1 ملفات'\n    },\n    buttons: {\n      cancel: 'إلغاء',\n      remove: 'إزالة',\n      choose: {\n        files: {\n          one: 'اختر ملف',\n          other: 'اختر ملفات'\n        },\n        images: {\n          one: 'اختر صورة',\n          other: 'اختر صور'\n        }\n      }\n    },\n    dialog: {\n      close: 'أغلق',\n      openMenu: 'افتح القائمة',\n      done: 'موافق',\n      showFiles: 'اظهار الملفات',\n      tabs: {\n        names: {\n          'empty-pubkey': 'مرحبا!',\n          preview: 'معاينة',\n          file: 'ملفات محلية',\n          url: 'رابط مباشر',\n          camera: 'كاميرا',\n          facebook: 'فيس بوك',\n          dropbox: 'دروب بوكس',\n          gdrive: 'جوجل دريف',\n          gphotos: 'صور غوغل',\n          instagram: 'إينستجرام',\n          vk: 'في كي',\n          evernote: 'إيفرنوت',\n          box: 'بوكس',\n          onedrive: 'ون درايف',\n          flickr: 'فليكر',\n          huddle: 'هادل'\n        },\n        file: {\n          drag: 'سحب وإفلات<br>أي ملف',\n          nodrop: 'رفع ملفات من&nbsp;الحاسوب',\n          cloudsTip: 'مخازن على السحابة<br>والشبكات الاجتماعية',\n          or: 'أو',\n          button: 'اختر ملف محلي',\n          also: 'أو اختر من'\n        },\n        url: {\n          title: 'ملفات من شبكة الإنترنت',\n          line1: 'التقاط أي ملف من على شبكة الإنترنت',\n          line2: 'فقط قم بتوفير الرابط',\n          input: 'الصق الرابط هنا...',\n          button: 'رفع'\n        },\n        camera: {\n          title: 'ملف من كاميرا الويب',\n          capture: 'التقاط صورة',\n          mirror: 'عكس الصورة',\n          startRecord: 'سجل فيديو',\n          stopRecord: 'توقف',\n          cancelRecord: 'إلغاء',\n          retry: 'طلب الإذن مرة أخرى',\n          pleaseAllow: {\n            title: 'يرجى السماح بالوصول إلى الكاميرا',\n            text: 'تمت مطالبتك بالسماح بالدخول إلى الكاميرا من هذا الموقع<br>' + 'من أجل التقاط الصور من الكاميرا يجب عليك الموافقة على هذا الطلب'\n          },\n          notFound: {\n            title: 'لم يتم اكتشاف أي كاميرا',\n            text: 'يبدو أنه ليس لديك كاميرا متصلة بهذا الجهاز'\n          }\n        },\n        preview: {\n          unknownName: 'غير معروف',\n          change: 'إلغاء',\n          back: 'الرجوع',\n          done: 'إضافة',\n          unknown: {\n            title: 'جار الرفع ... يرجى الانتظار للحصول على معاينة',\n            done: 'تخطي المعاينة والقبول'\n          },\n          regular: {\n            title: 'إضافة هذا الملف؟',\n            line1: 'أنت على وشك إضافة الملف أعلاه',\n            line2: 'يرجى التأكيد'\n          },\n          image: {\n            title: 'إضافة هذة الصورة',\n            change: 'إلغاء'\n          },\n          crop: {\n            title: 'قص وإضافة هذه الصورة',\n            done: 'موافق',\n            free: 'حر'\n          },\n          video: {\n            title: 'إضافة هذا الفيديو',\n            change: 'إلغاء'\n          },\n          error: {\n            default: {\n              title: 'عفوا آسف',\n              text: 'حدث خطأ أثناء الرفع',\n              back: 'حاول مرة اخرى'\n            },\n            image: {\n              title: 'يتم قبول ملفات الصور فقط',\n              text: 'الرجاء إعادة المحاولة باستخدام ملف آخر',\n              back: 'اختر صورة'\n            },\n            size: {\n              title: 'الملف الذي حددتة يتجاوز الحد المسموح بة',\n              text: 'الرجاء إعادة المحاولة باستخدام ملف آخر'\n            },\n            loadImage: {\n              title: 'خطأ',\n              text: 'لا يمكن تحميل الصورة'\n            }\n          },\n          multiple: {\n            title: 'لقد اخترت %files%',\n            question: 'إضافة %files%?',\n            tooManyFiles: 'لقد اخترت عددا كبيرا جدا من الملفات %max% هو الحد الأقصى',\n            tooFewFiles: 'لقد اخترت %files%. على الأقل %min% مطلوب',\n            clear: 'حذف الكل',\n            done: 'إضافة',\n            file: {\n              preview: 'معاينة %file%',\n              remove: 'حذف %file%'\n            }\n          }\n        }\n      },\n      footer: {\n        text: 'مدعوم بواسطة',\n        link: 'ابلود كير'\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$t = function pluralize(n) {\n    var mod;\n\n    if (n === 0) {\n      return 'zero';\n    }\n\n    if (n === 1) {\n      return 'one';\n    }\n\n    if (n === 2) {\n      return 'two';\n    }\n\n    mod = n % 100;\n\n    if (mod >= 3 && mod <= 10) {\n      return 'few';\n    }\n\n    if (mod >= 11 && mod <= 99) {\n      return 'many';\n    }\n\n    return 'other';\n  };\n\n  var ar = {\n    translations: translations$t,\n    pluralize: pluralize$t\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$s = {\n    uploading: 'Yüklənilir... Lütfən, gözləyin.',\n    loadingInfo: 'İnfo yüklənilir...',\n    errors: {\n      default: 'Xəta',\n      baddata: 'Yanlış dəyər',\n      size: 'Fayl çox böyükdür',\n      upload: 'Yüklənilə bilmədi',\n      user: 'Yükləmə ləğv edildi',\n      info: 'İnfo yüklənə bilmədi',\n      image: 'Yalnız təsvirlərə icazə verilir',\n      createGroup: 'Fayl qrupu yaradıla bilmir',\n      deleted: 'Fayl silindi'\n    },\n    draghere: 'Faylı bura atın',\n    file: {\n      one: '%1 fayl',\n      other: '%1 fayl'\n    },\n    buttons: {\n      cancel: 'Ləğv edin',\n      remove: 'Silin',\n      choose: {\n        files: {\n          one: 'Fayl seçin',\n          other: 'Fayllar seçin'\n        },\n        images: {\n          one: 'Təsvir seçin',\n          other: 'Təsvirlər seçin'\n        }\n      }\n    },\n    dialog: {\n      done: 'Hazırdır',\n      showFiles: 'Faylları göstərin',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Xoş gəlmisiniz',\n          preview: 'Önbaxış',\n          file: 'Lokal Fayllar',\n          url: 'İxtiyari linklər',\n          camera: 'Kamera',\n          gdrive: 'Google Disk'\n        },\n        file: {\n          drag: 'Faylı bura atın',\n          nodrop: 'Kompüterinizdən faylları yükləyin',\n          cloudsTip: 'Bulud yaddaşlar <br>və sosial xidmətlər',\n          or: 'or',\n          button: 'Lokal fayl seçin',\n          also: 'Həmçinin, buradan seçə bilərsiniz'\n        },\n        url: {\n          title: 'Vebdən fayllar',\n          line1: 'Vebdən istənilən faylı götürün.',\n          line2: 'Sadəcə, link verin.',\n          input: 'Linkinizi bura yerləşdirin...',\n          button: 'Yükləyin'\n        },\n        camera: {\n          capture: 'Şəkil çəkin',\n          mirror: 'Güzgü',\n          retry: 'Yenidən icazə sorğusu göndərin.',\n          pleaseAllow: {\n            title: 'Lütfən, kameranıza giriş hüququ verin',\n            text: 'Bu saytdan kameranıza daxil olmaq icazəsi verildi. ' + 'Kameranız ilə şəkil çəkmək üçün bu sorğunu təsdiq etməlisiniz.'\n          },\n          notFound: {\n            title: 'Kamera aşkar edilmədi',\n            text: 'Görünür, bu cihaza kamera qoşulmayıb.'\n          }\n        },\n        preview: {\n          unknownName: 'naməlum',\n          change: 'Ləğv edin',\n          back: 'Geri',\n          done: 'Əlavə edin',\n          unknown: {\n            title: 'Yüklənilir... Lütfən, önbaxış üçün gözləyin.',\n            done: 'Önbaxışı ötürün və qəbul edin'\n          },\n          regular: {\n            title: 'Bu fayl əlavə edilsin?',\n            line1: 'Yuxarıdakı faylı əlavə etmək üzrəsiniz.',\n            line2: 'Lütfən, təsdiq edin.'\n          },\n          image: {\n            title: 'Bu təsvir əlavə edilsin?',\n            change: 'Ləğv edin'\n          },\n          crop: {\n            title: 'Bu təsviri kəsin və əlavə edin',\n            done: 'Hazırdır',\n            free: 'pulsuz'\n          },\n          error: {\n            default: {\n              title: 'Ups!',\n              text: 'Yükləmə zamanı nəsə xəta baş verdi.',\n              back: 'Lütfən, y enidən cəhd edin.'\n            },\n            image: {\n              title: 'Yaınız təsvir faylları qəbul olunur.',\n              text: 'Lütfən, başqa fayl ilə cəhd edin.',\n              back: 'Təsvir seçin'\n            },\n            size: {\n              title: 'Seçdiyiniz fayl limiti keçir.',\n              text: 'Lütfən, başqa fayl ilə cəhd edin.'\n            },\n            loadImage: {\n              title: 'Xəta',\n              text: 'Təsvir yüklənilə bilmir'\n            }\n          },\n          multiple: {\n            title: '%files% fayl seçdiniz.',\n            question: 'Bütün bu faylları əlavə etmək istəyirsiniz?',\n            tooManyFiles: 'Həddindən çox fayl seçdiniz. %max% maksimumdur.',\n            tooFewFiles: '%files% fayl seçdiniz. Ən azı %min% tələb olunur.',\n            clear: 'Hamısını silin',\n            done: 'Hazırdır'\n          }\n        }\n      }\n    }\n  };\n\n  var pluralize$s = function pluralize(n) {\n    return 'other';\n  };\n\n  var az = {\n    translations: translations$s,\n    pluralize: pluralize$s\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$r = {\n    uploading: 'Carregant... Si us plau esperi.',\n    loadingInfo: 'Carregant informació...',\n    errors: {\n      default: 'Error',\n      baddata: 'Valor incorrecte',\n      size: 'Massa gran',\n      upload: \"No s'ha pogut carregar\",\n      user: 'Carrega cancel·lada',\n      info: \"No s'ha pogut carregar la informació\",\n      image: 'Només es permeten imatges',\n      createGroup: \"No es pot crear el grup d'arxius\",\n      deleted: 'Fitxer eliminat'\n    },\n    draghere: 'Arrossega els fitxers fins aquí',\n    file: {\n      one: '%1 fitxer',\n      other: '%1 fitxers'\n    },\n    buttons: {\n      cancel: 'Cancel·lar',\n      remove: 'Eliminar',\n      choose: {\n        files: {\n          one: 'Escull un fitxer',\n          other: 'Escull fitxers'\n        },\n        images: {\n          one: 'Escull una imatge',\n          other: 'Escull imatges'\n        }\n      }\n    },\n    dialog: {\n      done: 'Fet',\n      showFiles: 'Mostra fitxers',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Benvingut',\n          preview: 'Avanci',\n          file: 'Ordinador',\n          url: 'Enllaços arbitraris',\n          camera: 'Càmera'\n        },\n        file: {\n          drag: 'Arrossega un fitxer aquí',\n          nodrop: 'Carrega fitxers des del teu ordinador',\n          cloudsTip: 'Emmagatzematge al núvol<br>i xarxes socials',\n          or: 'o',\n          button: 'Escull un fitxer des del teu ordinador',\n          also: 'També pots seleccionar-lo de'\n        },\n        url: {\n          title: 'Fitxers de la web',\n          line1: 'Selecciona qualsevol fitxer de la web.',\n          line2: 'Només proporcioni el link.',\n          input: 'Copiï el link aquí...',\n          button: 'Pujar'\n        },\n        camera: {\n          capture: 'Realitza una foto',\n          mirror: 'Mirall',\n          retry: 'Demanar permisos una altra vegada',\n          pleaseAllow: {\n            title: 'Si us plau, permet accés a la teva càmera',\n            text: \"Aquest lloc t'ha demanat de permetre accés a la càmera. \" + \"Per tal de realitzar imatges amb la teva càmera has d'acceptar aquesta petició.\"\n          },\n          notFound: {\n            title: \"No s'ha detectat cap càmera\",\n            text: 'Sembla que no tens cap càmera connectada a aquest dispositiu.'\n          }\n        },\n        preview: {\n          unknownName: 'desconegut',\n          change: 'Cancel·lar',\n          back: 'Endarrere',\n          done: 'Pujar',\n          unknown: {\n            title: 'Carregant. Si us plau esperi per la visualització prèvia.',\n            done: 'Saltar visualització prèvia i acceptar'\n          },\n          regular: {\n            title: 'Vols pujar aquest fitxer?',\n            line1: 'Estàs a punt de pujar el fitxer superior.',\n            line2: 'Confirmi, si us plau.'\n          },\n          image: {\n            title: 'Vols pujar aquesta imatge?',\n            change: 'Cancel·lar'\n          },\n          crop: {\n            title: 'Tallar i pujar aquesta imatge',\n            done: 'Fet',\n            free: 'lliure'\n          },\n          error: {\n            default: {\n              title: 'La pujada ha fallat!',\n              text: \"S'ha produït un error durant la pujada.\",\n              back: 'Si us plau, provi-ho de nou.'\n            },\n            image: {\n              title: \"Només s'accepten fitxers d'imatges.\",\n              text: 'Si us plau, provi-ho de nou amb un altre fitxer.',\n              back: 'Escull imatge'\n            },\n            size: {\n              title: 'La mida del fitxer que has seleccionat sobrepassa el límit.',\n              text: 'Si us plau, provi-ho de nou amb un altre fitxer.'\n            },\n            loadImage: {\n              title: 'Error',\n              text: \"No s'ha pogut carregar la imatge\"\n            }\n          },\n          multiple: {\n            title: \"N'has escollit %files%\",\n            question: 'Vols afegir tots aquests fitxers?',\n            tooManyFiles: 'Has escollit massa fitxers. %max% és el màxim.',\n            tooFewFiles: 'Has escollit %files%. Com a mínim en calen %min%.',\n            clear: 'Eliminar-los tots',\n            done: 'Fet'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$r = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var ca = {\n    translations: translations$r,\n    pluralize: pluralize$r\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$q = {\n    uploading: 'Nahrávám... Malý moment.',\n    loadingInfo: 'Nahrávám informace...',\n    errors: {\n      default: 'Chyba',\n      baddata: 'Neplatná hodnota',\n      size: 'Soubor je příliš velký',\n      upload: 'Nelze nahrát',\n      user: 'Nahrávání zrušeno',\n      info: 'Nelze nahrát informace',\n      image: 'Lze nahrát pouze obrázky',\n      createGroup: 'Nelze vytvořit adresář',\n      deleted: 'Soubor byl smazán'\n    },\n    draghere: 'Přetáhněte soubor sem',\n    file: {\n      one: '%1 soubor',\n      few: '%1 soubory',\n      many: '%1 souborů'\n    },\n    buttons: {\n      cancel: 'Zrušit',\n      remove: 'Odstranit',\n      choose: {\n        files: {\n          one: 'Vyberte soubor',\n          other: 'Vyberte soubory'\n        },\n        images: {\n          one: 'Vyberte obrázek',\n          other: 'Vyberte obrázky'\n        }\n      }\n    },\n    dialog: {\n      done: 'Hotovo',\n      showFiles: 'Zobrazit soubory',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Vítejte',\n          preview: 'Náhled',\n          file: 'Soubor z počítače',\n          url: 'Soubor z internetu',\n          camera: 'Webkamera',\n          facebook: 'Facebook',\n          dropbox: 'Dropbox',\n          gdrive: 'Google Drive',\n          instagram: 'Instagram',\n          vk: 'VK',\n          evernote: 'Evernote',\n          box: 'Box',\n          onedrive: 'OneDrive',\n          flickr: 'Flickr',\n          huddle: 'Huddle'\n        },\n        file: {\n          drag: 'Přetáhněte soubor sem',\n          nodrop: 'Nahrajte soubory z vašeho počítače',\n          cloudsTip: 'Cloudové úložiště<br>a sociální sítě',\n          or: 'nebo',\n          button: 'Vyberte soubor z počítače',\n          also: 'Můžete také nahrát soubor z'\n        },\n        url: {\n          title: 'Soubory z internetu',\n          line1: 'Nahrajte jakýkoliv soubor z internetu.',\n          line2: 'Stačí vložit odkaz.',\n          input: 'Odkaz vložte zde...',\n          button: 'Nahrát'\n        },\n        camera: {\n          capture: 'Pořídit fotografii',\n          mirror: 'Zrcadlo',\n          retry: 'Znovu požádat o povolení',\n          pleaseAllow: {\n            title: 'Prosím povolte přístup k webkameře',\n            text: 'Byl(a) jste požádán(a) o přístup k webkameře. ' + 'Abyste mohl(a) pořídit fotografii, musíte přístup povolit.'\n          },\n          notFound: {\n            title: 'Nebyla nalezena webkamera',\n            text: 'Zdá se, že k tomuto zařízení není připojena žádná webkamera.'\n          }\n        },\n        preview: {\n          unknownName: 'neznámý',\n          change: 'Zrušit',\n          back: 'Zpět',\n          done: 'Přidat',\n          unknown: {\n            title: 'Nahrávám... Prosím vyčkejte na náhled.',\n            done: 'Přeskočit náhled a odeslat'\n          },\n          regular: {\n            title: 'Přidat tento soubor?',\n            line1: 'Tímto přidáte výše vybraný soubor.',\n            line2: 'Prosím potvrďte.'\n          },\n          image: {\n            title: 'Přidat tento obrázek?',\n            change: 'Zrušit'\n          },\n          crop: {\n            title: 'Oříznout a přidat tento obrázek',\n            done: 'Hotovo',\n            free: 'zdarma'\n          },\n          error: {\n            default: {\n              title: 'Jejda!',\n              text: 'Něco se v průběhu nahrávání nepodařilo.',\n              back: 'Zkuste to prosím znovu.'\n            },\n            image: {\n              title: 'Lze nahrávat pouze obrázky.',\n              text: 'Zkuste to prosím s jiným souborem.',\n              back: 'Vyberte obrázek'\n            },\n            size: {\n              title: 'Soubor přesahuje povolenou velikost.',\n              text: 'Prosím zkuste to s jiným souborem.'\n            },\n            loadImage: {\n              title: 'Chyba',\n              text: 'Nelze nahrát obrázek'\n            }\n          },\n          multiple: {\n            title: 'Bylo vybráno %files% souborů',\n            question: 'Chcete přidat všechny tyto soubory?',\n            tooManyFiles: 'Bylo vybráno moc souborů. Maximum je %max%',\n            tooFewFiles: 'Bylo vybráno %files% souborů. Musíte vybrat minimálně %min%',\n            clear: 'Odstranit vše',\n            done: 'Hotovo'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$q = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    } else if (n >= 2 && n <= 4) {\n      return 'few';\n    } else {\n      return 'many';\n    }\n  };\n\n  var cs = {\n    translations: translations$q,\n    pluralize: pluralize$q\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$p = {\n    uploading: 'Uploader... Vent venligst.',\n    loadingInfo: 'Henter information...',\n    errors: {\n      default: 'Fejl',\n      baddata: 'Forkert værdi',\n      size: 'Filen er for stor',\n      upload: 'Kan ikke uploade / sende fil',\n      user: 'Upload fortrudt',\n      info: 'Kan ikke hente information',\n      image: 'Kun billeder er tilladt',\n      createGroup: 'Kan ikke oprette fil gruppe',\n      deleted: 'Filen blev slettet'\n    },\n    draghere: 'Drop en fil her',\n    file: {\n      one: '%1 fil',\n      other: '%1 filer'\n    },\n    buttons: {\n      cancel: 'Annuller',\n      remove: 'Fjern',\n      choose: {\n        files: {\n          one: 'Vælg en fil',\n          other: 'Vælg filer'\n        },\n        images: {\n          one: 'Vælg et billede',\n          other: 'Vælg billeder'\n        }\n      }\n    },\n    dialog: {\n      done: 'Færdig',\n      showFiles: 'Vis filer',\n      tabs: {\n        names: {\n          preview: 'Vis',\n          file: 'Computer',\n          gdrive: 'Google Drev',\n          url: 'Direkte link'\n        },\n        file: {\n          drag: 'Drop en fil her',\n          nodrop: 'Hent filer fra din computer',\n          or: 'eller',\n          button: 'Hent fil fra din computer',\n          also: 'Du kan også hente fra'\n        },\n        url: {\n          title: 'Filer fra en Web adresse',\n          line1: 'Vælg en fil fra en web adresse.',\n          line2: 'Skriv bare linket til filen.',\n          input: 'Indsæt link her...',\n          button: 'Upload / Send'\n        },\n        preview: {\n          unknownName: 'ukendt',\n          change: 'Annuller',\n          back: 'Tilbage',\n          done: 'Fortsæt',\n          unknown: {\n            title: 'Uploader / sender... Vent for at se mere.',\n            done: 'Fortsæt uden at vente på resultat'\n          },\n          regular: {\n            title: 'Tilføje fil?',\n            line1: 'Du er ved at tilføje filen ovenfor.',\n            line2: 'Venligst accepter.'\n          },\n          image: {\n            title: 'Tilføj billede?',\n            change: 'Annuller'\n          },\n          crop: {\n            title: 'Beskær og tilføj dette billede',\n            done: 'Udfør'\n          },\n          error: {\n            default: {\n              title: 'Hov!',\n              text: 'Noget gik galt under upload.',\n              back: 'Venligst prøv igen'\n            },\n            image: {\n              title: 'Du kan kun vælge billeder.',\n              text: 'Prøv igen med en billedfil.',\n              back: 'Vælg billede'\n            },\n            size: {\n              title: 'Den fil du valgte, er desværre større end tilladt.',\n              text: 'Venligst prøv med en mindre fil.'\n            },\n            loadImage: {\n              title: 'Fejl',\n              text: 'Kan ikke åbne billede'\n            }\n          },\n          multiple: {\n            title: 'Du har valgt %files% filer',\n            question: 'Vil du tilføje alle disse filer?',\n            tooManyFiles: 'Du har valgt for mange filer. %max% er maximum.',\n            tooFewFiles: 'Du har valgt %files% filer. Men du skal vælge mindst %min%.',\n            clear: 'Fjern alle',\n            done: 'Fortsæt'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$p = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var da = {\n    translations: translations$p,\n    pluralize: pluralize$p\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$o = {\n    uploading: 'Upload läuft… Bitte warten…',\n    loadingInfo: 'Informationen werden geladen…',\n    errors: {\n      default: 'Fehler',\n      baddata: 'Falscher Wert',\n      size: 'Datei zu groß',\n      upload: 'Kann nicht hochgeladen werden',\n      user: 'Hochladen abgebrochen',\n      info: 'Informationen können nicht geladen werden',\n      image: 'Nur Bilder sind erlaubt',\n      createGroup: 'Datei-Gruppe kann nicht erstellt werden',\n      deleted: 'Datei wurde gelöscht'\n    },\n    draghere: 'Ziehen Sie eine Datei hierhin',\n    file: {\n      one: '%1 Datei',\n      other: '%1 Dateien'\n    },\n    buttons: {\n      cancel: 'Abbrechen',\n      remove: 'Löschen',\n      choose: {\n        files: {\n          one: 'Datei auswählen',\n          other: 'Dateien auswählen'\n        },\n        images: {\n          one: 'Bild auswählen',\n          other: 'Bilder auswählen'\n        }\n      }\n    },\n    dialog: {\n      close: 'Schließen',\n      openMenu: 'Menü öffnen',\n      done: 'Fertig',\n      showFiles: 'Dateien anzeigen',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Willkommen',\n          preview: 'Vorschau',\n          file: 'Lokale Dateien',\n          url: 'Web-Links',\n          camera: 'Kamera'\n        },\n        file: {\n          drag: 'Ziehen Sie eine Datei hierhin',\n          nodrop: 'Laden Sie Dateien von Ihrem PC hoch',\n          cloudsTip: 'Cloud-Speicher<br>und soziale Dienste',\n          or: 'oder',\n          button: 'Wählen Sie eine Datei',\n          also: 'Sie können sie auch Dateien wählen aus'\n        },\n        url: {\n          title: 'Eine Datei aus dem Web hochladen',\n          line1: 'Sie können eine Datei aus dem Internet hochladen.',\n          line2: 'Geben Sie hier einfach den Link ein.',\n          input: 'Bitte geben Sie hier den Link ein…',\n          button: 'Hochladen'\n        },\n        camera: {\n          title: 'Foto mit Webcam aufnehmen',\n          capture: 'Machen Sie ein Foto',\n          mirror: 'Andere Kamera',\n          retry: 'Berechtigungen erneut anfordern',\n          pleaseAllow: {\n            title: 'Bitte erlauben Sie den Zugriff auf Ihre Kamera',\n            text: 'Sie wurden gebeten, dieser Website den Zugriff auf Ihre Kamera zu erlauben. Um mit Ihrer Kamera Fotos machen zu können, müssen Sie diese Erlaubnis erteilen.'\n          },\n          notFound: {\n            title: 'Keine Kamera gefunden',\n            text: 'Es sieht so aus, als hätten Sie keine Kamera an dieses Gerät angeschlossen.'\n          }\n        },\n        preview: {\n          unknownName: 'nicht bekannt',\n          change: 'Abbrechen',\n          back: 'Zurück',\n          done: 'Hinzufügen',\n          unknown: {\n            title: 'Upload läuft… Bitte warten Sie auf die Vorschau.',\n            done: 'Vorschau überspringen und Datei annehmen'\n          },\n          regular: {\n            title: 'Diese Datei hinzufügen?',\n            line1: 'Diese Datei wird nun hinzugefügt.',\n            line2: 'Bitte bestätigen Sie.'\n          },\n          image: {\n            title: 'Nur Bilder sind akzeptiert.',\n            text: 'Bitte veruschen Sie es erneut mit einer anderen Datei.',\n            back: 'Bild wählen'\n          },\n          error: {\n            default: {\n              title: 'Oops!',\n              text: 'Etwas ist während dem Hochladen schief gelaufen.',\n              back: 'Bitte versuchen Sie es erneut'\n            },\n            image: {\n              title: 'Nur Bilder sind akzeptiert.',\n              text: 'Bitte veruschen Sie es erneut mit einer anderen Datei.',\n              back: 'Bild wählen'\n            },\n            size: {\n              title: 'Die gewählte Datei ist zu groß.',\n              text: 'Bitte versuchen Sie es erneut mit einer anderen Datei.'\n            },\n            loadImage: {\n              title: 'Fehler',\n              text: 'Das Bild kann nicht geladen werden'\n            }\n          },\n          multiple: {\n            title: 'Sie haben %files% Dateien gewählt',\n            question: 'Möchten Sie all diese Dateien hinzufügen?',\n            tooManyFiles: 'Sie haben zu viele Dateien gewählt. %max% ist das Maximum.',\n            tooFewFiles: 'Sie haben %files% Dateien gewählt. Es sind mindestens %min% nötig.',\n            clear: 'Alle löschen',\n            done: 'Fertig',\n            file: {\n              preview: 'Vorschau: %file%',\n              remove: 'Datei löschen: %file%'\n            }\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$o = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var de = {\n    translations: translations$o,\n    pluralize: pluralize$o\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$n = {\n    loadingInfo: 'Φόρτωση πληροφοριών...',\n    errors: {\n      default: 'Σφάλμα',\n      baddata: 'Λανθασμένη αξία',\n      size: 'Πολύ μεγάλο αρχείο',\n      upload: 'Δεν μπορεί να γίνει φόρτωση',\n      user: 'Η φόρτωση ακυρώθηκε',\n      info: 'Δεν μπορούν να φορτωθούν πληροφορίες',\n      image: 'Μόνο εικόνες επιτρέπονται',\n      createGroup: 'Δεν μπορεί να δημιουργηθεί ομάδα αρχείων',\n      deleted: 'Το αρχείο διαγράφηκε'\n    },\n    uploading: 'Φόρτωση... Παρακαλούμε περιμένετε.',\n    draghere: 'Αποθέστε ένα αρχείο εδώ',\n    file: {\n      one: '%1 αρχείο',\n      other: '%1 αρχεία'\n    },\n    buttons: {\n      cancel: 'Ακύρωση',\n      remove: 'Κατάργηση',\n      choose: {\n        files: {\n          one: 'Επιλέξτε ένα αρχείο',\n          other: 'Επιλέξτε αρχεία'\n        },\n        images: {\n          one: 'Επιλέξτε μία εικόνα',\n          other: 'Επιλέξτε εικόνες'\n        }\n      }\n    },\n    dialog: {\n      close: 'Κλείσιμο',\n      openMenu: 'Άνοιγμα μενού',\n      done: 'Εντάξει',\n      showFiles: 'Προβολή αρχείων',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Καλώς ήρθατε',\n          preview: 'Προεπισκόπηση',\n          file: 'Τοπικά αρχεία',\n          url: 'Απευθείας σύνδεσμος',\n          camera: 'Κάμερα',\n          facebook: 'Facebook',\n          dropbox: 'Dropbox',\n          gdrive: 'Google Drive',\n          instagram: 'Instagram',\n          gphotos: 'Google Photos',\n          vk: 'VK',\n          evernote: 'Evernote',\n          box: 'Box',\n          onedrive: 'OneDrive',\n          flickr: 'Flickr',\n          huddle: 'Huddle'\n        },\n        file: {\n          drag: 'σύρετε & αποθέστε<br>οποιαδήποτε αρχεία',\n          nodrop: 'Φορτώστε αρχεία από τον&nbsp;υπολογιστή σας',\n          cloudsTip: 'Αποθήκευση νέφους<br>και κοινωνικά δίκτυα',\n          or: 'ή',\n          button: 'Επιλέξτε ένα τοπικό αρχείο',\n          also: 'ή επιλέξτε από'\n        },\n        url: {\n          title: 'Αρχεία από τον Ιστό',\n          line1: 'Πάρτε οποιοδήποτε αρχείο από το διαδίκτυο.',\n          line2: 'Γράψτε απλώς τον σύνδεσμο.',\n          input: 'Επικολλήστε τον σύνδεσμό σας εδώ...',\n          button: 'Φόρτωση'\n        },\n        camera: {\n          title: 'Αρχείο από κάμερα web',\n          capture: 'Τραβήξτε μια φωτογραφία',\n          mirror: 'Καθρέφτης',\n          startRecord: 'Εγγραφή βίντεο',\n          cancelRecord: 'Ακύρωση',\n          stopRecord: 'Διακοπή',\n          retry: 'Νέο αίτημα για άδεια',\n          pleaseAllow: {\n            text: 'Έχετε δεχτεί υπόδειξη να επιτρέψετε την πρόσβαση στην κάμερα από αυτόν τον ιστότοπο.<br>Για να τραβήξετε φωτογραφίες με την κάμερά σας πρέπει να εγκρίνετε αυτό το αίτημα.',\n            title: 'Παρακαλούμε επιτρέψτε την πρόσβαση στην κάμερά σας'\n          },\n          notFound: {\n            title: 'Δεν εντοπίστηκε κάμερα',\n            text: 'Φαίνεται ότι δεν έχετε κάμερα συνδεδεμένη με αυτή τη συσκευή.'\n          }\n        },\n        preview: {\n          unknownName: 'άγνωστο',\n          change: 'Ακύρωση',\n          back: 'Πίσω',\n          done: 'Προσθήκη',\n          unknown: {\n            title: 'Φόρτωση... Παρακαλούμε περιμένετε για προεπισκόπηση.',\n            done: 'Παράλειψη επισκόπησης και αποδοχή'\n          },\n          regular: {\n            title: 'Να προστεθεί αυτό το αρχείο;',\n            line1: 'Πρόκειται να προσθέσετε το παραπάνω αρχείο.',\n            line2: 'Παρακαλούμε επιβεβαιώστε.'\n          },\n          image: {\n            title: 'Να προστεθεί αυτή η εικόνα;',\n            change: 'Ακύρωση'\n          },\n          crop: {\n            title: 'Περικοπή και προσθήκη αυτής της εικόνας',\n            done: 'Εντάξει',\n            free: 'δωρεάν'\n          },\n          video: {\n            title: 'Να προστεθεί αυτό το βίντεο;',\n            change: 'Ακύρωση'\n          },\n          error: {\n            default: {\n              title: 'Ουπς!',\n              back: 'Παρακαλούμε προσπαθήστε ξανά',\n              text: 'Κάτι πήγε στραβά κατά τη φόρτωση.'\n            },\n            image: {\n              title: 'Μόνο αρχεία εικόνων γίνονται δεκτά.',\n              text: 'Δοκιμάστε ξανά με άλλο αρχείο.',\n              back: 'Επιλέξτε εικόνα'\n            },\n            size: {\n              title: 'Το αρχείο που επιλέξατε υπερβαίνει το όριο.',\n              text: 'Δοκιμάστε ξανά με άλλο αρχείο.'\n            },\n            loadImage: {\n              title: 'Σφάλμα',\n              text: 'Δεν μπορεί να φορτωθεί η εικόνα'\n            }\n          },\n          multiple: {\n            title: 'Έχετε επιλέξει %files%',\n            question: 'Προσθήκη %files%;',\n            tooManyFiles: 'Έχετε επιλέξει πάρα πολλά αρχεία. Το μέγιστο είναι %max%.',\n            tooFewFiles: 'Έχετε επιλέξει %files%. Απαιτούνται τουλάχιστον %min%.',\n            clear: 'Κατάργηση όλων',\n            file: {\n              preview: 'Προεπισκόπηση %file%',\n              remove: 'Αφαίρεση %file%'\n            },\n            done: 'Προσθήκη'\n          }\n        }\n      },\n      footer: {\n        text: 'παρέχεται από',\n        link: 'uploadcare'\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$n = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var el = {\n    translations: translations$n,\n    pluralize: pluralize$n\n  };\n\n  // #\n  // # English locale is the default and used as a fallback.\n  // #\n  var translations$m = {\n    uploading: 'Uploading... Please wait.',\n    loadingInfo: 'Loading info...',\n    errors: {\n      default: 'Error',\n      baddata: 'Incorrect value',\n      size: 'File too big',\n      upload: 'Can’t upload',\n      user: 'Upload canceled',\n      info: 'Can’t load info',\n      image: 'Only images allowed',\n      createGroup: 'Can’t create file group',\n      deleted: 'File was deleted'\n    },\n    draghere: 'Drop a file here',\n    file: {\n      one: '%1 file',\n      other: '%1 files'\n    },\n    buttons: {\n      cancel: 'Cancel',\n      remove: 'Remove',\n      choose: {\n        files: {\n          one: 'Choose a file',\n          other: 'Choose files'\n        },\n        images: {\n          one: 'Choose an image',\n          other: 'Choose images'\n        }\n      }\n    },\n    dialog: {\n      close: 'Close',\n      openMenu: 'Open menu',\n      done: 'Done',\n      showFiles: 'Show files',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Welcome',\n          preview: 'Preview',\n          file: 'Local Files',\n          url: 'Direct Link',\n          camera: 'Camera',\n          facebook: 'Facebook',\n          dropbox: 'Dropbox',\n          gdrive: 'Google Drive',\n          gphotos: 'Google Photos',\n          instagram: 'Instagram',\n          vk: 'VK',\n          evernote: 'Evernote',\n          box: 'Box',\n          onedrive: 'OneDrive',\n          flickr: 'Flickr',\n          huddle: 'Huddle'\n        },\n        file: {\n          drag: 'drag & drop<br>any files',\n          nodrop: 'Upload files from your&nbsp;computer',\n          cloudsTip: 'Cloud storages<br>and social networks',\n          or: 'or',\n          button: 'Choose a local file',\n          also: 'or choose from'\n        },\n        url: {\n          title: 'Files from the Web',\n          line1: 'Grab any file off the web.',\n          line2: 'Just provide the link.',\n          input: 'Paste your link here...',\n          button: 'Upload'\n        },\n        camera: {\n          title: 'File from web camera',\n          capture: 'Take a photo',\n          mirror: 'Mirror',\n          startRecord: 'Record a video',\n          stopRecord: 'Stop',\n          cancelRecord: 'Cancel',\n          retry: 'Request permissions again',\n          pleaseAllow: {\n            title: 'Please allow access to your camera',\n            text: 'You have been prompted to allow camera access from this site.<br>' + 'In order to take pictures with your camera you must approve this request.'\n          },\n          notFound: {\n            title: 'No camera detected',\n            text: 'Looks like you have no camera connected to this device.'\n          }\n        },\n        preview: {\n          unknownName: 'unknown',\n          change: 'Cancel',\n          back: 'Back',\n          done: 'Add',\n          unknown: {\n            title: 'Uploading... Please wait for a preview.',\n            done: 'Skip preview and accept'\n          },\n          regular: {\n            title: 'Add this file?',\n            line1: 'You are about to add the file above.',\n            line2: 'Please confirm.'\n          },\n          image: {\n            title: 'Add this image?',\n            change: 'Cancel'\n          },\n          crop: {\n            title: 'Crop and add this image',\n            done: 'Done',\n            free: 'free'\n          },\n          video: {\n            title: 'Add this video?',\n            change: 'Cancel'\n          },\n          error: {\n            default: {\n              title: 'Oops!',\n              text: 'Something went wrong during the upload.',\n              back: 'Please try again'\n            },\n            image: {\n              title: 'Only image files are accepted.',\n              text: 'Please try again with another file.',\n              back: 'Choose image'\n            },\n            size: {\n              title: 'The file you selected exceeds the limit.',\n              text: 'Please try again with another file.'\n            },\n            loadImage: {\n              title: 'Error',\n              text: 'Can’t load image'\n            }\n          },\n          multiple: {\n            title: 'You’ve chosen %files%.',\n            question: 'Add %files%?',\n            tooManyFiles: 'You’ve chosen too many files. %max% is maximum.',\n            tooFewFiles: 'You’ve chosen %files%. At least %min% required.',\n            clear: 'Remove all',\n            done: 'Add',\n            file: {\n              preview: 'Preview %file%',\n              remove: 'Remove %file%'\n            }\n          }\n        }\n      },\n      footer: {\n        text: 'powered by',\n        link: 'uploadcare'\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$m = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var en = {\n    pluralize: pluralize$m,\n    translations: translations$m\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$l = {\n    uploading: 'Subiendo... Por favor espere.',\n    loadingInfo: 'Cargando información...',\n    errors: {\n      default: 'Error',\n      baddata: 'Valor incorrecto',\n      size: 'Archivo demasiado grande',\n      upload: 'No se puede subir',\n      user: 'Subida cancelada',\n      info: 'No se puede cargar la información',\n      image: 'Solo se permiten imágenes',\n      createGroup: 'No se puede crear el grupo de archivos',\n      deleted: 'El archivo fue eliminado'\n    },\n    draghere: 'Arrastra un archivo aquí',\n    file: {\n      one: '%1 archivo',\n      other: '%1 archivos'\n    },\n    buttons: {\n      cancel: 'Cancelar',\n      remove: 'Eliminar',\n      choose: {\n        files: {\n          one: 'Escoge un archivo',\n          other: 'Escoge archivos'\n        },\n        images: {\n          one: 'Escoge una imagen',\n          other: 'Escoge imágenes'\n        }\n      }\n    },\n    dialog: {\n      close: 'Cerrar',\n      openMenu: 'Menú abierto',\n      done: 'Hecho',\n      showFiles: 'Mostrar archivos',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Bienvenido',\n          preview: 'Previsualización',\n          file: 'Archivos locales',\n          url: 'Enlaces arbitrarios',\n          camera: 'Cámara'\n        },\n        file: {\n          drag: 'Arrastra un archivo aquí',\n          nodrop: 'Sube fotos desde tu dispositivo',\n          cloudsTip: 'Almacenamiento en la nube<br>y redes sociales',\n          or: 'o',\n          button: 'Elige un archivo de tu dispositivo',\n          also: 'Tambien puedes seleccionarlo de'\n        },\n        url: {\n          title: 'Archivos de la Web',\n          line1: 'Coge cualquier archivo de la web.',\n          line2: 'Solo danos el link.',\n          input: 'Pega tu link aquí...',\n          button: 'Subir'\n        },\n        camera: {\n          title: 'Archivo desde la cámara web',\n          capture: 'Hacer una foto',\n          mirror: 'Espejo',\n          startRecord: 'Grabar un video',\n          stopRecord: 'Detener',\n          cancelRecord: 'Cancelar',\n          retry: 'Solicitar permisos de nuevo',\n          pleaseAllow: {\n            title: 'Por favor, permite el acceso a tu cámara',\n            text: 'Este sitio ha pedido permiso para acceder a la cámara. ' + 'Para tomar imágenes con tu cámara debes aceptar esta petición.'\n          },\n          notFound: {\n            title: 'No se ha detectado ninguna cámara',\n            text: 'Parece que no tienes ninguna cámara conectada a este dispositivo.'\n          }\n        },\n        preview: {\n          unknownName: 'desconocido',\n          change: 'Cancelar',\n          back: 'Atrás',\n          done: 'Añadir',\n          unknown: {\n            title: 'Subiendo. Por favor espera para una vista previa.',\n            done: 'Saltar vista previa y aceptar'\n          },\n          regular: {\n            title: '¿Quieres subir este archivo?',\n            line1: 'Estás a punto de subir el archivo de arriba.',\n            line2: 'Confírmalo por favor.'\n          },\n          image: {\n            title: '¿Quieres subir esta imagen?',\n            change: 'Cancelar'\n          },\n          crop: {\n            title: 'Cortar y añadir esta imagen',\n            done: 'Listo',\n            free: 'libre'\n          },\n          video: {\n            title: '¿Añadir este video?',\n            change: 'Cancelar'\n          },\n          error: {\n            default: {\n              title: 'Ups!',\n              text: 'Algo salió mal durante la subida.',\n              back: 'Por favor, inténtalo de nuevo.'\n            },\n            image: {\n              title: 'Solo se aceptan archivos de imagen.',\n              text: 'Por favor, inténtalo de nuevo con otro archivo.',\n              back: 'Escoger imagen'\n            },\n            size: {\n              title: 'El archivo que has seleccinado excede el límite.',\n              text: 'Por favor, inténtalo de nuevo con otro archivo.'\n            },\n            loadImage: {\n              title: 'Error',\n              text: 'No puede cargar la imagen'\n            }\n          },\n          multiple: {\n            title: 'Has escogido %files%',\n            question: '¿Quieres añadir todos estos archivos?',\n            tooManyFiles: 'Has escogido demasiados archivos. %max% es el máximo.',\n            tooFewFiles: 'Has escogido %files%. Hacen falta al menos %min%.',\n            clear: 'Eliminar todo',\n            done: 'Hecho',\n            file: {\n              preview: 'Vista previa %file%',\n              remove: 'Quitar %file%'\n            }\n          }\n        }\n      },\n      footer: {\n        text: 'alimentado por'\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$l = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var es = {\n    translations: translations$l,\n    pluralize: pluralize$l\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$k = {\n    uploading: 'Üleslaadimine… Palun oota.',\n    loadingInfo: 'Info laadimine...',\n    errors: {\n      default: 'Viga',\n      baddata: 'Incorrect value',\n      size: 'Fail on liiga suur',\n      upload: 'Ei saa üles laadida',\n      user: 'Üleslaadimine tühistatud',\n      info: 'Ei saa infot laadida',\n      image: 'Ainult pildid lubatud',\n      createGroup: 'Ei saa luua failigruppi',\n      deleted: 'Fail on kustutatud'\n    },\n    draghere: 'Tiri fail siia',\n    file: {\n      one: '%1 fail',\n      other: '%1 failid'\n    },\n    buttons: {\n      cancel: 'Tühista',\n      remove: 'Kustuta',\n      choose: {\n        files: {\n          one: 'Vali fail',\n          other: 'Vali failid'\n        },\n        images: {\n          one: 'Vali pilt',\n          other: 'Vali pildid'\n        }\n      }\n    },\n    dialog: {\n      done: 'Valmis',\n      showFiles: 'Näita faile',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Tere',\n          preview: 'Eelvaade',\n          file: 'Failid Kõvakettalt',\n          url: 'Veebilink',\n          camera: 'Kaamera'\n        },\n        file: {\n          drag: 'Tiri failid siia',\n          nodrop: 'Lae failid arvutist',\n          cloudsTip: 'Pilv<br>ja sotsiaalmeedia',\n          or: 'või',\n          button: 'Vali fail kõvakettalt',\n          also: 'Saad samuti valida'\n        },\n        url: {\n          title: 'Failid veebist',\n          line1: 'Ükskõik mis fail otse veebist.',\n          line2: 'Lihtsalt sisesta URL.',\n          input: 'Kleebi link siia...',\n          button: 'Lae üles'\n        },\n        camera: {\n          capture: 'Take a photo',\n          mirror: 'Mirror',\n          startRecord: 'Record a video',\n          stopRecord: 'Stop',\n          cancelRecord: 'Cancel',\n          retry: 'Request permissions again',\n          pleaseAllow: {\n            title: 'Please allow access to your camera',\n            text: 'You have been prompted to allow camera access from this site. ' + 'In order to take pictures with your camera you must approve this request.'\n          },\n          notFound: {\n            title: 'No camera detected',\n            text: 'Looks like you have no camera connected to this device.'\n          }\n        },\n        preview: {\n          unknownName: 'teadmata',\n          change: 'Tühista',\n          back: 'Tagasi',\n          done: 'Lisa',\n          unknown: {\n            title: 'Üleslaadimine... Palun oota eelvaadet.',\n            done: 'Jäta eelvaade vahele ja nõustu'\n          },\n          regular: {\n            title: 'Lisa see fail?',\n            line1: 'Oled lisamas ülaltoodud faili.',\n            line2: 'Palun kinnita.'\n          },\n          image: {\n            title: 'Lisa pilt?',\n            change: 'Tühista'\n          },\n          crop: {\n            title: 'Lõika ja lisa pilt',\n            done: 'Valmis',\n            free: 'vaba'\n          },\n          video: {\n            title: 'Lisa video?',\n            change: 'Tühista'\n          },\n          error: {\n            default: {\n              title: 'Oihh!',\n              text: 'Midagi läks üleslaadimisel valesti.',\n              back: 'Palun proovi uuesti'\n            },\n            image: {\n              title: 'Ainult pildifailid on lubatud.',\n              text: 'Palun proovi uuesti teise failiga.',\n              back: 'Vali pilt'\n            },\n            size: {\n              title: 'Valitud fail ületab maksimaalse suuruse.',\n              text: 'Palun proovi uuesti teise failiga.'\n            },\n            loadImage: {\n              title: 'Viga',\n              text: 'Ei saa pilti laadida'\n            }\n          },\n          multiple: {\n            title: 'Oled valinud %files%',\n            question: 'Kas sa soovid lisada kõik failid?',\n            tooManyFiles: 'Oled valinud liiga suure hulga faile. %max% on maksimaalne.',\n            tooFewFiles: 'Oled valinud %files%. Vähemalt %min% nõutud.',\n            clear: 'Eemalda kõik',\n            done: 'Valmis'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$k = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var et = {\n    translations: translations$k,\n    pluralize: pluralize$k\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$j = {\n    uploading: 'Envoi en cours... Merci de patienter.',\n    loadingInfo: 'Chargement des informations...',\n    errors: {\n      default: 'Erreur',\n      baddata: 'Valeur incorrecte',\n      size: 'Fichier trop volumineux',\n      upload: 'Envoi impossible',\n      user: 'Envoi annulé',\n      info: 'Impossible de charger les informations',\n      image: 'Seules les images sont autorisées',\n      createGroup: \"Création d'1 groupe impossible\",\n      deleted: 'Le fichier a été supprimé'\n    },\n    draghere: 'Glissez-déposez un fichier ici',\n    file: {\n      one: '%1 fichier',\n      other: '%1 fichiers'\n    },\n    buttons: {\n      cancel: 'Annuler',\n      remove: 'Supprimer',\n      choose: {\n        files: {\n          one: 'Sélectionner un fichier',\n          other: 'Sélectionner des fichiers'\n        },\n        images: {\n          one: 'Sélectionner une image',\n          other: 'Sélectionner des images'\n        }\n      }\n    },\n    dialog: {\n      close: 'Fermer',\n      openMenu: 'Ouvrir le menu',\n      done: 'Terminer',\n      showFiles: 'Voir les fichiers',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Bienvenue',\n          preview: 'Avant-première',\n          file: 'Fichier en local',\n          url: 'Une adresse web',\n          camera: 'Caméra',\n          facebook: 'Facebook',\n          dropbox: 'Dropbox',\n          gdrive: 'Google Drive',\n          gphotos: 'Google Photos',\n          instagram: 'Instagram',\n          vk: 'VK',\n          evernote: 'Evernote',\n          box: 'Box',\n          onedrive: 'OneDrive',\n          flickr: 'Flickr',\n          huddle: 'Huddle'\n        },\n        file: {\n          drag: 'Glissez-déposez un fichier ici',\n          nodrop: 'Envoyez des fichiers depuis votre ordinateur',\n          cloudsTip: 'Stockage sur le cloud<br>et réseaux sociaux',\n          or: 'ou',\n          button: 'Choisir un fichier local',\n          also: 'Vous pouvez également le sélectionner depuis'\n        },\n        url: {\n          title: 'Fichiers depuis le Web',\n          line1: \"Prenez n'importe quel fichier depuis un site web.\",\n          line2: 'Saisissez simplement son adresse.',\n          input: 'Collez le lien ici...',\n          button: 'Envoi'\n        },\n        camera: {\n          title: 'Fichier depuis la caméra',\n          capture: 'Prendre une photo',\n          mirror: 'Miroir',\n          startRecord: 'Enregistrer une vidéo',\n          stopRecord: 'Arrêter',\n          cancelRecord: 'Annuler',\n          retry: 'Envoyer une nouvelle demande de permission',\n          pleaseAllow: {\n            title: \"Autorisez l'accès à votre appareil photo\",\n            text: \"Vous avez été invité à autoriser l'accès à votre appareil photo. Pour prendre des photos avec votre caméra vous devez approuver cette demande.\"\n          },\n          notFound: {\n            title: 'Aucun appareil photo détecté',\n            text: \"Il semblerait que vous n'ayez pas d'appareil photo connecté à cet appareil.\"\n          }\n        },\n        preview: {\n          unknownName: 'inconnu',\n          change: 'Annuler',\n          back: 'Retour',\n          done: 'Ajouter',\n          unknown: {\n            title: 'Envoi en cours... Merci de patienter pour prévisualiser.',\n            done: 'Passer la prévisualisation et accepter'\n          },\n          regular: {\n            title: 'Ajouter ce fichier ?',\n            line1: \"Vous êtes sur le point d'ajouter le fichier ci-dessus.\",\n            line2: 'Merci de confirmer.'\n          },\n          image: {\n            title: 'Ajouter cette image ?',\n            change: 'Annuler'\n          },\n          crop: {\n            title: 'Recadrer et ajouter cette image',\n            done: 'Terminer',\n            free: 'libre'\n          },\n          video: {\n            title: 'Ajouter cette vidéo ?',\n            change: 'Annuler'\n          },\n          error: {\n            default: {\n              title: 'Oups!',\n              text: \"Quelque chose n'a pas fonctionné pendant l'envoi.\",\n              back: 'Merci de bien vouloir recommencer'\n            },\n            image: {\n              title: 'Seules les images sont acceptées.',\n              text: 'Merci de bien vouloir recommencer avec un autre fichier.',\n              back: 'Choisir une image'\n            },\n            size: {\n              title: 'Le fichier sélectionné est trop volumineux.',\n              text: 'Merci de bien vouloir recommencer avec un autre fichier.'\n            },\n            loadImage: {\n              title: 'Erreur',\n              text: \"Impossible de charger l'image\"\n            }\n          },\n          multiple: {\n            title: 'Vous avez choisi %files%',\n            question: 'Voulez vous ajouter tous ces fichiers ?',\n            tooManyFiles: 'Vous avez choisi trop de fichiers. %max% est le maximum.',\n            tooFewFiles: 'Vous avez choisi %fichiers%. %min% est le minimum.',\n            clear: 'Tout retirer',\n            done: 'Terminer',\n            file: {\n              preview: 'Prévisualiser %file%',\n              remove: 'Supprimer %file%'\n            }\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$j = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var fr = {\n    translations: translations$j,\n    pluralize: pluralize$j\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$i = {\n    uploading: 'טוען... אנא המתן.',\n    loadingInfo: 'טוען מידע...',\n    errors: {\n      default: 'שגיאה',\n      baddata: 'ערך שגוי',\n      size: 'קובץ גדול מידי',\n      upload: 'לא ניתן להעלות',\n      user: 'העלאה בוטלה',\n      info: 'לא ניתן לטעון מידע',\n      image: 'ניתן להעלות רק תמונות',\n      createGroup: 'לא ניתן ליצור קבוצה',\n      deleted: 'הקובץ נמחק'\n    },\n    draghere: 'שחרר כאן קובץ',\n    file: {\n      one: 'קובץ %1',\n      other: '%1 קבצים'\n    },\n    buttons: {\n      cancel: 'ביטול',\n      remove: 'הסר',\n      choose: {\n        files: {\n          one: 'בחר קובץ',\n          other: 'בחר קבצים'\n        },\n        images: {\n          one: 'בחר תמונה',\n          other: 'בחר תמונות'\n        }\n      }\n    },\n    dialog: {\n      done: 'סיום',\n      showFiles: 'הצג קבצים',\n      tabs: {\n        names: {\n          facebook: 'פייסבוק',\n          dropbox: 'דרופבוקס',\n          gdrive: 'כונן גוגל',\n          instagram: 'אינסטגרם',\n          url: 'לינק מהאינטרנט'\n        },\n        file: {\n          drag: 'שחרר כאן קובץ',\n          nodrop: 'העלה קבצים מהמחשב',\n          or: 'או',\n          button: 'בחר קובץ מהמחשב',\n          also: 'ניתן לבחור גם מ'\n        },\n        url: {\n          title: 'קובץ מהאינטרנט',\n          line1: 'גרור קובץ מהאינטרנט',\n          line2: 'ספק את כתובת הקובץ',\n          input: 'הדבק את כתובת הקובץ...',\n          button: 'העלה'\n        },\n        preview: {\n          unknownName: 'לא ידוע',\n          change: 'ביטול',\n          back: 'חזרה',\n          done: 'הוסף',\n          unknown: {\n            title: 'מעלה... נא המתן לתצוגה מקדימה.',\n            done: 'דלג על תצוגה מקדימה'\n          },\n          regular: {\n            title: 'להוסיף קובץ זה?',\n            line1: 'קובץ זה יועלה',\n            line2: 'נא אשר.'\n          },\n          image: {\n            title: 'להוסיף תמונה זו?',\n            change: 'ביטול'\n          },\n          crop: {\n            title: 'חתוך והוסף תמונה זו',\n            done: 'סיום'\n          },\n          error: {\n            default: {\n              title: 'אופס!',\n              text: 'משהו השתבש בזמן ההעלאה.',\n              back: 'נא נסה שוב'\n            },\n            image: {\n              title: 'ניתן לקבל רק קבצי תמונות.',\n              text: 'נא נסה שוב עם קובץ אחר.',\n              back: 'בחר תמונה'\n            },\n            size: {\n              title: 'הקובץ שבחרת חורג מהגבול.',\n              text: 'נא נסה שוב עם קובץ אחר.'\n            },\n            loadImage: {\n              title: 'שגיאה',\n              text: 'טעינת התמונה נכשלה'\n            }\n          },\n          multiple: {\n            title: 'בחרת %files%',\n            question: 'אתה מעוניין להוסיף את כל הקבצים האלו?',\n            tooManyFiles: 'בחרת יותר מידי קבצים. יש לבחור מקסימום %max% קבצים.',\n            tooFewFiles: 'בחרת %files%. יש לבחור לפחות %min%.',\n            clear: 'הסר הכל',\n            done: 'סיום'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$i = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var he = {\n    translations: translations$i,\n    pluralize: pluralize$i\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$h = {\n    uploading: 'Caricamento in corso... Si prega di attendere.',\n    loadingInfo: 'Caricamento informazioni in corso...',\n    errors: {\n      default: 'Errore',\n      baddata: 'Valore errato',\n      size: 'Il file è troppo grande',\n      upload: 'Impossibile fare l’upload',\n      user: 'Upload cancellato',\n      info: 'Impossibile caricare le informazioni',\n      image: 'Sono ammesse solo immagini',\n      createGroup: 'Impossibile creare gruppo di file',\n      deleted: 'Il file è stato eliminato'\n    },\n    draghere: 'Trascina un file qui',\n    file: {\n      one: 'file %1',\n      other: 'file %1'\n    },\n    buttons: {\n      cancel: 'Cancella',\n      remove: 'Rimuovi',\n      choose: {\n        files: {\n          one: 'Seleziona un file',\n          other: 'Seleziona file'\n        },\n        images: {\n          one: 'Seleziona un’immagine',\n          other: 'Seleziona immagini'\n        }\n      }\n    },\n    dialog: {\n      done: 'Fatto',\n      showFiles: 'Mostra file',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Benvenuto',\n          preview: 'Anteprima',\n          file: 'File locali',\n          url: 'Link arbitrari',\n          camera: 'Fotocamera'\n        },\n        file: {\n          drag: 'Trascina un file qui',\n          nodrop: 'Carica file dal tuo computer',\n          cloudsTip: 'Salvataggi nel cloud<br>e servizi sociali',\n          or: 'o',\n          button: 'Seleziona un file locale',\n          also: 'Puoi anche scegliere da'\n        },\n        url: {\n          title: 'File dal web',\n          line1: 'Preleva un file dal web.',\n          line2: 'È sufficiente fornire il link.',\n          input: 'Incolla il tuo link qui...',\n          button: 'Carica'\n        },\n        camera: {\n          capture: 'Scatta una foto',\n          mirror: 'Specchio',\n          retry: 'Richiedi di nuovo le autorizzazioni',\n          pleaseAllow: {\n            title: 'Consenti l’accesso alla tua fotocamera',\n            text: 'Ti è stato richiesto di consentire l’accesso alla fotocamera da questo sito. Per scattare le foto con la tua fotocamera devi accettare questa richiesta.'\n          },\n          notFound: {\n            title: 'Nessuna fotocamera rilevata',\n            text: 'Non risulta che tu non abbia una fotocamera collegata a questo dispositivo.'\n          }\n        },\n        preview: {\n          unknownName: 'sconosciuto',\n          change: 'Cancella',\n          back: 'Indietro',\n          done: 'Aggiungi',\n          unknown: {\n            title: 'Caricamento in corso... Attendi l’anteprima.',\n            done: 'Salta l’anteprima e accetta'\n          },\n          regular: {\n            title: 'Vuoi aggiungere questo file?',\n            line1: 'Stai per aggiungere il file sopra.',\n            line2: 'Conferma.'\n          },\n          image: {\n            title: 'Vuoi aggiungere questa immagine?',\n            change: 'Cancella'\n          },\n          crop: {\n            title: 'Ritaglia e aggiungi questa immagine',\n            done: 'Fatto',\n            free: 'gratis'\n          },\n          error: {\n            default: {\n              title: 'Ops!',\n              text: 'Si è verificato un problema durante l’upload.',\n              back: 'Si prega di riprovare'\n            },\n            image: {\n              title: 'Sono accettati solo file immagine.',\n              text: 'Riprova con un altro file.',\n              back: 'Scegli immagine'\n            },\n            size: {\n              title: 'Il file selezionato supera il limite.',\n              text: 'Riprova con un altro file.'\n            },\n            loadImage: {\n              title: 'Errore',\n              text: 'Impossibile caricare l’immagine'\n            }\n          },\n          multiple: {\n            title: 'Hai selezionato %files%',\n            question: 'Vuoi aggiungere tutti questi file?',\n            tooManyFiles: 'Hai selezionato troppi file. %max% è il massimo.',\n            tooFewFiles: 'Hai selezionato %files%. È richiesto almeno %min%.',\n            clear: 'Rimuovi tutto',\n            done: 'Fatto'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$h = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var it = {\n    translations: translations$h,\n    pluralize: pluralize$h\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$g = {\n    uploading: 'アップロードしています… 完了までお待ち下さい。',\n    loadingInfo: '読み込み中…',\n    errors: {\n      default: 'エラー',\n      baddata: '間違った値',\n      size: 'ファイルが大きすぎます',\n      upload: 'アップロードできませんでした',\n      user: 'アップロードがキャンセルされました',\n      info: '読み込みに失敗しました',\n      image: 'アップロードできるのは画像ファイルのみです',\n      createGroup: 'グループの作成に失敗しました',\n      deleted: '削除されたファイルです'\n    },\n    draghere: 'ここにファイルをドロップ',\n    file: {\n      other: '%1ファイル'\n    },\n    buttons: {\n      cancel: 'キャンセル',\n      remove: '削除',\n      choose: {\n        files: {\n          one: 'ファイルを選択',\n          other: 'ファイルを選択'\n        },\n        images: {\n          one: '画像を選択',\n          other: '画像を選択'\n        }\n      }\n    },\n    dialog: {\n      done: '完了',\n      showFiles: 'ファイルを表示',\n      tabs: {\n        names: {\n          preview: 'プレビュー',\n          file: 'ローカルファイル',\n          url: 'URLを直接入力'\n        },\n        file: {\n          drag: 'ここにファイルをドロップ',\n          nodrop: 'ファイルを選択してアップロード',\n          cloudsTip: 'クラウドストレージ<br>およびソーシャルサービス',\n          or: 'もしくは',\n          button: 'ローカルのファイルを選択',\n          also: '次からも選択可能です：'\n        },\n        url: {\n          title: 'ウェブ上のファイル',\n          line1: 'ウェブ上からファイルを取得します。',\n          line2: 'URLを入力してください。',\n          input: 'ここにURLを貼り付けしてください…',\n          button: 'アップロード'\n        },\n        preview: {\n          unknownName: '不明なファイル',\n          change: 'キャンセル',\n          back: '戻る',\n          done: '追加',\n          unknown: {\n            title: 'アップロードしています… プレビューの表示をお待ちください。',\n            done: 'プレビューの確認をスキップして完了'\n          },\n          regular: {\n            title: 'このファイルを追加しますか？',\n            line1: 'こちらのファイルを追加しようとしています。',\n            line2: '確認してください。'\n          },\n          image: {\n            title: 'この画像を追加しますか？',\n            change: 'キャンセル'\n          },\n          crop: {\n            title: '画像の切り取りと追加',\n            done: '完了',\n            free: 'リセット'\n          },\n          error: {\n            default: {\n              title: '失敗しました',\n              text: 'アップロード中に不明なエラーが発生しました。',\n              back: 'もう一度お試し下さい'\n            },\n            image: {\n              title: '画像ファイルのみ許可されています',\n              text: '他のファイルで再度お試し下さい。',\n              back: '画像を選択'\n            },\n            size: {\n              title: 'ファイルサイズが大きすぎます。',\n              text: '他のファイルで再度お試し下さい。'\n            },\n            loadImage: {\n              title: 'エラー',\n              text: '画像のロードに失敗しました。'\n            }\n          },\n          multiple: {\n            title: '%files%つのファイルを選択中',\n            question: 'これら全てのファイルを追加しますか？',\n            tooManyFiles: '選択ファイルが多すぎます。%max%つ以下にしてください。',\n            tooFewFiles: '選択ファイルが少なすぎます。%files%つ選択中です。少なくとも%min%つ選択してください。',\n            clear: '全て削除',\n            done: '完了'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$g = function pluralize(n) {\n    return 'other';\n  };\n\n  var ja = {\n    translations: translations$g,\n    pluralize: pluralize$g\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$f = {\n    uploading: '업로드중 기다려주세요',\n    loadingInfo: '정보 로드중...',\n    errors: {\n      default: '오류',\n      baddata: '잘못된 값',\n      size: '파일용량 초과',\n      upload: '업로드 실패',\n      user: '업로드 취소됨',\n      info: '정보를 불러올 수 없습니다',\n      image: '허용된 이미지만 가능',\n      createGroup: '파일 그룹 만들기 실패',\n      deleted: '파일이 삭제되었습니다'\n    },\n    draghere: '여기에 끌어다 놓기',\n    file: {\n      one: '%1 파일',\n      other: '%1 파일'\n    },\n    buttons: {\n      cancel: '취소',\n      remove: '삭제',\n      choose: {\n        files: {\n          one: '파일 첨부',\n          other: '파일 첨부'\n        },\n        images: {\n          one: '이미지 첨부',\n          other: '이미지 첨부'\n        }\n      }\n    },\n    dialog: {\n      close: '닫기',\n      openMenu: '메뉴 열기',\n      done: '완료',\n      showFiles: '파일 표시',\n      tabs: {\n        names: {\n          'empty-pubkey': '반갑습니다',\n          preview: '미리보기',\n          file: '파일 첨부',\n          url: '링크 연결',\n          camera: '카메라',\n          facebook: '페이스북',\n          dropbox: '드롭박스',\n          gdrive: '구글 드라이브',\n          gphotos: '구글 포토',\n          instagram: '인스타그램',\n          evernote: '에버노트',\n          box: '박스',\n          onedrive: '스카이드라이브',\n          flickr: '플리커'\n        },\n        file: {\n          drag: '모든 파일을<br>드래그 & 드롭',\n          nodrop: '파일 업로드',\n          cloudsTip: '클라우드 스토리지 및 소셜',\n          or: '또는',\n          button: '파일 선택',\n          also: '또는 선택하십시오'\n        },\n        url: {\n          title: '웹에서 파일 링크 연결',\n          line1: '웹에서 모든파일을 가져옵니다',\n          line2: '링크만 연결합니다.',\n          input: '링크 붙여 넣기...',\n          button: '업로드'\n        },\n        camera: {\n          title: '카메라 연결',\n          capture: '사진 찍기',\n          mirror: '거울',\n          startRecord: '비디오 녹화',\n          stopRecord: '정지',\n          cancelRecord: '취소',\n          retry: '재 시도',\n          pleaseAllow: {\n            title: '카메라 접근 허용',\n            text: '카메라 접근을 허용하시겠습니까?<br>' + '승인 요청을 해주셔야 합니다'\n          },\n          notFound: {\n            title: '카메라가 없습니다',\n            text: '이 기기에 연결된 카메라가 없습니다'\n          }\n        },\n        preview: {\n          unknownName: '알수없음',\n          change: '취소',\n          back: '뒤로',\n          done: '추가',\n          unknown: {\n            title: '업로드중, 기다려주세요',\n            done: '미리보기 건너뛰기'\n          },\n          regular: {\n            title: '이 파일을 추가하시겠습니까?',\n            line1: '위 파일을 추가하려고 합니다',\n            line2: '확인 하십시오'\n          },\n          image: {\n            title: '이미지를 추가하시겠습니까?',\n            change: '취소'\n          },\n          crop: {\n            title: '이미지 자르기 및 추가',\n            done: '완료',\n            free: '무료'\n          },\n          video: {\n            title: '비디오를 추가하시겠습니까?',\n            change: '취소'\n          },\n          error: {\n            default: {\n              title: '죄송합니다',\n              text: '업로드에 문제가 있습니다',\n              back: '다시 시도해 주세요'\n            },\n            image: {\n              title: '이미지 파일만 허용됩니다',\n              text: '다른 파일로 다시 시도하세요',\n              back: '이미지 선택'\n            },\n            size: {\n              title: '선택한 파일이 한도 초과하였습니다',\n              text: '다른 파일로 다시 시도하세요'\n            },\n            loadImage: {\n              title: '오류',\n              text: '이미지를 불러올 수 없습니다'\n            }\n          },\n          multiple: {\n            title: '%files%을(를) 선택하였습니다',\n            question: '%files%을 추가하시겠습니까?',\n            tooManyFiles: '너무 많은 파일을 추가하셨습니다. %max%가 최대 한도입니다',\n            tooFewFiles: '%files%을(를) 선택하였습니다 최소 %min%이상 필요합니다',\n            clear: '모두 삭제',\n            done: '추가',\n            file: {\n              preview: '%file% 미리보기',\n              remove: '%file% 삭제'\n            }\n          }\n        }\n      },\n      footer: {\n        text: 'powered by',\n        link: 'uploadcare'\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$f = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var ko = {\n    translations: translations$f,\n    pluralize: pluralize$f\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$e = {\n    uploading: 'Augšupielādē... Lūdzu, gaidiet.',\n    errors: {\n      default: 'Kļūda',\n      image: 'Atļauti tikai attēli'\n    },\n    draghere: 'Velciet failus šeit',\n    file: {\n      zero: '%1 failu',\n      one: '%1 fails',\n      other: '%1 faili'\n    },\n    buttons: {\n      cancel: 'Atcelt',\n      remove: 'Dzēst'\n    },\n    dialog: {\n      title: 'Ielādēt jebko no jebkurienes',\n      poweredby: 'Darbināts ar',\n      support: {\n        images: 'Attēli',\n        audio: 'Audio',\n        video: 'Video',\n        documents: 'Dokumenti'\n      },\n      tabs: {\n        file: {\n          title: 'Mans dators',\n          line1: 'Paņemiet jebkuru failu no jūsu datora.',\n          line2: 'Izvēlēties ar dialogu vai ievelciet iekšā.',\n          button: 'Meklēt failus'\n        },\n        url: {\n          title: 'Faili no tīmekļa',\n          line1: 'Paņemiet jebkuru failu no tīmekļa.',\n          line2: 'Tikai uzrādiet linku.',\n          input: 'Ielīmējiet linku šeit...',\n          button: 'Ielādēt'\n        }\n      }\n    }\n  };\n\n  var pluralize$e = function pluralize(n) {\n    if (n === 0) {\n      return 'zero';\n    }\n\n    if (n % 10 === 1 && n % 100 !== 11) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var lv = {\n    translations: translations$e,\n    pluralize: pluralize$e\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$d = {\n    uploading: 'Laster opp... Vennligst vent.',\n    loadingInfo: 'Laster inn info...',\n    errors: {\n      default: 'Feil',\n      baddata: 'Ugyldig verdi',\n      size: 'Filen er for stor',\n      upload: 'Kan ikke laste opp',\n      user: 'Opplasting avbrutt',\n      info: 'Kan ikke laste inn info',\n      image: 'Kun bilder er tillatt',\n      createGroup: 'Kan ikke opprette filgruppe',\n      deleted: 'Filen er slettet'\n    },\n    draghere: 'Dra en fil hit',\n    file: {\n      one: '%1 fil',\n      other: '%1 filer'\n    },\n    buttons: {\n      cancel: 'Avbryt',\n      remove: 'Fjern',\n      choose: {\n        files: {\n          one: 'Velg en fil',\n          other: 'Velg filer'\n        },\n        images: {\n          one: 'Velg et bilde',\n          other: 'Velg bilder'\n        }\n      }\n    },\n    dialog: {\n      done: 'Ferdig',\n      showFiles: 'Vis filer',\n      tabs: {\n        names: {\n          preview: 'Forhåndsvising',\n          file: 'Lokale filer',\n          url: 'Direktelink'\n        },\n        file: {\n          drag: 'Dra og slipp en fil her',\n          nodrop: 'Last opp filer fra datamaskinen',\n          cloudsTip: 'Skylagring<br>og sosiale tjenester',\n          or: 'eller',\n          button: 'Velg en lokal fil',\n          also: 'Du kan også velge det fra'\n        },\n        url: {\n          title: 'Filer fra internett',\n          line1: 'Velg hvilken som helst fil fra internett.',\n          line2: 'Bare gi oss linken.',\n          input: 'Lim inn linken her...',\n          button: 'Last opp'\n        },\n        preview: {\n          unknownName: 'ukjent',\n          change: 'Avbryt',\n          back: 'Tilbake',\n          done: 'Legg til',\n          unknown: {\n            title: 'Laster opp... Vennligst vent på forhåndsvisning.',\n            done: 'Hopp over forhåndsvisning og godkjenn'\n          },\n          regular: {\n            title: 'Legge til denne filen?',\n            line1: 'Filen legges nå til.',\n            line2: 'Vennligst bekreft.'\n          },\n          image: {\n            title: 'Legge til dette bildet?',\n            change: 'Avbryt'\n          },\n          crop: {\n            title: 'Kutt og legg til dette bildet',\n            done: 'Ferdig',\n            free: 'frigjør'\n          },\n          error: {\n            default: {\n              title: 'Ops!',\n              text: 'Noe gikk galt under opplastingen.',\n              back: 'Vennligst prøv igjen'\n            },\n            image: {\n              title: 'Kun bilder er akseptert.',\n              text: 'Prøv igjen med en annen fil.',\n              back: 'Velg bilde'\n            },\n            size: {\n              title: 'Den valgte filen overskrider tilatt størrelse.',\n              text: 'Vennligst prøv igjen med en annen fil.'\n            },\n            loadImage: {\n              title: 'Feil',\n              text: 'Kan ikke laste bildet'\n            }\n          },\n          multiple: {\n            title: 'Du har valgt %files%',\n            question: 'Ønsker du å legge til alle filene?',\n            tooManyFiles: 'Du har valgt for mange filer. %max% er maksimum.',\n            tooFewFiles: 'Du har valgt %files%. Minimum %min% er påkrevd.',\n            clear: 'Fjern alle',\n            done: 'Ferdig'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$d = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var nb = {\n    translations: translations$d,\n    pluralize: pluralize$d\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$c = {\n    uploading: 'Uploaden... Even geduld.',\n    loadingInfo: 'Laden informatie...',\n    errors: {\n      default: 'Fout',\n      baddata: 'Ongeldige waarde',\n      size: 'Bestand is te groot',\n      upload: 'Kan niet uploaden',\n      user: 'Upload geannuleerd',\n      info: 'Kan informatie niet laden',\n      image: 'Alleen afbeeldingen toegestaan',\n      createGroup: 'Kan bestandsgroep niet maken',\n      deleted: 'Bestand is verwijderd'\n    },\n    draghere: 'Drop hier een bestand',\n    file: {\n      one: '%1 bestand',\n      other: '%1 bestanden'\n    },\n    buttons: {\n      cancel: 'Annuleren',\n      remove: 'Verwijderen',\n      choose: {\n        files: {\n          one: 'Kies een bestand',\n          other: 'Kies bestanden'\n        },\n        images: {\n          one: 'Kies een afbeelding',\n          other: 'Kies afbeeldingen'\n        }\n      }\n    },\n    dialog: {\n      done: 'Klaar',\n      showFiles: 'Toon bestanden',\n      tabs: {\n        names: {\n          preview: 'Voorvertoning',\n          file: 'Computer',\n          url: 'Directe links'\n        },\n        file: {\n          drag: 'Drop hier een bestand',\n          nodrop: 'Upload bestanden van je computer',\n          or: 'of',\n          button: 'Selecteer een bestand op je computer',\n          also: 'Je kan ook selecteren van'\n        },\n        camera: {\n          title: 'Bestand van webcamera',\n          retry: 'Opnieuw toegang aanvragen'\n        },\n        url: {\n          title: 'Bestanden op het web',\n          line1: 'Selecteer een bestand op het web.',\n          line2: 'Voer de link in.',\n          input: 'Plak de link hier...',\n          button: 'Upload'\n        },\n        preview: {\n          unknownName: 'onbekend',\n          change: 'Annuleren',\n          back: 'Terug',\n          done: 'Toevoegen',\n          unknown: {\n            title: 'Uploaden... Wacht op de voorvertoning.',\n            done: 'Voorvertoning overslaan an accepteren'\n          },\n          regular: {\n            title: 'Dit bestand toevoegen?',\n            line1: 'Je staat op het punt bovenstaand bestand toe te voegen.',\n            line2: 'Bevestig'\n          },\n          image: {\n            title: 'Voeg deze afbeelding toe?',\n            change: 'Annuleren'\n          },\n          crop: {\n            title: 'Afbeelding bijknippen en toevoegen',\n            done: 'Klaar'\n          },\n          error: {\n            default: {\n              title: 'Oeps!',\n              text: 'Er is een fout opgetreden tijdens het uploaden.',\n              back: 'Probeer opnieuw'\n            },\n            image: {\n              title: 'Alleen afbeeldingen worden geaccepteerd.',\n              text: 'Probeer opnieuw met een andere bestand.',\n              back: 'Selecteer afbeelding'\n            },\n            size: {\n              title: 'Het geselecteerd bestand is groter dan de limiet.',\n              text: 'Probeer opnieuw met een andere bestand.'\n            },\n            loadImage: {\n              title: 'Fout',\n              text: 'Kan afbeelding niet laden'\n            }\n          },\n          multiple: {\n            title: 'Je hebt de volgende bestanden geselecteerd %files%',\n            question: 'Wil je al deze bestanden toevoegen?',\n            tooManyFiles: 'Je hebt teveel bestanden geselecteerd. %max% is het maximum.',\n            tooFewFiles: 'Je hebt de volgende bestanden geselecteerd %files%. Minimaal %min% is verplicht.',\n            clear: 'Verwijder alle bestanden',\n            done: 'Klaar'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$c = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var nl = {\n    translations: translations$c,\n    pluralize: pluralize$c\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$b = {\n    uploading: 'Przesyłanie... Proszę czekać.',\n    loadingInfo: 'Ładowanie...',\n    errors: {\n      default: 'Błąd',\n      baddata: 'Niepoprawna wartość',\n      size: 'Plik zbyt duży',\n      upload: 'Nie udało się przesłać',\n      user: 'Przesyłanie anulowane',\n      info: 'Nie udało się załadować informacji',\n      image: 'Dozwolone są tylko obrazy',\n      createGroup: 'Nie udało się utworzyć grupy plików',\n      deleted: 'Plik został usunięty'\n    },\n    draghere: 'Upuść plik tutaj',\n    file: {\n      one: '%1 plik',\n      few: '%1 pliki',\n      many: '%1 plików'\n    },\n    buttons: {\n      cancel: 'Anuluj',\n      remove: 'Usuń',\n      choose: {\n        files: {\n          one: 'Wybierz plik',\n          other: 'Wybierz pliki'\n        },\n        images: {\n          one: 'Wybierz obraz',\n          other: 'Wybierz obrazy'\n        }\n      }\n    },\n    dialog: {\n      close: 'Zamknij',\n      openMenu: 'Otwórz menu',\n      done: 'Wykonano',\n      showFiles: 'Pokaż pliki',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Witaj',\n          preview: 'Podgląd',\n          file: 'Pliki lokalne',\n          url: 'Plik z Sieci',\n          camera: 'Aparat'\n        },\n        file: {\n          drag: 'Upuść plik tutaj',\n          nodrop: 'Prześlij pliki z Twojego komputera',\n          cloudsTip: 'Dane w chmurze<br>i sieci społecznościowe',\n          or: 'lub',\n          button: 'Wybierz plik lokalny',\n          also: 'Możesz również wybrać z'\n        },\n        url: {\n          title: 'Pliki z Sieci',\n          line1: 'Złap jakikolwiej plik z sieci.',\n          line2: 'Podaj adres.',\n          input: 'Wklej link...',\n          button: 'Prześlij'\n        },\n        camera: {\n          title: 'Plik z kamery internetowej',\n          capture: 'Zrób zdjęcie',\n          mirror: 'Odbicie lustrzane',\n          startRecord: 'Nagraj film',\n          stopRecord: 'Zakończ',\n          cancelRecord: 'Anuluj',\n          retry: 'Poproś ponownie o dostęp',\n          pleaseAllow: {\n            title: 'Prośba o udostępnienie aparatu',\n            text: 'Zostałeś poproszony przez tę stronę o dostęp do aparatu. ' + 'Aby robić zdjecia, musisz zaakceptować tę prośbę.'\n          },\n          notFound: {\n            title: 'Nie wykryto aparatu.',\n            text: 'Wygląda na to, że nie masz podłączonego aparatu do tego urządzenia.'\n          }\n        },\n        preview: {\n          unknownName: 'nieznany',\n          change: 'Anuluj',\n          back: 'Wstecz',\n          done: 'Dodaj',\n          unknown: {\n            title: 'Przesyłanie... Proszę czekać na podgląd.',\n            done: 'Omiń podgląd i zaakceptuj.'\n          },\n          regular: {\n            title: 'Dodać ten plik?',\n            line1: 'Zamierzasz dodać nowy plik.',\n            line2: 'Potwierdź, proszę.'\n          },\n          image: {\n            title: 'Dodać ten obraz?',\n            change: 'Anuluj'\n          },\n          crop: {\n            title: 'Przytnij i dodaj ten obraz',\n            done: 'Wykonano',\n            free: 'wolny'\n          },\n          video: {\n            title: 'Dodać ten film?',\n            change: 'Anuluj'\n          },\n          error: {\n            default: {\n              title: 'Oops!',\n              text: 'Coś poszło nie tak podczas przesyłania.',\n              back: 'Spróbuj ponownie'\n            },\n            image: {\n              title: 'Akceptowane są tylko obrazy.',\n              text: 'Spróbuj ponownie z innym plikiem.',\n              back: 'Wybierz obraz'\n            },\n            size: {\n              title: 'Plik, który wybrałeś, przekracza dopuszczalny rozmiar',\n              text: 'Spróbuj ponownie z innym plikiem.'\n            },\n            loadImage: {\n              title: 'Błąd',\n              text: 'Nie udało się załadować obrazu'\n            }\n          },\n          multiple: {\n            title: 'Wybrałeś %files%',\n            question: 'Czy chcesz dodać wszystkie te pliki?',\n            tooManyFiles: 'Wybrałeś zbyt wiele plików. Maksimum to %max%.',\n            tooFewFiles: 'Wybrałeś %files%. Wymagane jest co najmniej %min%.',\n            clear: 'Usuń wszystkie',\n            done: 'Wykonano',\n            file: {\n              preview: 'Zobacz %file%',\n              remove: 'Usuń %file%'\n            }\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$b = function pluralize(n) {\n    var ref;\n\n    if (n === 1) {\n      return 'one';\n    } else if ((ref = n % 10) >= 2 && ref <= 4 && (n / 10 % 10 | 0) !== 1) {\n      return 'few';\n    } else {\n      return 'many';\n    }\n  };\n\n  var pl = {\n    translations: translations$b,\n    pluralize: pluralize$b\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$a = {\n    uploading: 'Fazendo upload... Aguarde.',\n    loadingInfo: 'Carregando informações...',\n    errors: {\n      default: 'Erro',\n      baddata: 'Valor incorreto',\n      size: 'Arquivo muito grande',\n      upload: 'Não foi possível fazer o upload',\n      user: 'Upload cancelado',\n      info: 'Não foi possível carregar as informações',\n      image: 'Apenas imagens são permitidas',\n      createGroup: 'Não foi possível criar o grupo de arquivos',\n      deleted: 'O arquivo foi excluído'\n    },\n    draghere: 'Arraste um arquivo aqui',\n    file: {\n      one: '%1 arquivo',\n      other: '%1 arquivos'\n    },\n    buttons: {\n      cancel: 'Cancelar',\n      remove: 'Excluir',\n      choose: {\n        files: {\n          one: 'Escolha um arquivo',\n          other: 'Escolha arquivos'\n        },\n        images: {\n          one: 'Escolha uma imagem',\n          other: 'Escolha imagens'\n        }\n      }\n    },\n    dialog: {\n      done: 'OK',\n      showFiles: 'Mostrar arquivos',\n      tabs: {\n        names: {\n          preview: 'Visualizar',\n          file: 'Computador',\n          url: 'Link da web'\n        },\n        file: {\n          drag: 'Arraste um arquivo aqui',\n          nodrop: 'Faça upload de arquivos do seu computador',\n          or: 'ou',\n          button: 'Escolha um arquivo do computador',\n          also: 'Você também pode escolher arquivos de'\n        },\n        url: {\n          title: 'Arquivos da web',\n          line1: 'Faça upload de qualquer arquivo da web.',\n          line2: 'Apenas informe o link.',\n          input: 'Cole seu link aqui...',\n          button: 'Upload'\n        },\n        camera: {\n          capture: 'Tirar uma foto',\n          mirror: 'Espelhar',\n          startRecord: 'Gravar um vídeo',\n          stopRecord: 'Parar',\n          cancelRecord: 'Cancelar',\n          retry: 'Requisitar permissão novamente',\n          pleaseAllow: {\n            title: 'Por favor permita o acesso a sua câmera',\n            text: 'Você foi solicitado a permitir o acesso à câmera a partir deste site. ' + 'Para tirar fotos com sua câmera, você deve aprovar este pedido.'\n          },\n          notFoud: {\n            title: 'Câmera não detectada',\n            text: 'Parece que você não tem uma câmera conectada a este dispositivo'\n          }\n        },\n        preview: {\n          unknownName: 'desconhecido',\n          change: 'Cancelar',\n          back: 'Voltar',\n          done: 'Adicionar',\n          unknown: {\n            title: 'Fazendo upload... Aguarde a visualização.',\n            done: 'Pular visualização e aceitar'\n          },\n          regular: {\n            title: 'Adicionar esse arquivo?',\n            line1: 'Você está prestes a adicionar o arquivo acima.',\n            line2: 'Por favor, confirme.'\n          },\n          image: {\n            title: 'Adicionar essa imagem?',\n            change: 'Cancelar'\n          },\n          crop: {\n            title: 'Cortar e adicionar essa imagem',\n            done: 'OK',\n            free: 'livre'\n          },\n          error: {\n            default: {\n              title: 'Oops!',\n              text: 'Alguma coisa deu errado durante o upload.',\n              back: 'Por favor, tente novamente'\n            },\n            image: {\n              title: 'Apenas arquivos de imagem são aceitos.',\n              text: 'Por favor, tente novamente com outro arquivo.',\n              back: 'Escolher a imagem'\n            },\n            size: {\n              title: 'O arquivo que você escolheu excede o limite.',\n              text: 'Por favor, tente novamente com outro arquivo.'\n            },\n            loadImage: {\n              title: 'Erro',\n              text: 'Não foi possível carregar a imagem'\n            }\n          },\n          multiple: {\n            title: 'Você escolheu',\n            question: 'Você quer adicionar todos esses arquivos?',\n            clear: 'Excluir todos',\n            done: 'OK'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$a = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var pt = {\n    translations: translations$a,\n    pluralize: pluralize$a\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$9 = {\n    uploading: 'Se încarcă... Răbdare.',\n    loadingInfo: 'Info încărcare...',\n    errors: {\n      default: 'Eroare',\n      baddata: 'Valoare incorectă',\n      size: 'Fișier prea mare',\n      upload: 'Nu pot încărca',\n      user: 'Încărcare anulată',\n      info: 'Nu pot încărca info',\n      image: 'Doar imagini, vă rog',\n      createGroup: 'Nu pot crea grup de fișiere',\n      deleted: 'Fișierul a fost șters'\n    },\n    draghere: 'Trage un fișier aici',\n    file: {\n      one: '%1 fișier',\n      other: '%1 fișiere'\n    },\n    buttons: {\n      cancel: 'Anulare',\n      remove: 'Șterge',\n      choose: {\n        files: {\n          one: 'Alege un fișier',\n          other: 'Alege fișiere'\n        },\n        images: {\n          one: 'Alege o imagine',\n          other: 'Alege imagini'\n        }\n      }\n    },\n    dialog: {\n      close: 'Închide',\n      openMenu: 'Deschide meniu',\n      done: 'Gata',\n      showFiles: 'Arată fișiere',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Bine ai venit',\n          preview: 'Previzualizare',\n          file: 'Fișiere locale',\n          url: 'Link direct',\n          camera: 'Camera',\n          facebook: 'Facebook',\n          dropbox: 'Dropbox',\n          gdrive: 'Google Drive',\n          gphotos: 'Google Photos',\n          instagram: 'Instagram',\n          vk: 'VK',\n          evernote: 'Evernote',\n          box: 'Box',\n          onedrive: 'OneDrive',\n          flickr: 'Flickr',\n          huddle: 'Huddle'\n        },\n        file: {\n          drag: 'trage aici<br>fișierele',\n          nodrop: 'Încarcă fișiere din computer',\n          cloudsTip: 'Cloud <br>și rețle sociale',\n          or: 'sau',\n          button: 'Alege un fișier local',\n          also: 'sau alege din'\n        },\n        url: {\n          title: 'Fișiere din Web',\n          line1: 'Ia orice fișier din Web.',\n          line2: 'Trebuie să ai doar linkul.',\n          input: 'Lipește linkul aici...',\n          button: 'Încarcă'\n        },\n        camera: {\n          title: 'Fișier din camera web',\n          capture: 'Fă o fotografie',\n          mirror: 'Mirror',\n          startRecord: 'Înregistrează un video',\n          stopRecord: 'Stop',\n          cancelRecord: 'Anulează',\n          retry: 'Cere permisiune din nou',\n          pleaseAllow: {\n            title: 'Te rog sa-mi dai acces la cameră',\n            text: 'Ai fost rugat să dai acces la cameră de acest site.<br>' + 'Pentru a putea face fotografii cu camera, trebuie să aprobi această cerere.'\n          },\n          notFound: {\n            title: 'Nicio cameră detectată',\n            text: 'Se pare că nu ai nicio cameră atașată acestui device.'\n          }\n        },\n        preview: {\n          unknownName: 'necunoscut',\n          change: 'Anulează',\n          back: 'Înapoi',\n          done: 'Adaugă',\n          unknown: {\n            title: 'Se încarcă... Te rog așteaptă previzualizarea.',\n            done: 'Sari peste previzualizare și acceptă'\n          },\n          regular: {\n            title: 'Adaug acest fișier?',\n            line1: 'Ești pe punctul de a adăuga fișierul de mai sus.',\n            line2: 'Te rog confirmă.'\n          },\n          image: {\n            title: 'Adaug această imagine?',\n            change: 'Anulează'\n          },\n          crop: {\n            title: 'Decupează și adaugă aceasta imagine',\n            done: 'Gata',\n            free: 'gratis'\n          },\n          video: {\n            title: 'Adaug acest video?',\n            change: 'anulează'\n          },\n          error: {\n            default: {\n              title: 'Oops!',\n              text: 'A intervenit o problemă la încărcare.',\n              back: 'te rog încearcă din nou'\n            },\n            image: {\n              title: 'Sunt acceptate doar imagini.',\n              text: 'Te rog încearcă din nou cu un alt fișier.',\n              back: 'Alege imagine'\n            },\n            size: {\n              title: 'Fișierul selectat de tine este prea mare.',\n              text: 'Te rog să încerci cu alt fișier.'\n            },\n            loadImage: {\n              title: 'Eroare',\n              text: 'Nu pot încărca imaginea'\n            }\n          },\n          multiple: {\n            title: 'Ai ales %files%.',\n            question: 'Adaug %files%?',\n            tooManyFiles: 'Ai ales prea multe fișiere. %max% is maximum.',\n            tooFewFiles: 'Ai ales %files%. Minimul este %min% .',\n            clear: 'Șterge toate',\n            done: 'Adaugă',\n            file: {\n              preview: 'Previzualizare %file%',\n              remove: 'Șterge %file%'\n            }\n          }\n        }\n      },\n      footer: {\n        text: 'powered by',\n        link: 'uploadcare'\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$9 = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var ro = {\n    translations: translations$9,\n    pluralize: pluralize$9\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$8 = {\n    uploading: 'Идет загрузка',\n    loadingInfo: 'Загрузка информации...',\n    errors: {\n      default: 'Ошибка',\n      baddata: 'Некорректные данные',\n      size: 'Слишком большой файл',\n      upload: 'Ошибка при загрузке',\n      user: 'Загрузка прервана',\n      info: 'Ошибка при загрузке информации',\n      image: 'Разрешены только изображения',\n      createGroup: 'Не удалось создать группу файлов',\n      deleted: 'Файл удалён'\n    },\n    draghere: 'Перетащите файл сюда',\n    file: {\n      one: '%1 файл',\n      few: '%1 файла',\n      many: '%1 файлов'\n    },\n    buttons: {\n      cancel: 'Отмена',\n      remove: 'Удалить',\n      choose: {\n        files: {\n          one: 'Выбрать файл',\n          other: 'Выбрать файлы'\n        },\n        images: {\n          one: 'Выбрать изображение',\n          other: 'Выбрать изображения'\n        }\n      }\n    },\n    dialog: {\n      done: 'Готово',\n      showFiles: 'Показать файлы',\n      tabs: {\n        names: {\n          preview: 'Предпросмотр',\n          'empty-pubkey': 'Приветствие',\n          file: 'Локальные файлы',\n          vk: 'ВКонтакте',\n          url: 'Ссылка',\n          camera: 'Камера'\n        },\n        file: {\n          drag: 'Перетащите файл сюда',\n          nodrop: 'Загрузка файлов с вашего компьютера',\n          cloudsTip: 'Облачные хранилища<br>и социальные сети',\n          or: 'или',\n          button: 'Выберите локальный файл',\n          also: 'Вы также можете загрузить файлы, используя:'\n        },\n        url: {\n          title: 'Файлы с других сайтов',\n          line1: 'Загрузите любой файл из сети.',\n          line2: '',\n          input: 'Укажите здесь ссылку...',\n          button: 'Загрузить'\n        },\n        camera: {\n          title: 'Файл из видеокамеры',\n          capture: 'Сделать снимок',\n          mirror: 'Отразить',\n          retry: 'Повторно запросить разрешение',\n          pleaseAllow: {\n            title: 'Пожалуйста, разрешите доступ к камере',\n            text: 'Для того, чтобы сделать снимок, мы запросили разрешение ' + 'на доступ к камере с этого сайта.'\n          },\n          notFound: {\n            title: 'Камера не найдена',\n            text: 'Скорее всего камера не подключена или не настроена.'\n          }\n        },\n        preview: {\n          unknownName: 'неизвестно',\n          change: 'Отмена',\n          back: 'Назад',\n          done: 'Добавить',\n          unknown: {\n            title: 'Загрузка... Пожалуйста подождите.',\n            done: 'Пропустить предварительный просмотр'\n          },\n          regular: {\n            title: 'Загрузить этот файл?',\n            line1: 'Вы собираетесь добавить этот файл:',\n            line2: 'Пожалуйста, подтвердите.'\n          },\n          image: {\n            title: 'Добавить это изображение?',\n            change: 'Отмена'\n          },\n          video: {\n            title: 'Добавить это видео?',\n            change: 'Отмена'\n          },\n          crop: {\n            title: 'Обрезать и добавить это изображение',\n            done: 'Готово',\n            free: 'произв.'\n          },\n          error: {\n            default: {\n              title: 'Ой!',\n              text: 'Что-то пошло не так во время загрузки.',\n              back: 'Пожалуйста, попробуйте ещё раз'\n            },\n            image: {\n              title: 'Можно загружать только изображения.',\n              text: 'Попробуйте загрузить другой файл.',\n              back: 'Выберите изображение'\n            },\n            size: {\n              title: 'Размер выбранного файла превышает лимит.',\n              text: 'Попробуйте загрузить другой файл.'\n            },\n            loadImage: {\n              title: 'Ошибка',\n              text: 'Изображение не удалось загрузить'\n            }\n          },\n          multiple: {\n            title: 'Вы выбрали %files%',\n            question: 'Добавить все эти файлы?',\n            tooManyFiles: 'Вы выбрали слишком много файлов. %max% максимум.',\n            tooFewFiles: 'Вы выбрали %files%. Нужно не меньше %min%.',\n            clear: 'Удалить все',\n            done: 'Добавить',\n            file: {\n              preview: 'Предпросмотр %file%',\n              remove: 'Удалить %file%'\n            }\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$8 = function pluralize(n) {\n    if ((n / 10 % 10 | 0) === 1 || n % 10 === 0 || n % 10 > 4) {\n      return 'many';\n    } else if (n % 10 === 1) {\n      return 'one';\n    } else {\n      return 'few';\n    }\n  };\n\n  var ru = {\n    translations: translations$8,\n    pluralize: pluralize$8\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$7 = {\n    uploading: 'Nahrávam... Prosím počkajte.',\n    loadingInfo: 'Nahrávam informácie...',\n    errors: {\n      default: 'Chyba',\n      baddata: 'Nesprávna hodnota',\n      size: 'Súbor je príliš veľký',\n      upload: 'Nedá sa nahrať',\n      user: 'Nahrávanie bolo zrušené',\n      info: 'Informácie sa nedajú nahrať',\n      image: 'Povolené sú len obrázky',\n      createGroup: 'Nie je možné vytvoriť priečinok',\n      deleted: 'Súbor bol odstránený'\n    },\n    draghere: 'Sem presuňte súbor',\n    file: {\n      one: '%1 súbor',\n      few: '%1 súbory',\n      other: '%1 súborov'\n    },\n    buttons: {\n      cancel: 'Zrušiť',\n      remove: 'Odstrániť',\n      choose: {\n        files: {\n          one: 'Vyberte súbor',\n          other: 'Vyberte súbory'\n        },\n        images: {\n          one: 'Vyberte obrázok',\n          other: 'Vyberte obrázky'\n        }\n      }\n    },\n    dialog: {\n      close: 'Zavrieť',\n      openMenu: 'Otvoriť menu',\n      done: 'Hotovo',\n      showFiles: 'Ukázať súbory',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Vitajte',\n          preview: 'Náhľad',\n          file: 'Z počítača',\n          url: 'Z internetu',\n          camera: 'Kamera',\n          facebook: 'Facebook',\n          dropbox: 'Dropbox',\n          gdrive: 'Disk Google',\n          gphotos: 'Google Obrázky',\n          instagram: 'Instagram',\n          vk: 'VK',\n          evernote: 'Evernote',\n          box: 'Box',\n          onedrive: 'OneDrive',\n          flickr: 'Flickr',\n          huddle: 'Huddle'\n        },\n        file: {\n          drag: 'presuňte a vložte<br>akékoľvek súbory',\n          nodrop: 'Nahrajte súbory z vášho&nbsp;počítača',\n          cloudsTip: 'Cloud úložiská<br>a sociálne siete',\n          or: 'alebo',\n          button: 'Vyberte súbor z počítača',\n          also: 'alebo vyberte z'\n        },\n        url: {\n          title: 'Súbory z internetu',\n          line1: 'Uložte akýkoľvek súbor z internetu.',\n          line2: 'Stačí pridať odkaz na neho.',\n          input: 'Vložte svoj odkaz sem...',\n          button: 'Nahrať'\n        },\n        camera: {\n          title: 'Súbor z webkamery',\n          capture: 'Odfotiť',\n          mirror: 'Zrkadliť',\n          startRecord: 'Natočte video',\n          stopRecord: 'Prestať natáčať',\n          cancelRecord: 'Zrušiť',\n          retry: 'Znovu požiadať o prístup',\n          pleaseAllow: {\n            title: 'Prosím povoľte prístup k vašej kamere',\n            text: 'Boli ste vyzvaní aby ste umožnili tejto stránke prístup ku kamere.<br>' + 'Prístup musíte povolit aby ste mohli fotiť s vašou kamerou.'\n          },\n          notFound: {\n            title: 'Kamera nebola nájdená',\n            text: 'Zdá sa, že k tomuto zariadeniu nemáte pripojenú kameru.'\n          }\n        },\n        preview: {\n          unknownName: 'neznámy',\n          change: 'Zrušiť',\n          back: 'Späť',\n          done: 'Pridať',\n          unknown: {\n            title: 'Nahráva sa... Prosím počkajte na náhľad.',\n            done: 'Preskočiť náhľad a nahrať'\n          },\n          regular: {\n            title: 'Pridať tento súbor?',\n            line1: 'Chystáte sa pridať vyššie uvedený súbor.',\n            line2: 'Prosím potvrďte váš výber.'\n          },\n          image: {\n            title: 'Pridať tento obrázok?',\n            change: 'Zrušiť'\n          },\n          crop: {\n            title: 'Orezať a pridať túto fotku',\n            done: 'Hotovo',\n            free: 'obnoviť'\n          },\n          video: {\n            title: 'Pridať toto video?',\n            change: 'Zrušiť'\n          },\n          error: {\n            default: {\n              title: 'Ejha!',\n              text: 'Pri nahrávaní sa vyskytla chyba.',\n              back: 'Skúste to znovu'\n            },\n            image: {\n              title: 'Je možné nahrávať len obrázky',\n              text: 'Skúste to znovu s iným súborom.',\n              back: 'Vybrať obrázok'\n            },\n            size: {\n              title: 'Súbor, ktorý ste vybrali presahuje povolenú veľkosť.',\n              text: 'Skúste to znovu s iným súborom.'\n            },\n            loadImage: {\n              title: 'Chyba',\n              text: 'Obrázok nie je možné vyhľadať'\n            }\n          },\n          multiple: {\n            title: 'Vybrali ste %files%.',\n            question: 'Pridať %files%?',\n            tooManyFiles: 'Vybrali ste príliš veľa súborov. Maximum je %max%.',\n            tooFewFiles: 'Vybrali ste %files%. Potrebných je aspoň %min%.',\n            clear: 'Odstrániť všetky',\n            done: 'Pridať',\n            file: {\n              preview: 'Nahliadnuť na %file%',\n              remove: 'Odstrániť %file%'\n            }\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$7 = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    } else if (n >= 2 && n <= 4) {\n      return 'few';\n    } else {\n      return 'many';\n    }\n  };\n\n  var sk = {\n    translations: translations$7,\n    pluralize: pluralize$7\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$6 = {\n    uploading: 'Шаљем... Молимо сачекајте.',\n    loadingInfo: 'Учитавам информације...',\n    errors: {\n      default: 'Грешка',\n      baddata: 'Погрешна вредност',\n      size: 'Фајл је сувише велик',\n      upload: 'Не могу да пошаљем',\n      user: 'Слање прекинуто',\n      info: 'Не могу да учитам информације',\n      image: 'Дозвољене су само слике',\n      createGroup: 'Не могу да направим групу фајлова',\n      deleted: 'Фајл је обрисан'\n    },\n    draghere: 'Убаците фајл овде',\n    file: {\n      one: '%1 фајл',\n      other: '%1 фајлова'\n    },\n    buttons: {\n      cancel: 'Поништи',\n      remove: 'Избаци',\n      choose: {\n        files: {\n          one: 'Изабери фајл',\n          other: 'Изабери фајлове'\n        },\n        images: {\n          one: 'Изабери слику',\n          other: 'Изабери слике'\n        }\n      }\n    },\n    dialog: {\n      close: 'Затвори',\n      openMenu: 'Отвори мени',\n      done: 'Готово',\n      showFiles: 'Покажи фајлове',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Добродошли',\n          preview: 'Погледај',\n          file: 'Локални фајлови',\n          url: 'Директан линк',\n          camera: 'Камера',\n          facebook: 'Фејсбук',\n          dropbox: 'Dropbox',\n          gdrive: 'Google Drive',\n          gphotos: 'Google Photos',\n          instagram: 'Инстаграм',\n          vk: 'VK',\n          evernote: 'Evernote',\n          box: 'Box',\n          onedrive: 'OneDrive',\n          flickr: 'Flickr',\n          huddle: 'Huddle'\n        },\n        file: {\n          drag: 'превуци<br>било које фајлове',\n          nodrop: 'Пошаљи фајлове са твог&nbsp;компјутера',\n          cloudsTip: 'Клауд<br>и социјалне мреже',\n          or: 'или',\n          button: 'Изабери локални фајл',\n          also: 'или изабери'\n        },\n        url: {\n          title: 'Фајлове са Интернета',\n          line1: 'Изабери било који фајл са Интернета.',\n          line2: 'Само убаци линк.',\n          input: 'Убаци линк овде...',\n          button: 'Пошаљи'\n        },\n        camera: {\n          title: 'Фајл са камере',\n          capture: 'Усликај',\n          mirror: 'Огледало',\n          startRecord: 'Сними видео',\n          stopRecord: 'Заустави',\n          cancelRecord: 'Поништи',\n          retry: 'Тражи дозволу поново',\n          pleaseAllow: {\n            title: 'Молимо вас да дозволите приступ вашој камери',\n            text: 'Упитани сте да дозволите приступ вашој камери са овог сајта.<br>' + 'Уколико желите да сликате, морате одобрити овај захтев.'\n          },\n          notFound: {\n            title: 'Камера није препозната',\n            text: 'Изгледа да немате камеру на овом уређају.'\n          }\n        },\n        preview: {\n          unknownName: 'непознато',\n          change: 'Поништи',\n          back: 'Назад',\n          done: 'Додај',\n          unknown: {\n            title: 'Шаљем... Сачекајте за приказ.',\n            done: 'Прескочи приказ и прихвати'\n          },\n          regular: {\n            title: 'Додај овај фајл?',\n            line1: 'Управо ћете додати овај фајл изнад.',\n            line2: 'Молимо потврдите.'\n          },\n          image: {\n            title: 'Додај ову слику?',\n            change: 'Поништи'\n          },\n          crop: {\n            title: 'Кропуј и додај ову слику',\n            done: 'Урађено',\n            free: 'слободно'\n          },\n          video: {\n            title: 'Додај овај видео?',\n            change: 'Поништи'\n          },\n          error: {\n            default: {\n              title: 'Ооопс!',\n              text: 'Нешто је искрсло у току слања.',\n              back: 'Молимо покушајте поново'\n            },\n            image: {\n              title: 'Дозвљене су само слике.',\n              text: 'Молимо покушајте са другим фајлом.',\n              back: 'Изабери слику'\n            },\n            size: {\n              title: 'Фајл који сте изабрали премашује лимит.',\n              text: 'Молимо покушајте са другим фајлом.'\n            },\n            loadImage: {\n              title: 'Грешка',\n              text: 'Не могу да учитам слику'\n            }\n          },\n          multiple: {\n            title: 'Изабрали сте %files%.',\n            question: 'Додај %files%?',\n            tooManyFiles: 'Изабрали сте превише фајлова. %max% је максимално.',\n            tooFewFiles: 'Изабрали сте %files%. Морате најмање %min% фајла.',\n            clear: 'Избаци све',\n            done: 'Додај',\n            file: {\n              preview: 'Прегледај %file%',\n              remove: 'Избаци %file%'\n            }\n          }\n        }\n      },\n      footer: {\n        text: 'направио',\n        link: 'uploadcare'\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$6 = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var sr = {\n    translations: translations$6,\n    pluralize: pluralize$6\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$5 = {\n    uploading: 'Laddar... Var god vänta.',\n    loadingInfo: 'Laddar info...',\n    errors: {\n      default: 'Fel',\n      baddata: 'Felaktigt värde',\n      size: 'Filen är för stor',\n      upload: 'Kan inte ladda upp',\n      user: 'Uppladdning avbruten',\n      info: 'Kan inte ladda informationen',\n      image: 'Endast bilder tillåtna',\n      createGroup: 'Kan inte skapa filgrupp',\n      deleted: 'Fil raderad'\n    },\n    draghere: 'Dra filen hit',\n    file: {\n      one: '%1 fil',\n      other: '%1 filer'\n    },\n    buttons: {\n      cancel: 'Avbryt',\n      remove: 'Ta bort',\n      choose: {\n        files: {\n          one: 'Välj fil',\n          other: 'Välj filer'\n        },\n        images: {\n          one: 'Välj en bild',\n          other: 'Välj bilder'\n        }\n      }\n    },\n    dialog: {\n      done: 'Klar',\n      showFiles: 'Visa filer',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Välkommen',\n          preview: 'Förhandsgranskning',\n          file: 'Lokala filer',\n          url: 'Direkta länkar',\n          camera: 'Kamera'\n        },\n        file: {\n          drag: 'Släpp filen här',\n          nodrop: 'Ladda upp filer från din dator',\n          cloudsTip: 'Molnlagring<br>och sociala nätverk',\n          or: 'eller',\n          button: 'Välj en lokal fil',\n          also: 'Du kan också välja den från'\n        },\n        url: {\n          title: 'Filer från webben',\n          line1: 'Välj en fil från en webbadress.',\n          line2: 'Ange bara länken till filen.',\n          input: 'Klistra in din länk här...',\n          button: 'Ladda upp'\n        },\n        camera: {\n          capture: 'Ta ett foto',\n          mirror: 'Spegel',\n          retry: 'Begär tillstånd igen',\n          pleaseAllow: {\n            title: 'Vänligen ge tillgång till din kamera',\n            text: 'Du har uppmanats att tillåta att denna webbplats får tillgång till din kamera.' + 'För att ta bilder med din kamera måste du godkänna denna begäran.'\n          },\n          notFound: {\n            title: 'Ingen kamera hittades',\n            text: 'Det verkar som att du inte har någon kamera ansluten till denna enheten.'\n          }\n        },\n        preview: {\n          unknownName: 'okänd',\n          change: 'Avbryt',\n          back: 'Tillbaka',\n          done: 'Lägg till',\n          unknown: {\n            title: 'Laddar... Vänligen vänta på förhandsgranskning.',\n            done: 'Skippa förhandsgranskning och acceptera'\n          },\n          regular: {\n            title: 'Lägg till denna filen?',\n            line1: 'Du håller på att lägga till filen ovan.',\n            line2: 'Vänligen bekräfta.'\n          },\n          image: {\n            title: 'Lägg till denna bilden?',\n            change: 'Avbryt'\n          },\n          crop: {\n            title: 'Beskär och lägg till denna bild',\n            done: 'Klar',\n            free: 'fri'\n          },\n          error: {\n            default: {\n              title: 'Oops!',\n              text: 'Någonting gick fel under uppladdningen.',\n              back: 'Vänligen försök igen'\n            },\n            image: {\n              title: 'Endast bildfiler accepteras.',\n              text: 'Vänligen försök igen med en annan fil.',\n              back: 'Välj bild'\n            },\n            size: {\n              title: 'Filen du har valt är för stor.',\n              text: 'Vänligen försök igen med en annan fil.'\n            },\n            loadImage: {\n              title: 'Fel',\n              text: 'Kan inte ladda bild'\n            }\n          },\n          multiple: {\n            title: 'Du har valt %files%',\n            question: 'Vill du lägga till alla dessa filer?',\n            tooManyFiles: 'Du har valt för många filer. %max% är max.',\n            tooFewFiles: 'Du har valt %files%. Minst %min% krävs.',\n            clear: 'Ta bort alla',\n            done: 'Klar'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$5 = function pluralize(n) {\n    if (n === 1) {\n      return 'one';\n    }\n\n    return 'other';\n  };\n\n  var sv = {\n    translations: translations$5,\n    pluralize: pluralize$5\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$4 = {\n    uploading: 'Yükleniyor... Lütfen bekleyin.',\n    loadingInfo: 'Bilgiler yükleniyor...',\n    errors: {\n      default: 'Hata',\n      baddata: 'Geçersiz değer',\n      size: 'Dosya çok büyük',\n      upload: 'Yüklenemedi',\n      user: 'Yükleme iptal edildi',\n      info: 'Bilgiler getirilemedi',\n      image: 'Sadece resim dosyası yüklenebilir',\n      createGroup: 'Dosya grubu yaratılamıyor',\n      deleted: 'Dosya silinmiş'\n    },\n    draghere: 'Buraya bir dosya bırakın',\n    file: {\n      other: '%1 dosya'\n    },\n    buttons: {\n      cancel: 'İptal',\n      remove: 'Kaldır',\n      choose: {\n        files: {\n          one: 'Dosya Seçin',\n          other: 'Dosya Seçin'\n        },\n        images: {\n          one: 'Resim Dosyası Seçin',\n          other: 'Resim Dosyası Seçin'\n        }\n      }\n    },\n    dialog: {\n      done: 'Bitti',\n      showFiles: 'Dosyaları Göster',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Hoş geldiniz',\n          preview: 'Önizleme',\n          file: 'Bilgisayar',\n          url: 'Dış Bağlantılar',\n          camera: 'Kamera'\n        },\n        file: {\n          drag: 'Buraya bir dosya bırakın',\n          nodrop: 'Bilgisayarınızdan dosya yükleyin',\n          or: 'ya da',\n          button: 'Bilgisayardan bir dosya seç',\n          also: 'Diğer yükleme seçenekleri',\n          cloudsTip: 'Bulut depolamalar<br>ve sosyal hizmetler'\n        },\n        url: {\n          title: 'Webden dosyalar',\n          line1: 'Webden herhangi bir dosya seçin.',\n          line2: 'Dosya bağlantısını sağlayın.',\n          input: 'Bağlantınızı buraya yapıştırın...',\n          button: 'Yükle'\n        },\n        camera: {\n          capture: 'Fotoğraf çek',\n          mirror: 'Ayna',\n          retry: 'Tekrar izin iste',\n          pleaseAllow: {\n            title: 'Lütfen kameranıza erişilmesine izin verin',\n            text: 'Bu siteden kamera erişimine izin vermeniz talep ediliyor. Kameranızla fotoğraf çekmek için bu isteği onaylamanız gerekmektedir.'\n          },\n          notFound: {\n            title: 'Kamera algılanamadı',\n            text: 'Bu cihaza kamera bağlantısının olmadığı görünüyor.'\n          }\n        },\n        preview: {\n          unknownName: 'bilinmeyen',\n          change: 'İptal',\n          back: 'Geri',\n          done: 'Ekle',\n          unknown: {\n            title: 'Yükleniyor... Önizleme için lütfen bekleyin.',\n            done: 'Önizlemeyi geç ve kabul et'\n          },\n          regular: {\n            title: 'Bu dosya eklensin mi?',\n            line1: 'Yukarıdaki dosyayı eklemek üzeresiniz.',\n            line2: 'Lütfen onaylayın.'\n          },\n          image: {\n            title: 'Bu görsel eklensin mi?',\n            change: 'İptal'\n          },\n          crop: {\n            title: 'Bu görseli kes ve ekle',\n            done: 'Bitti'\n          },\n          error: {\n            default: {\n              title: 'Aman!',\n              text: 'Yükleme sırasında bir hata oluştu.',\n              back: 'Lütfen tekrar deneyin.'\n            },\n            image: {\n              title: 'Sadece resim dosyaları kabul edilmektedir.',\n              text: 'Lütfen başka bir dosya ile tekrar deneyin.',\n              back: 'Resim dosyası seç'\n            },\n            size: {\n              title: 'Seçtiğiniz dosya limitleri aşıyor.',\n              text: 'Lütfen başka bir dosya ile tekrar deneyin.'\n            },\n            loadImage: {\n              title: 'Hata',\n              text: 'Resim dosyası yüklenemedi'\n            }\n          },\n          multiple: {\n            title: '%files% dosya seçtiniz',\n            question: 'Bu dosyaların hepsini eklemek istiyor musunuz?',\n            tooManyFiles: 'Fazla sayıda dosya seçtiniz, en fazla %max% dosya olabilir.',\n            tooFewFiles: '%files% dosya seçtiniz, en az %min% dosya olmalıdır.',\n            clear: 'Hepsini kaldır',\n            done: 'Bitti'\n          }\n        }\n      }\n    }\n  };\n\n  var pluralize$4 = function pluralize(n) {\n    return 'other';\n  };\n\n  var tr = {\n    translations: translations$4,\n    pluralize: pluralize$4\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$3 = {\n    uploading: 'Завантаження... Зачекайте.',\n    loadingInfo: 'Завантаження інформації...',\n    errors: {\n      default: 'Помилка',\n      baddata: 'Неправильне значення',\n      size: 'Завеликий файл',\n      upload: 'Помилка завантаження',\n      user: 'Завантаження скасовано',\n      info: 'Помилка завантаження інформації',\n      image: 'Дозволені лише зображення',\n      createGroup: 'Неможливо створити групу файлів',\n      deleted: 'Файл видалено'\n    },\n    draghere: 'Перетягніть файл сюди',\n    file: {\n      one: '%1 файл',\n      few: '%1 файли',\n      many: '%1 файлів'\n    },\n    buttons: {\n      cancel: 'Скасувати',\n      remove: 'Видалити',\n      choose: {\n        files: {\n          one: 'Вибрати файл',\n          other: 'Вибрати файли'\n        },\n        images: {\n          one: 'Вибрати зображення',\n          other: 'Вибрати зображення'\n        }\n      }\n    },\n    dialog: {\n      close: 'Закрити',\n      openMenu: 'Відкрити меню',\n      done: 'Готово',\n      showFiles: 'Показати файли',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Вітання',\n          preview: 'Попередній перегляд',\n          file: 'Локальні файли',\n          url: 'Пряме посилання',\n          camera: 'Камера'\n        },\n        file: {\n          drag: 'Перетягніть<br>будь-які файли',\n          nodrop: \"Завантаження файлів з вашого комп'ютера\",\n          cloudsTip: 'Хмарні сховища<br>та соціальні мережі',\n          or: 'або',\n          button: 'Обрати локальний файл',\n          also: 'або обрати з'\n        },\n        url: {\n          title: 'Файли з інших сайтів',\n          line1: 'Візьміть будь-який файл з Інтернету..',\n          line2: 'Вкажіть тут посилання.',\n          input: 'Вставте ваше посилання тут...',\n          button: 'Завантажити'\n        },\n        camera: {\n          title: 'Файл із відеокамери',\n          capture: 'Зробити знімок',\n          mirror: 'Віддзеркалити',\n          startRecord: 'Записати відео',\n          stopRecord: 'Стоп',\n          cancelRecord: 'Скасувати',\n          retry: 'Повторний запит дозволу',\n          pleaseAllow: {\n            title: 'Будь ласка, надайте доступ до вашої камери',\n            text: 'Вам буде запропоновано дозволити доступ до камери з цього сайту.<br>' + 'Для того, щоб фотографувати за допомогою камери, ви повинні схвалити цей запит.'\n          },\n          notFound: {\n            title: 'Камера не виявлена',\n            text: 'Схоже, у вас немає камери, підключеної до цього пристрою.'\n          }\n        },\n        preview: {\n          unknownName: 'невідомо',\n          change: 'Скасувати',\n          back: 'Назад',\n          done: 'Додати',\n          unknown: {\n            title: 'Завантаження... Зачекайте на попередній перегляд.',\n            done: 'Пропустити перегляд і прийняти'\n          },\n          regular: {\n            title: 'Додати цей файл?',\n            line1: 'Ви збираєтеся додати файл вище.',\n            line2: 'Будь ласка, підтвердіть.'\n          },\n          image: {\n            title: 'Додати це зображення?',\n            change: 'Скасувати'\n          },\n          crop: {\n            title: 'Обрізати та додати це зображення',\n            done: 'Готово',\n            free: 'довільно'\n          },\n          video: {\n            title: 'Додати це відео?',\n            change: 'Скасувати'\n          },\n          error: {\n            default: {\n              title: 'Ой!',\n              text: 'Під час завантаження сталася помилка.',\n              back: 'Будь ласка, спробуйте ще раз'\n            },\n            image: {\n              title: 'Приймаються лише файли зображень.',\n              text: 'Повторіть спробу з іншим файлом.',\n              back: 'Виберіть зображення'\n            },\n            size: {\n              title: 'Розмір вибраного файлу перевищує ліміт.',\n              text: 'Повторіть спробу з іншим файлом.'\n            },\n            loadImage: {\n              title: 'Помилка',\n              text: 'Помилка завантаження зображення'\n            }\n          },\n          multiple: {\n            title: 'Ви вибрали %files%.',\n            question: 'Додати %files%?',\n            tooManyFiles: 'Ви вибрали забагато файлів. Максимальна кількість %max%.',\n            tooFewFiles: 'Ви вибрали %files%. Мінімальна кількість %min%.',\n            clear: 'Видалити все',\n            done: 'Додати',\n            file: {\n              preview: 'Попередній перегляд %file%',\n              remove: 'Видалити %file%'\n            }\n          }\n        }\n      },\n      footer: {\n        text: 'працює на',\n        link: 'uploadcare'\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$3 = function pluralize(n) {\n    if ((n / 10 % 10 | 0) === 1 || n % 10 === 0 || n % 10 > 4) {\n      return 'many';\n    } else if (n % 10 === 1) {\n      return 'one';\n    } else {\n      return 'few';\n    }\n  };\n\n  var uk = {\n    translations: translations$3,\n    pluralize: pluralize$3\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$2 = {\n    loadingInfo: 'Đang tải thông tin...',\n    errors: {\n      default: 'Lỗi',\n      baddata: 'Giá trị không đúng',\n      size: 'Tệp quá lớn',\n      upload: 'Không thể tải lên',\n      user: 'Tải lên bị hủy',\n      info: 'Không thể nạp thông tin',\n      image: 'Chỉ cho phép các hình ảnh',\n      createGroup: 'Không thể tạo nhóm tệp',\n      deleted: 'Tệp đã bị xóa'\n    },\n    uploading: 'Đang tải lên... Vui lòng chờ đợi.',\n    draghere: 'Thả một tệp vào đây',\n    file: {\n      other: '%1 tệp'\n    },\n    buttons: {\n      cancel: 'Hủy',\n      remove: 'Xóa',\n      choose: {\n        files: {\n          other: 'Lựa chọn các tệp'\n        },\n        images: {\n          other: 'Lựa chọn hình ảnh'\n        }\n      }\n    },\n    dialog: {\n      close: 'Đóng',\n      openMenu: 'Mở menu',\n      done: 'Xong',\n      showFiles: 'Hiển thị tệp',\n      tabs: {\n        names: {\n          'empty-pubkey': 'Chào mừng',\n          preview: 'Xem trước',\n          file: 'Các tệp trên máy',\n          url: 'Liên kết tr.tiếp',\n          camera: 'Máy ảnh',\n          facebook: 'Facebook',\n          dropbox: 'Dropbox',\n          gdrive: 'Google Drive',\n          instagram: 'Instagram',\n          gphotos: 'Google Photos',\n          vk: 'VK',\n          evernote: 'Evernote',\n          box: 'Box',\n          onedrive: 'OneDrive',\n          flickr: 'Flickr',\n          huddle: 'Huddle'\n        },\n        file: {\n          drag: 'kéo & thả<br>bất kỳ tệp nào',\n          nodrop: 'Tải lên các tệp từ &nbsp;máy tính của bạn',\n          cloudsTip: 'Lưu trữ Đám mây<br>và các mạng xã hội',\n          or: 'hoặc',\n          button: 'Lựa chọn một tệp trên máy',\n          also: 'hoặc lựa chọn từ'\n        },\n        url: {\n          title: 'Các tệp trên Web',\n          line1: 'Chọn bất từ tệp nào từ web.',\n          line2: 'Chỉ cần cung cấp liên kết.',\n          input: 'Dán liên kết của bạn xuống đây...',\n          button: 'Tải lên'\n        },\n        camera: {\n          title: 'Tệp từ web cam',\n          capture: 'Chụp một bức ảnh',\n          mirror: 'Gương',\n          startRecord: 'Quay một video',\n          cancelRecord: 'Hủy',\n          stopRecord: 'Dừng',\n          retry: 'Yêu cầu cấp phép lần nữa',\n          pleaseAllow: {\n            text: 'Bạn đã được nhắc nhở để cho phép truy cập vào camera từ trang này.<br>Để có thể chụp ảnh với camera, bạn phải chấp thuận yêu cầu này.',\n            title: 'Vui lòng cho phép truy cập tới camera của bạn'\n          },\n          notFound: {\n            title: 'Không tìm thấy camera nào',\n            text: 'Có vẻ như bạn không có camera nào nối với thiết bị này.'\n          }\n        },\n        preview: {\n          unknownName: 'vô danh',\n          change: 'Hủy',\n          back: 'Quay lại',\n          done: 'Thêm',\n          unknown: {\n            title: 'Đang tải lên...Vui lòng đợi để xem trước.',\n            done: 'Bỏ qua và chấp nhận'\n          },\n          regular: {\n            title: 'Thêm tệp này?',\n            line1: 'Bạn dự định thêm tệp ở trên.',\n            line2: 'Vui lòng chấp thuận.'\n          },\n          image: {\n            title: 'Thêm hình ảnh này?',\n            change: 'Hủy'\n          },\n          crop: {\n            title: 'Cắt và thêm ảnh này',\n            done: 'Xong',\n            free: 'miễn phí'\n          },\n          video: {\n            title: 'Thêm video này?',\n            change: 'Hủy'\n          },\n          error: {\n            default: {\n              title: 'Ồ!',\n              back: 'Vui lòng thử lại',\n              text: 'Có lỗi gì đó trong quá trình tải lên.'\n            },\n            image: {\n              title: 'Chỉ chấp thuận các tệp hình ảnh.',\n              text: 'Vui lòng thử lại với một tệp mới.',\n              back: 'Lựa chọn hình ảnh'\n            },\n            size: {\n              title: 'Tệp bạn đã lựa chọn vượt quá giới hạn',\n              text: 'Vui lòng thử lại với một tệp khác.'\n            },\n            loadImage: {\n              title: 'Lỗi',\n              text: 'Không thể tải hình ảnh'\n            }\n          },\n          multiple: {\n            title: 'Bạn đã lựa chọn %files%',\n            question: 'Thêm %files%?',\n            tooManyFiles: 'Bạn đã lựa chọn quá nhiều tệp. %max% là tối đa.',\n            tooFewFiles: 'Bạn đã lựa chọn %files%. Ít nhất cần %min%',\n            clear: 'Xoá Tất cả',\n            file: {\n              preview: 'Xem trước %file%',\n              remove: 'Xóa %file%'\n            },\n            done: 'Thêm'\n          }\n        }\n      },\n      footer: {\n        text: 'được hỗ trợ bởi',\n        link: 'uploadcare'\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$2 = function pluralize(n) {\n    return 'other';\n  };\n\n  var vi = {\n    translations: translations$2,\n    pluralize: pluralize$2\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations$1 = {\n    uploading: '上傳中...請等待',\n    loadingInfo: '正在讀取資訊...',\n    errors: {\n      default: '錯誤',\n      baddata: '錯誤資料',\n      size: '檔案太大',\n      upload: '無法上傳',\n      user: '上傳被取消',\n      info: '無法讀取資訊',\n      image: '只允許圖片檔案',\n      createGroup: '無法建立檔案群組',\n      deleted: '檔案已被刪除'\n    },\n    draghere: '拖放檔案到這裡',\n    file: {\n      other: '%1 個檔案'\n    },\n    buttons: {\n      cancel: '取消',\n      remove: '刪除',\n      choose: {\n        files: {\n          one: '選擇檔案',\n          other: '選擇檔案'\n        },\n        images: {\n          one: '選擇圖片',\n          other: '選擇圖片'\n        }\n      }\n    },\n    dialog: {\n      done: '完成',\n      showFiles: '顯示檔案',\n      tabs: {\n        names: {\n          'empty-pubkey': '歡迎',\n          preview: '預覽',\n          file: '從本機上傳',\n          url: '任意圖片連結',\n          camera: '相機'\n        },\n        file: {\n          drag: '拖放檔案到這裡',\n          nodrop: '從你的本機中上傳',\n          cloudsTip: '雲端硬碟<br>與社群網站',\n          or: '或者',\n          button: '從本機中選取檔案',\n          also: '你也可以選自'\n        },\n        url: {\n          title: '來自網際網路的檔案',\n          line1: '從網際網路選取檔案',\n          line2: '只需提供連結',\n          input: '將連結複製至此...',\n          button: '上傳'\n        },\n        camera: {\n          capture: '拍照',\n          mirror: '鏡像',\n          retry: '重新取得相機權限',\n          pleaseAllow: {\n            title: '請允許使存取您的相機',\n            text: '你一直在提示允許來自這個網站的訪問攝像頭。' + '為了拍照用你的相機，你必須批准這一請求。'\n          },\n          notFound: {\n            title: '沒有找到相機',\n            text: '看起來你有沒有將連接相機。'\n          }\n        },\n        preview: {\n          unknownName: '未知',\n          change: '取消',\n          back: '返回',\n          done: '加入',\n          unknown: {\n            title: '上傳中...請等待預覽',\n            done: '跳過預覽，直接接受'\n          },\n          regular: {\n            title: '加入這個檔案？',\n            line1: '你將加入上面的檔案。',\n            line2: '請確認。'\n          },\n          image: {\n            title: '加入這個圖片？',\n            change: '取消'\n          },\n          crop: {\n            title: '裁切並加入這個圖片',\n            done: '完成',\n            free: '自由裁切'\n          },\n          error: {\n            default: {\n              title: '錯誤！',\n              text: '上傳過程中出錯。',\n              back: '請重試'\n            },\n            image: {\n              title: '只允許上傳圖片檔案。',\n              text: '請選擇其他檔案重新上傳。',\n              back: '選擇圖片'\n            },\n            size: {\n              title: '你選取的檔案超過了100MB的上限',\n              text: '請用另一個檔案再試一次。'\n            },\n            loadImage: {\n              title: '錯誤',\n              text: '無法讀取圖片'\n            }\n          },\n          multiple: {\n            title: '你已經選擇 %files%',\n            question: '你要加入所有檔案嗎？',\n            tooManyFiles: '你選了太多的檔案. 最多可選擇%max%. 請刪除一些。',\n            tooFewFiles: '你所選擇的檔案 %files%. 至少要 %min% .',\n            clear: '清空',\n            done: '完成'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize$1 = function pluralize(n) {\n    return 'other';\n  };\n\n  var zhTW = {\n    translations: translations$1,\n    pluralize: pluralize$1\n  };\n\n  // #\n  // # Please, do not use this locale as a reference for new translations.\n  // # It could be outdated or incomplete. Always use the latest English versions:\n  // # https://github.com/uploadcare/uploadcare-widget/blob/master/app/assets/javascripts/uploadcare/locale/en.js\n  // #\n  // # Any fixes are welcome.\n  // #\n  var translations = {\n    uploading: '上传中...请等待',\n    loadingInfo: '正在读取信息...',\n    errors: {\n      default: '错误',\n      baddata: '错误数据',\n      size: '文件太大',\n      upload: '无法上传',\n      user: '上传被取消',\n      info: '无法读取信息',\n      image: '只允许图形文件',\n      createGroup: '无法建立文件组',\n      deleted: '文件已被删除'\n    },\n    draghere: '拖放文件到这里',\n    file: {\n      other: '%1 个文件'\n    },\n    buttons: {\n      cancel: '取消',\n      remove: '删除'\n    },\n    dialog: {\n      done: '完成',\n      showFiles: '显示文件',\n      tabs: {\n        names: {\n          url: '任意图片链接'\n        },\n        file: {\n          drag: '拖放文件到这里',\n          nodrop: '从你的电脑中上传',\n          or: '或者',\n          button: '从电脑中选取文件',\n          also: '你也可以选自'\n        },\n        url: {\n          title: '来自互联网的文件',\n          line1: '从互联网选取文件',\n          line2: '只需提供链接',\n          input: '将链接拷贝至此...',\n          button: '上传'\n        },\n        preview: {\n          unknownName: '未知',\n          change: '取消',\n          back: '返回',\n          done: '添加',\n          unknown: {\n            title: '上传中...请等待预览',\n            done: '跳过预览，直接接受'\n          },\n          regular: {\n            title: '添加这个文件?',\n            line1: '你将添加上面的文件。',\n            line2: '请确认。'\n          },\n          image: {\n            title: '添加这个图片?',\n            change: '取消'\n          },\n          crop: {\n            title: '剪裁并添加这个图片',\n            done: '完成'\n          },\n          error: {\n            default: {\n              title: '错误!',\n              text: '上传过程中出错。',\n              back: '请重试'\n            },\n            image: {\n              title: '只允许上传图片文件。',\n              text: '请选择其他文件重新上传。',\n              back: '选择图片'\n            },\n            size: {\n              title: '你选取的文件超过了100MB的上限',\n              text: '请用另一个文件再试一次。'\n            },\n            loadImage: {\n              title: '错误',\n              text: '无法读取图片'\n            }\n          },\n          multiple: {\n            title: '你已经选择 %files%',\n            question: '你要添加所有文件吗？',\n            tooManyFiles: '你选了太多的文件. 最多可选择%max%. 请删除一些。',\n            clear: '清空',\n            done: '完成'\n          }\n        }\n      }\n    }\n  }; // Pluralization rules taken from:\n  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html\n\n  var pluralize = function pluralize(n) {\n    return 'other';\n  };\n\n  var zh = {\n    translations: translations,\n    pluralize: pluralize\n  };\n\n  var locales = {\n    ar: ar,\n    az: az,\n    ca: ca,\n    cs: cs,\n    da: da,\n    de: de,\n    el: el,\n    en: en,\n    es: es,\n    et: et,\n    fr: fr,\n    he: he,\n    it: it,\n    ja: ja,\n    ko: ko,\n    lv: lv,\n    nb: nb,\n    nl: nl,\n    pl: pl,\n    pt: pt,\n    ro: ro,\n    ru: ru,\n    sk: sk,\n    sr: sr,\n    sv: sv,\n    tr: tr,\n    uk: uk,\n    vi: vi,\n    zhTW: zhTW,\n    zh: zh\n  };\n\n  var currentLocale = null;\n  var locale = {\n    translations: Object.keys(locales).reduce(function (translations, lang) {\n      translations[lang] = locales[lang].translations;\n      return translations;\n    }, {}),\n    pluralize: Object.keys(locales).reduce(function (pluralize, lang) {\n      pluralize[lang] = locales[lang].pluralize;\n      return pluralize;\n    }, {}),\n    // Backdoor for widget constructor\n    rebuild: function rebuild(settings) {\n      currentLocale = null;\n      return _build(settings);\n    },\n    t: function t(key, n) {\n      var locale, ref, value;\n      locale = _build();\n      value = translate(key, locale.translations);\n\n      if (value == null && locale.lang !== defaults.lang) {\n        locale = defaults;\n        value = translate(key, locale.translations);\n      }\n\n      if (n != null) {\n        if (locale.pluralize != null) {\n          value = ((ref = value[locale.pluralize(n)]) != null ? ref.replace('%1', n) : undefined) || n;\n        } else {\n          value = '';\n        }\n      }\n\n      return value || '';\n    }\n  };\n  var defaultLang = 'en';\n  var defaults = {\n    lang: defaultLang,\n    translations: locales[defaultLang].translations,\n    pluralize: locales[defaultLang].pluralize\n  };\n\n  var _build = function _build(stgs) {\n    if (!currentLocale) {\n      var settings = build(stgs);\n      var lang = settings.locale || defaults.lang;\n      var translations = $__default['default'].extend(true, {}, locale.translations[lang], settings.localeTranslations);\n      var pluralize = $__default['default'].isFunction(settings.localePluralize) ? settings.localePluralize : locale.pluralize[lang];\n      currentLocale = {\n        lang: lang,\n        translations: translations,\n        pluralize: pluralize\n      };\n    }\n\n    return currentLocale;\n  };\n\n  var translate = function translate(key, node) {\n    var path = key.split('.');\n\n    for (var i = 0, len = path.length; i < len; i++) {\n      var subkey = path[i];\n\n      if (node == null) {\n        return null;\n      }\n\n      node = node[subkey];\n    }\n\n    return node;\n  };\n\n  var FileGroup$1 = /*#__PURE__*/function () {\n    function FileGroup(files, settings) {\n      var _this = this;\n\n      _classCallCheck(this, FileGroup);\n\n      this.__uuid = null;\n      this.settings = build(settings);\n      this.__fileColl = new CollectionOfPromises(files);\n      this.__allFilesDf = $__default['default'].when.apply($__default['default'], _toConsumableArray(this.files()));\n\n      this.__fileInfosDf = function () {\n        var file;\n\n        files = function () {\n          var j, len, ref, results;\n          ref = this.files();\n          results = [];\n\n          for (j = 0, len = ref.length; j < len; j++) {\n            file = ref[j];\n            results.push( // eslint-disable-next-line handle-callback-err\n            file.then(null, function (err, info) {\n              return $__default['default'].when(info);\n            }));\n          }\n\n          return results;\n        }.call(_this);\n\n        return $__default['default'].when.apply($__default['default'], _toConsumableArray(files));\n      }();\n\n      this.__createGroupDf = $__default['default'].Deferred();\n\n      this.__initApiDeferred();\n    }\n\n    _createClass(FileGroup, [{\n      key: \"files\",\n      value: function files() {\n        return this.__fileColl.get();\n      }\n    }, {\n      key: \"__save\",\n      value: function __save() {\n        var _this2 = this;\n\n        if (!this.__saved) {\n          this.__saved = true;\n          return this.__allFilesDf.done(function () {\n            return _this2.__createGroup().done(function (groupInfo) {\n              _this2.__uuid = groupInfo.id;\n              return _this2.__buildInfo(function (info) {\n                if (_this2.settings.imagesOnly && !info.isImage) {\n                  return _this2.__createGroupDf.reject('image', info);\n                } else {\n                  return _this2.__createGroupDf.resolve(info);\n                }\n              });\n            }).fail(function () {\n              return _this2.__createGroupDf.reject('createGroup');\n            });\n          });\n        }\n      } // returns object similar to File object\n\n    }, {\n      key: \"promise\",\n      value: function promise() {\n        this.__save();\n\n        return this.__apiDf.promise();\n      }\n    }, {\n      key: \"__initApiDeferred\",\n      value: function __initApiDeferred() {\n        var _this3 = this;\n\n        var notify, reject, resolve;\n        this.__apiDf = $__default['default'].Deferred();\n        this.__progressState = 'uploading';\n\n        reject = function reject(err) {\n          return _this3.__buildInfo(function (info) {\n            return _this3.__apiDf.reject(err, info);\n          });\n        };\n\n        resolve = function resolve(info) {\n          return _this3.__apiDf.resolve(info);\n        };\n\n        notify = function notify() {\n          return _this3.__apiDf.notify(_this3.__progressInfo());\n        };\n\n        notify();\n\n        this.__fileColl.onAnyProgress(notify);\n\n        this.__allFilesDf.done(function () {\n          _this3.__progressState = 'uploaded';\n          return notify();\n        }).fail(reject);\n\n        return this.__createGroupDf.done(function (info) {\n          _this3.__progressState = 'ready';\n          notify();\n          return resolve(info);\n        }).fail(reject);\n      }\n    }, {\n      key: \"__progressInfo\",\n      value: function __progressInfo() {\n        var j, len, progress, progressInfo, progressInfos;\n        progress = 0;\n        progressInfos = this.__fileColl.lastProgresses();\n\n        for (j = 0, len = progressInfos.length; j < len; j++) {\n          progressInfo = progressInfos[j];\n          progress += ((progressInfo != null ? progressInfo.progress : undefined) || 0) / progressInfos.length;\n        }\n\n        return {\n          state: this.__progressState,\n          uploadProgress: progress,\n          progress: this.__progressState === 'ready' ? 1 : progress * 0.9\n        };\n      }\n    }, {\n      key: \"__buildInfo\",\n      value: function __buildInfo(cb) {\n        var info;\n        info = {\n          uuid: this.__uuid,\n          cdnUrl: this.__uuid ? \"\".concat(this.settings.cdnBase, \"/\").concat(this.__uuid, \"/\") : null,\n          name: locale.t('file', this.__fileColl.length()),\n          count: this.__fileColl.length(),\n          size: 0,\n          isImage: true,\n          isStored: true\n        };\n        return this.__fileInfosDf.done(function () {\n          var _info, j, len;\n\n          for (var _len = arguments.length, infos = new Array(_len), _key = 0; _key < _len; _key++) {\n            infos[_key] = arguments[_key];\n          }\n\n          for (j = 0, len = infos.length; j < len; j++) {\n            _info = infos[j];\n            info.size += _info.size;\n\n            if (!_info.isImage) {\n              info.isImage = false;\n            }\n\n            if (!_info.isStored) {\n              info.isStored = false;\n            }\n          }\n\n          return cb(info);\n        });\n      }\n    }, {\n      key: \"__createGroup\",\n      value: function __createGroup() {\n        var _this4 = this;\n\n        var df;\n        df = $__default['default'].Deferred();\n\n        if (this.__fileColl.length()) {\n          this.__fileInfosDf.done(function () {\n            for (var _len2 = arguments.length, infos = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              infos[_key2] = arguments[_key2];\n            }\n\n            var info;\n            return jsonp(\"\".concat(_this4.settings.urlBase, \"/group/\"), 'POST', {\n              pub_key: _this4.settings.publicKey,\n              signature: _this4.settings.secureSignature,\n              expire: _this4.settings.secureExpire,\n              files: function () {\n                var j, len, results;\n                results = [];\n\n                for (j = 0, len = infos.length; j < len; j++) {\n                  info = infos[j];\n                  results.push(\"/\".concat(info.uuid, \"/\").concat(info.cdnUrlModifiers || ''));\n                }\n\n                return results;\n              }()\n            }, {\n              headers: {\n                'X-UC-User-Agent': _this4.settings._userAgent\n              }\n            }).fail(function (reason) {\n              if (_this4.settings.debugUploads) {\n                log(\"Can't create group.\", _this4.settings.publicKey, reason);\n              }\n\n              return df.reject();\n            }).done(df.resolve);\n          });\n        } else {\n          df.reject();\n        }\n\n        return df.promise();\n      }\n    }, {\n      key: \"api\",\n      value: function api() {\n        if (!this.__api) {\n          this.__api = bindAll(this, ['promise', 'files']);\n        }\n\n        return this.__api;\n      }\n    }]);\n\n    return FileGroup;\n  }();\n\n  var SavedFileGroup = /*#__PURE__*/function (_FileGroup) {\n    _inherits(SavedFileGroup, _FileGroup);\n\n    var _super = _createSuper(SavedFileGroup);\n\n    function SavedFileGroup(data, settings) {\n      var _this5;\n\n      _classCallCheck(this, SavedFileGroup);\n\n      var files;\n      files = filesFrom('ready', data.files, settings);\n      _this5 = _super.call(this, files, settings);\n      _this5.__data = data;\n      return _this5;\n    }\n\n    _createClass(SavedFileGroup, [{\n      key: \"__createGroup\",\n      value: function __createGroup() {\n        return wrapToPromise(this.__data);\n      }\n    }]);\n\n    return SavedFileGroup;\n  }(FileGroup$1);\n\n  var FileGroup = function FileGroup() {\n    var filesAndGroups = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var settings = arguments.length > 1 ? arguments[1] : undefined;\n    var file, files, item, j, k, len, len1, ref;\n    files = [];\n\n    for (j = 0, len = filesAndGroups.length; j < len; j++) {\n      item = filesAndGroups[j];\n\n      if (isFile(item)) {\n        files.push(item);\n      } else if (isFileGroup(item)) {\n        ref = item.files();\n\n        for (k = 0, len1 = ref.length; k < len1; k++) {\n          file = ref[k];\n          files.push(file);\n        }\n      }\n    }\n\n    return new FileGroup$1(files, settings).api();\n  };\n\n  var loadFileGroup = function loadFileGroup(groupIdOrUrl, settings) {\n    var df, id;\n    settings = build(settings);\n    df = $__default['default'].Deferred();\n    id = groupIdRegex.exec(groupIdOrUrl);\n\n    if (id) {\n      jsonp(\"\".concat(settings.urlBase, \"/group/info/\"), 'GET', {\n        jsonerrors: 1,\n        pub_key: settings.publicKey,\n        group_id: id[0]\n      }, {\n        headers: {\n          'X-UC-User-Agent': settings._userAgent\n        }\n      }).fail(function (reason) {\n        if (settings.debugUploads) {\n          log(\"Can't load group info. Probably removed.\", id[0], settings.publicKey, reason);\n        }\n\n        return df.reject();\n      }).done(function (data) {\n        var group;\n        group = new SavedFileGroup(data, settings);\n        return df.resolve(group.api());\n      });\n    } else {\n      df.reject();\n    }\n\n    return df.promise();\n  };\n\n  var callbacks = {};\n  isWindowDefined() && $__default['default'](window).on('message', function (_ref) {\n    var e = _ref.originalEvent;\n    var i, item, len, message, ref, results;\n\n    try {\n      message = JSON.parse(e.data);\n    } catch (error) {\n      return;\n    }\n\n    if ((message != null ? message.type : undefined) && message.type in callbacks) {\n      ref = callbacks[message.type];\n      results = [];\n\n      for (i = 0, len = ref.length; i < len; i++) {\n        item = ref[i];\n\n        if (e.source === item[0]) {\n          results.push(item[1](message));\n        } else {\n          results.push(undefined);\n        }\n      }\n\n      return results;\n    }\n  });\n\n  var registerMessage = function registerMessage(type, sender, callback) {\n    if (!(type in callbacks)) {\n      callbacks[type] = [];\n    }\n\n    return callbacks[type].push([sender, callback]);\n  };\n\n  var unregisterMessage = function unregisterMessage(type, sender) {\n    if (type in callbacks) {\n      callbacks[type] = $__default['default'].grep(callbacks[type], function (item) {\n        return item[0] !== sender;\n      });\n      return callbacks[type];\n    }\n  };\n\n  var tabsCss = new CssCollector();\n\n  var RemoteTab = /*#__PURE__*/function () {\n    function RemoteTab(container, tabButton, dialogApi, settings, name1) {\n      var _this = this;\n\n      _classCallCheck(this, RemoteTab);\n\n      this.__createIframe = this.__createIframe.bind(this);\n      this.container = container;\n      this.tabButton = tabButton;\n      this.dialogApi = dialogApi;\n      this.settings = settings;\n      this.name = name1;\n      this.dialogApi.progress(function (name) {\n        if (name === _this.name) {\n          _this.__createIframe();\n\n          _this.container.find('.uploadcare--tab__iframe').focus();\n        }\n\n        return _this.__sendMessage({\n          type: 'visibility-changed',\n          visible: name === _this.name\n        });\n      });\n    }\n\n    _createClass(RemoteTab, [{\n      key: \"remoteUrl\",\n      value: function remoteUrl() {\n        return \"\".concat(this.settings.socialBase, \"/window3/\").concat(this.name, \"?\") + $__default['default'].param({\n          lang: this.settings.locale,\n          public_key: this.settings.publicKey,\n          widget_version: version,\n          images_only: this.settings.imagesOnly,\n          pass_window_open: this.settings.passWindowOpen\n        });\n      }\n    }, {\n      key: \"__sendMessage\",\n      value: function __sendMessage(messageObj) {\n        var ref, ref1;\n        return (ref = this.iframe) != null ? (ref1 = ref[0].contentWindow) != null ? ref1.postMessage(JSON.stringify(messageObj), '*') : undefined : undefined;\n      }\n    }, {\n      key: \"__createIframe\",\n      value: function __createIframe() {\n        var _this2 = this;\n\n        var iframe;\n\n        if (this.iframe) {\n          return;\n        }\n\n        this.iframe = $__default['default']('<iframe>', {\n          src: this.remoteUrl(),\n          marginheight: 0,\n          marginwidth: 0,\n          frameborder: 0,\n          allowTransparency: 'true'\n        }).addClass('uploadcare--tab__iframe').appendTo(this.container).on('load', function () {\n          var i, j, len, len1, ref, ref1, style, url;\n\n          _this2.iframe.css('opacity', '1');\n\n          ref = tabsCss.urls;\n\n          for (i = 0, len = ref.length; i < len; i++) {\n            url = ref[i];\n\n            _this2.__sendMessage({\n              type: 'embed-css',\n              url: url\n            });\n          }\n\n          ref1 = tabsCss.styles;\n\n          for (j = 0, len1 = ref1.length; j < len1; j++) {\n            style = ref1[j];\n\n            _this2.__sendMessage({\n              type: 'embed-css',\n              style: style\n            });\n          }\n        });\n        this.container.addClass('uploadcare--tab_remote');\n        iframe = this.iframe[0].contentWindow;\n        registerMessage('file-selected', iframe, function (message) {\n          var file, sourceInfo, url;\n\n          url = function () {\n            var i, key, len, ref, type;\n\n            if (message.alternatives) {\n              ref = _this2.settings.preferredTypes;\n\n              for (i = 0, len = ref.length; i < len; i++) {\n                type = ref[i];\n                type = globRegexp(type);\n\n                for (key in message.alternatives) {\n                  if (type.test(key)) {\n                    return message.alternatives[key];\n                  }\n                }\n              }\n            }\n\n            return message.url;\n          }();\n\n          sourceInfo = $__default['default'].extend({\n            source: _this2.name\n          }, message.info || {});\n          file = new UrlFile(url, _this2.settings, sourceInfo);\n\n          if (message.filename) {\n            file.setName(message.filename);\n          }\n\n          if (message.is_image != null) {\n            file.setIsImage(message.is_image);\n          }\n\n          return _this2.dialogApi.addFiles([file.promise()]);\n        });\n        registerMessage('open-new-window', iframe, function (message) {\n          var interval, popup, resolve;\n\n          if (_this2.settings.debugUploads) {\n            debug('Open new window message.', _this2.name);\n          }\n\n          popup = window.open(message.url, '_blank');\n\n          if (!popup) {\n            warn(\"Can't open new window. Possible blocked.\", _this2.name);\n            return;\n          }\n\n          resolve = function resolve() {\n            if (_this2.settings.debugUploads) {\n              debug('Window is closed.', _this2.name);\n            }\n\n            return _this2.__sendMessage({\n              type: 'navigate',\n              fragment: ''\n            });\n          }; // Detect is window supports \"closed\".\n          // In browsers we have only \"closed\" property.\n          // In Cordova addEventListener('exit') does work.\n\n\n          if ('closed' in popup) {\n            interval = setInterval(function () {\n              if (popup.closed) {\n                clearInterval(interval);\n                return resolve();\n              }\n            }, 100);\n            return interval;\n          } else {\n            return popup.addEventListener('exit', resolve);\n          }\n        });\n        return this.dialogApi.done(function () {\n          unregisterMessage('file-selected', iframe);\n          return unregisterMessage('open-new-window', iframe);\n        });\n      }\n    }]);\n\n    return RemoteTab;\n  }();\n\n  var _namespace = {\n    version: version,\n    jQuery: $__default['default'],\n    utils: {\n      abilities: {\n        fileAPI: fileAPI,\n        sendFileAPI: sendFileAPI,\n        dragAndDrop: dragAndDrop,\n        canvas: canvas,\n        fileDragAndDrop: fileDragAndDrop,\n        iOSVersion: iOSVersion,\n        Blob: Blob,\n        URL: URL,\n        FileReader: FileReader\n      },\n      Collection: Collection,\n      UniqCollection: UniqCollection,\n      CollectionOfPromises: CollectionOfPromises,\n      imageLoader: imageLoader,\n      videoLoader: videoLoader,\n      log: log,\n      debug: debug,\n      warn: warn,\n      warnOnce: warnOnce,\n      //   commonWarning\n      registerMessage: registerMessage,\n      unregisterMessage: unregisterMessage,\n      unique: unique,\n      defer: defer,\n      gcd: gcd,\n      once: once,\n      wrapToPromise: wrapToPromise,\n      then: then,\n      bindAll: bindAll,\n      upperCase: upperCase,\n      publicCallbacks: publicCallbacks,\n      uuid: uuid,\n      splitUrlRegex: splitUrlRegex,\n      uuidRegex: uuidRegex,\n      groupIdRegex: groupIdRegex,\n      cdnUrlRegex: cdnUrlRegex,\n      splitCdnUrl: splitCdnUrl,\n      escapeRegExp: escapeRegExp,\n      globRegexp: globRegexp,\n      normalizeUrl: normalizeUrl,\n      fitText: fitText,\n      fitSizeInCdnLimit: fitSizeInCdnLimit,\n      fitSize: fitSize,\n      applyCropCoordsToInfo: applyCropCoordsToInfo,\n      fileInput: fileInput,\n      fileSelectDialog: fileSelectDialog,\n      fileSizeLabels: fileSizeLabels,\n      readableFileSize: readableFileSize,\n      ajaxDefaults: ajaxDefaults,\n      jsonp: jsonp,\n      canvasToBlob: canvasToBlob,\n      taskRunner: taskRunner,\n      fixedPipe: fixedPipe,\n      isFile: isFile,\n      valueToFile: valueToFile,\n      image: {\n        shrinkFile: shrinkFile,\n        shrinkImage: shrinkImage,\n        drawFileToCanvas: drawFileToCanvas,\n        readJpegChunks: readJpegChunks,\n        replaceJpegChunk: replaceJpegChunk,\n        getExif: getExif,\n        parseExifOrientation: parseExifOrientation,\n        hasTransparency: hasTransparency\n      },\n      pusher: {\n        getPusher: getPusher\n      },\n      isFileGroup: isFileGroup,\n      valueToGroup: valueToGroup,\n      isFileGroupsEqual: isFileGroupsEqual\n    },\n    settings: {\n      globals: globals,\n      build: build,\n      common: common,\n      waitForSettings: waitForSettings,\n      CssCollector: CssCollector\n    },\n    locale: locale,\n    tabsCss: tabsCss,\n    files: {\n      BaseFile: BaseFile,\n      ObjectFile: ObjectFile,\n      InputFile: InputFile,\n      UrlFile: UrlFile,\n      UploadedFile: UploadedFile,\n      ReadyFile: ReadyFile,\n      FileGroup: FileGroup$1,\n      SavedFileGroup: SavedFileGroup\n    },\n    Pusher: pusher_1,\n    FileGroup: FileGroup,\n    loadFileGroup: loadFileGroup,\n    fileFrom: fileFrom,\n    filesFrom: filesFrom,\n    __exports: {},\n    namespace: function namespace(path, fn) {\n      var target = _namespace;\n\n      if (path) {\n        var ref = path.split('.');\n\n        for (var i = 0, len = ref.length; i < len; i++) {\n          var part = ref[i];\n\n          if (!target[part]) {\n            target[part] = {};\n          }\n\n          target = target[part];\n        }\n      }\n\n      return fn(target);\n    },\n    expose: function expose(key, value) {\n      var parts = key.split('.');\n      var last = parts.pop();\n      var target = _namespace.__exports;\n      var source = _namespace;\n\n      for (var i = 0, len = parts.length; i < len; i++) {\n        var part = parts[i];\n\n        if (!target[part]) {\n          target[part] = {};\n        }\n\n        target = target[part];\n        source = source != null ? source[part] : undefined;\n      }\n\n      target[last] = value || source[last];\n    }\n  };\n\n  function createPlugin(ns) {\n    return function (fn) {\n      return fn(ns);\n    };\n  }\n\n  var plugin$2 = createPlugin(_namespace);\n\n  var uploadcare$2 = {\n    plugin: plugin$2,\n    version: version,\n    jQuery: $__default['default'],\n    // Defaults (not normalized)\n    defaults: _objectSpread2(_objectSpread2({}, defaults$1), {}, {\n      allTabs: presets.tabs.all\n    }),\n    globals: common,\n    start: common,\n    fileFrom: fileFrom,\n    filesFrom: filesFrom,\n    FileGroup: FileGroup,\n    loadFileGroup: loadFileGroup,\n    locales: ['en']\n  };\n\n  var dialog = function dialog() {\n    return \"<div class=\\\"uploadcare--dialog\\\"><div class=\\\"uploadcare--dialog__container\\\"><button type=\\\"button\\\" title=\\\"\".concat(locale.t('dialog.close'), \"\\\" aria-label=\\\"\").concat(locale.t('dialog.close'), \"\\\" class=\\\"uploadcare--button uploadcare--button_icon uploadcare--button_muted uploadcare--dialog__close\\\"><svg role=\\\"presentation\\\" width=\\\"32\\\" height=\\\"32\\\" class=\\\"uploadcare--icon\\\"><use xlink:href=\\\"#uploadcare--icon-close\\\"></use></svg></button><div class=\\\"uploadcare--dialog__placeholder\\\"></div></div><div class=\\\"uploadcare--powered-by uploadcare--dialog__powered-by\\\">\").concat(locale.t('dialog.footer.text'), \" <a class=\\\"uploadcare--link uploadcare--powered-by__link\\\" href=\\\"https://uploadcare.com/uploader/\").concat(version, \"/\\\" target=\\\"_blank\\\"><svg width=\\\"32\\\" height=\\\"32\\\" role=\\\"presentation\\\" class=\\\"uploadcare--icon uploadcare--powered-by__logo\\\"><use xlink:href=\\\"#uploadcare--icon-uploadcare\\\"></use></svg> \").concat(locale.t('dialog.footer.link'), \"</a></div></div>\");\n  };\n\n  var dialogPanel = function dialogPanel() {\n    return \"<div class=\\\"uploadcare--panel\\\"><div class=\\\"uploadcare--menu uploadcare--panel__menu\\\"><button type=\\\"button\\\" title=\\\"\".concat(locale.t('dialog.openMenu'), \"\\\" aria-label=\\\"\").concat(locale.t('dialog.openMenu'), \"\\\" class=\\\"uploadcare--button uploadcare--button_icon uploadcare--button_muted uploadcare--menu__toggle\\\"><svg role=\\\"presentation\\\" width=\\\"32\\\" height=\\\"32\\\" class=\\\"uploadcare--icon uploadcare--menu__toggle-icon uploadcare--menu__toggle-icon_menu\\\"><use xlink:href=\\\"#uploadcare--icon-menu\\\"></use></svg> <svg role=\\\"presentation\\\" width=\\\"32\\\" height=\\\"32\\\" class=\\\"uploadcare--icon uploadcare--menu__toggle-icon uploadcare--menu__toggle-icon_back\\\"><use xlink:href=\\\"#uploadcare--icon-back\\\"></use></svg></button><div class=\\\"uploadcare--menu__items\\\"></div></div><div class=\\\"uploadcare--panel__content\\\"><div class=\\\"uploadcare--footer uploadcare--panel__footer\\\"><div class=\\\"uploadcare--footer__additions uploadcare--panel__message\\\"></div><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--footer__button uploadcare--panel__show-files\\\">\").concat(locale.t('dialog.showFiles'), \"<div class=\\\"uploadcare--panel__file-counter\\\"></div></button> <button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_primary uploadcare--footer__button uploadcare--panel__done\\\">\").concat(locale.t('dialog.done'), \"</button></div><div class=\\\"uploadcare--powered-by uploadcare--panel__powered-by\\\">\").concat(locale.t('dialog.footer.text'), \" <a class=\\\"uploadcare--link uploadcare--powered-by__link\\\" href=\\\"https://uploadcare.com/uploader/\").concat(version, \"/\\\" target=\\\"_blank\\\"><svg width=\\\"32\\\" height=\\\"32\\\" role=\\\"presentation\\\" class=\\\"uploadcare--icon uploadcare--powered-by__logo\\\"><use xlink:href=\\\"#uploadcare--icon-uploadcare\\\"></use></svg> \").concat(locale.t('dialog.footer.link'), \"</a></div></div></div>\");\n  };\n\n  var progressText = function progressText() {\n    return '<div class=\"uploadcare--progress__text-container\"><div class=\"uploadcare--progress__text\"></div></div>';\n  };\n\n  var tabCameraCapture = function tabCameraCapture() {\n    return \"<div class=\\\"uploadcare--tab__content\\\"><div class=\\\"uploadcare--text uploadcare--text_size_large uploadcare--tab__title\\\">\".concat(locale.t('dialog.tabs.camera.title'), \"</div><div class=\\\"uploadcare--camera__controls\\\"><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_size_big uploadcare--button_primary uploadcare--camera__button uploadcare--camera__button_type_photo\\\">\").concat(locale.t('dialog.tabs.camera.capture'), \"</button> <button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_size_big uploadcare--button_primary uploadcare--camera__button uploadcare--camera__button_type_video\\\">\").concat(locale.t('dialog.tabs.camera.startRecord'), \"</button></div></div>\");\n  };\n\n  var tabCamera = function tabCamera() {\n    return \"<div class=\\\"uploadcare--tab__content\\\"><div class=\\\"uploadcare--text uploadcare--text_size_large uploadcare--tab__title\\\">\".concat(locale.t('dialog.tabs.camera.title'), \"</div><div class=\\\"uploadcare--media uploadcare--camera__video-container\\\"><video muted class=\\\"uploadcare--media__video uploadcare--camera__video uploadcare--camera__video_mirrored\\\"></video><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_size_small uploadcare--button_overlay uploadcare--camera__button uploadcare--camera__button_type_mirror\\\">\").concat(locale.t('dialog.tabs.camera.mirror'), \"</button></div><div class=\\\"uploadcare--camera__controls\\\"><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_primary uploadcare--camera__button uploadcare--camera__button_type_start-record\\\">\").concat(locale.t('dialog.tabs.camera.startRecord'), \"</button> <button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_primary uploadcare--camera__button uploadcare--camera__button_type_capture\\\">\").concat(locale.t('dialog.tabs.camera.capture'), \"</button> <button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--camera__button uploadcare--camera__button_type_cancel-record\\\">\").concat(locale.t('dialog.tabs.camera.cancelRecord'), \"</button> <button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_primary uploadcare--camera__button uploadcare--camera__button_type_stop-record\\\">\").concat(locale.t('dialog.tabs.camera.stopRecord'), \"</button></div><div class=\\\"uploadcare--camera__please-allow\\\"><div class=\\\"uploadcare--text uploadcare--text_size_medium\\\">\").concat(locale.t('dialog.tabs.camera.pleaseAllow.title'), \"</div><div class=\\\"uploadcare--text\\\">\").concat(locale.t('dialog.tabs.camera.pleaseAllow.text'), \"</div></div><div class=\\\"uploadcare--camera__not-found\\\"><div class=\\\"uploadcare--text uploadcare--text_size_medium\\\">\").concat(locale.t('dialog.tabs.camera.notFound.title'), \"</div><div class=\\\"uploadcare--text\\\">\").concat(locale.t('dialog.tabs.camera.notFound.text'), \"</div></div><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--camera__button uploadcare--camera__button_type_retry\\\">\").concat(locale.t('dialog.tabs.camera.retry'), \"</button></div>\");\n  };\n\n  var tabFile = function tabFile() {\n    return \"<div class=\\\"uploadcare--tab__content uploadcare--draganddrop\\\"><div class=\\\"uploadcare--text uploadcare--text_size_extra-large uploadcare--dragging__show\\\">\".concat(locale.t('draghere'), \"</div><div class=\\\"uploadcare--draganddrop__title uploadcare--dragging__hide\\\"><div class=\\\"uploadcare--draganddrop__supported\\\"><div class=\\\"uploadcare--text uploadcare--text_size_extra-large\\\">\").concat(locale.t('dialog.tabs.file.drag'), \"</div><div class=\\\"uploadcare--text uploadcare--text_size_small uploadcare--text_muted\\\">\").concat(locale.t('dialog.tabs.file.or'), \"</div></div><div class=\\\"uploadcare--text uploadcare--text_size_large uploadcare--draganddrop__not-supported\\\">\").concat(locale.t('dialog.tabs.file.nodrop'), \"</div></div><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_size_big uploadcare--button_primary uploadcare--tab__action-button needsclick uploadcare--dragging__hide\\\">\").concat(locale.t('dialog.tabs.file.button'), \"</button><div class=\\\"uploadcare--file-sources uploadcare--dragging__hide\\\"><div class=\\\"uploadcare--text uploadcare--text_size_small uploadcare--text_muted uploadcare--file-sources__caption\\\">\").concat(locale.t('dialog.tabs.file.also'), \"</div><div class=\\\"uploadcare--file-sources__items\\\"><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_icon uploadcare--file-source uploadcare--file-source_all uploadcare--file-sources_item\\\"><svg role=\\\"presentation\\\" width=\\\"32\\\" height=\\\"32\\\" class=\\\"uploadcare--icon\\\"><use xlink:href=\\\"#uploadcare--icon-more\\\"></use></svg></button></div></div></div>\");\n  };\n\n  var tabPreviewError = function tabPreviewError(_ref) {\n    var error = _ref.error;\n    return \"<div class=\\\"uploadcare--tab__content uploadcare--preview__content uploadcare--error\\\"><div class=\\\"uploadcare--text uploadcare--text_size_large uploadcare--tab__title uploadcare--preview__title\\\">\".concat(locale.t('dialog.tabs.preview.error.' + error + '.title') || locale.t('dialog.tabs.preview.error.default.title'), \"</div><div class=\\\"uploadcare--text\\\">\").concat(locale.t('dialog.tabs.preview.error.' + error + '.text') || locale.t('dialog.tabs.preview.error.default.text'), \"</div><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--preview__back\\\">\").concat(locale.t('dialog.tabs.preview.error.' + error + '.back') || locale.t('dialog.tabs.preview.error.default.back'), \"</button></div>\");\n  };\n\n  /*!\n   * escape-html\n   * Copyright(c) 2012-2013 TJ Holowaychuk\n   * Copyright(c) 2015 Andreas Lubbe\n   * Copyright(c) 2015 Tiancheng \"Timothy\" Gu\n   * MIT Licensed\n   */\n\n  /**\n   * Module variables.\n   * @private\n   */\n\n  var matchHtmlRegExp = /[\"'&<>]/;\n\n  /**\n   * Module exports.\n   * @public\n   */\n\n  var escapeHtml_1 = escapeHtml;\n\n  /**\n   * Escape special characters in the given string of html.\n   *\n   * @param  {string} string The string to escape for inserting into HTML\n   * @return {string}\n   * @public\n   */\n\n  function escapeHtml(string) {\n    var str = '' + string;\n    var match = matchHtmlRegExp.exec(str);\n\n    if (!match) {\n      return str;\n    }\n\n    var escape;\n    var html = '';\n    var index = 0;\n    var lastIndex = 0;\n\n    for (index = match.index; index < str.length; index++) {\n      switch (str.charCodeAt(index)) {\n        case 34: // \"\n          escape = '&quot;';\n          break;\n        case 38: // &\n          escape = '&amp;';\n          break;\n        case 39: // '\n          escape = '&#39;';\n          break;\n        case 60: // <\n          escape = '&lt;';\n          break;\n        case 62: // >\n          escape = '&gt;';\n          break;\n        default:\n          continue;\n      }\n\n      if (lastIndex !== index) {\n        html += str.substring(lastIndex, index);\n      }\n\n      lastIndex = index + 1;\n      html += escape;\n    }\n\n    return lastIndex !== index\n      ? html + str.substring(lastIndex, index)\n      : html;\n  }\n\n  var tabPreviewImage = function tabPreviewImage(_ref) {\n    var src = _ref.src,\n        _ref$name = _ref.name,\n        name = _ref$name === void 0 ? '' : _ref$name,\n        crop = _ref.crop;\n    return \"<div class=\\\"uploadcare--tab__header\\\"><div class=\\\"uploadcare--text uploadcare--text_size_large uploadcare--tab__title uploadcare--preview__title\\\">\".concat(locale.t('dialog.tabs.preview.image.title'), \"</div></div><div class=\\\"uploadcare--tab__content uploadcare--preview__content\\\"><div class=\\\"uploadcare--media\\\"><img src=\\\"\").concat(src, \"\\\" title=\\\"\").concat(escapeHtml_1(name), \"\\\" alt=\\\"\").concat(escapeHtml_1(name), \"\\\" class=\\\"uploadcare--media__image uploadcare--preview__image\\\"></div></div><div class=\\\"uploadcare--footer uploadcare--tab__footer\\\"><div class=\\\"uploadcare--footer__additions\\\">\").concat(crop ? '<div class=\"uploadcare--crop-sizes\"><div role=\"button\" tabindex=\"0\" class=\"uploadcare--button uploadcare--button_icon uploadcare--crop-sizes__item\" data-caption=\"free\"><div class=\"uploadcare--crop-sizes__icon\"></div></div></div>' : '', \"</div><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--footer__button uploadcare--preview__back\\\">\").concat(locale.t('dialog.tabs.preview.image.change'), \"</button> <button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_primary uploadcare--footer__button uploadcare--preview__done\\\">\").concat(locale.t('dialog.tabs.preview.done'), \"</button></div>\");\n  };\n\n  var tabPreviewMultipleFile = function tabPreviewMultipleFile() {\n    return \"<div class=\\\"uploadcare--file uploadcare--files__item uploadcare--file_status_uploading\\\"><div class=\\\"uploadcare--file__description\\\" tabindex=\\\"0\\\"><div class=\\\"uploadcare--file__preview\\\"></div><div class=\\\"uploadcare--file__name\\\">\".concat(locale.t('dialog.tabs.preview.unknownName'), \"</div><div class=\\\"uploadcare--file__size\\\"></div><div class=\\\"uploadcare--file__error\\\"></div></div><div class=\\\"uploadcare--file__progressbar\\\"><div class=\\\"uploadcare--progressbar\\\"><div class=\\\"uploadcare--progressbar__value\\\"></div></div></div><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_icon uploadcare--button_muted uploadcare--file__remove\\\"><svg role=\\\"presentation\\\" width=\\\"32\\\" height=\\\"32\\\" class=\\\"uploadcare--icon\\\"><use xlink:href=\\\"#uploadcare--icon-remove\\\"></use></svg></button></div>\");\n  };\n\n  var tabPreviewMultiple = function tabPreviewMultiple() {\n    return \"<div class=\\\"uploadcare--tab__header\\\"><div id=\\\"preview__title\\\" class=\\\"uploadcare--text uploadcare--text_size_large uploadcare--tab__title uploadcare--preview__title\\\" role=\\\"status\\\" aria-live=\\\"assertive\\\"></div></div><div class=\\\"uploadcare--tab__content uploadcare--preview__content\\\"><div class=\\\"uploadcare--files\\\"></div></div><div class=\\\"uploadcare--footer uploadcare--tab__footer\\\"><div class=\\\"uploadcare--footer__additions uploadcare--preview__message\\\"></div><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--footer__button uploadcare--preview__back\\\">\".concat(locale.t('dialog.tabs.preview.multiple.clear'), \"</button> <button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_primary uploadcare--footer__button uploadcare--preview__done\\\" aria-describedby=\\\"preview_title\\\">\").concat(locale.t('dialog.tabs.preview.multiple.done'), \"</button></div>\");\n  };\n\n  var tabPreviewRegular = function tabPreviewRegular(_ref) {\n    var file = _ref.file;\n    return \"<div class=\\\"uploadcare--tab__header\\\"><div id=\\\"tab__title\\\" class=\\\"uploadcare--text uploadcare--text_size_large uploadcare--tab__title\\\" role=\\\"status\\\" aria-live=\\\"assertive\\\">\".concat(locale.t('dialog.tabs.preview.regular.title'), \"</div></div><div class=\\\"uploadcare--tab__content uploadcare--preview__content\\\"><div class=\\\"uploadcare--text uploadcare--preview__file-name\\\">\").concat(escapeHtml_1(file.name) || locale.t('dialog.tabs.preview.unknownName'), \" \").concat(readableFileSize(file.size, '', ', '), \"</div></div><div class=\\\"uploadcare--footer uploadcare--tab__footer\\\"><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--footer__button uploadcare--preview__back\\\">\").concat(locale.t('dialog.tabs.preview.change'), \"</button> <button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_primary uploadcare--footer__button uploadcare--preview__done\\\" aria-describedby=\\\"tab__title\\\">\").concat(locale.t('dialog.tabs.preview.done'), \"</button></div>\");\n  };\n\n  var tabPreviewUnknown = function tabPreviewUnknown() {\n    return \"<div class=\\\"uploadcare--tab__header\\\"><div class=\\\"uploadcare--text uploadcare--text_size_large uploadcare--tab__title uploadcare--preview__title\\\">\".concat(locale.t('dialog.tabs.preview.unknown.title'), \"</div></div><div class=\\\"uploadcare--tab__content uploadcare--preview__content\\\"><div class=\\\"uploadcare--text uploadcare--preview__file-name\\\"></div></div><div class=\\\"uploadcare--footer uploadcare--tab__footer\\\"><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--footer__button uploadcare--preview__back\\\">\").concat(locale.t('dialog.tabs.preview.change'), \"</button> <button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_primary uploadcare--footer__button uploadcare--preview__done\\\">\").concat(locale.t('dialog.tabs.preview.unknown.done'), \"</button></div>\");\n  };\n\n  var tabPreviewVideo = function tabPreviewVideo() {\n    return \"<div class=\\\"uploadcare--tab__header\\\"><div class=\\\"uploadcare--text uploadcare--text_size_large uploadcare--tab__title uploadcare--preview__title\\\">\".concat(locale.t('dialog.tabs.preview.video.title'), \"</div></div><div class=\\\"uploadcare--tab__content uploadcare--preview__content\\\"><div class=\\\"uploadcare--media\\\"><video controls class=\\\"uploadcare--media__video uploadcare--preview__video\\\"></video></div></div><div class=\\\"uploadcare--footer uploadcare--tab__footer\\\"><button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--footer__button uploadcare--preview__back\\\">\").concat(locale.t('dialog.tabs.preview.video.change'), \"</button> <button type=\\\"button\\\" class=\\\"uploadcare--button uploadcare--button_primary uploadcare--footer__button uploadcare--preview__done\\\">\").concat(locale.t('dialog.tabs.preview.done'), \"</button></div>\");\n  };\n\n  var tabUrl = function tabUrl() {\n    return \"<div class=\\\"uploadcare--tab__content\\\"><div class=\\\"uploadcare--text uploadcare--text_size_large uploadcare--tab__title\\\">\".concat(locale.t('dialog.tabs.url.title'), \"</div><div class=\\\"uploadcare--text\\\">\").concat(locale.t('dialog.tabs.url.line1'), \"</div><div class=\\\"uploadcare--text\\\">\").concat(locale.t('dialog.tabs.url.line2'), \"</div><form class=\\\"uploadcare--form\\\"><input type=\\\"text\\\" class=\\\"uploadcare--input\\\" placeholder=\\\"\").concat(locale.t('dialog.tabs.url.input'), \"\\\"> <button type=\\\"submit\\\" class=\\\"uploadcare--button uploadcare--button_primary uploadcare--tab__action-button\\\" type=\\\"submit\\\">\").concat(locale.t('dialog.tabs.url.button'), \"</button></form></div>\");\n  };\n\n  var widgetButton = function widgetButton(_ref) {\n    var caption = _ref.caption,\n        name = _ref.name;\n    return \"<button type=\\\"button\\\" class=\\\"uploadcare--widget__button uploadcare--widget__button_type_\".concat(name, \"\\\">\").concat(caption, \"</button>\");\n  };\n\n  var widgetFileName = function widgetFileName(_ref) {\n    var name = _ref.name,\n        size = _ref.size;\n    return \"<div class=\\\"uploadcare--link uploadcare--widget__file-name\\\" tabindex=\\\"0\\\" role=\\\"link\\\">\".concat(escapeHtml_1(fitText(name, 20)), \"</div><div class=\\\"uploadcare--widget__file-size\\\">, \").concat(readableFileSize(size), \"</div>\");\n  };\n\n  var widget = function widget() {\n    return \"<div class=\\\"uploadcare--widget\\\" aria-describedby=\\\"uploadcare--widget__text uploadcare--widget__progress\\\"><div class=\\\"uploadcare--widget__dragndrop-area\\\">\".concat(locale.t('draghere'), \"</div><div id=\\\"uploadcare--widget__progress\\\" class=\\\"uploadcare--widget__progress\\\" role=\\\"progressbar\\\" aria-valuenow=\\\"0\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\"></div><div id=\\\"uploadcare--widget__text\\\" class=\\\"uploadcare--widget__text\\\" aria-live=\\\"polite\\\"></div></div>\");\n  };\n\n  var _styles = \".uploadcare--jcrop-handle{box-sizing:border-box;padding:12.5px;width:45px;height:45px;background:transparent;z-index:2147483621}@media (min-width:760px){.uploadcare--jcrop-handle{height:35px;width:35px;padding:10px}}.uploadcare--jcrop-handle:before{content:\\\"\\\";display:block;width:20px;height:20px;background:#fff;box-shadow:inset 0 0 0 1px rgba(0,0,0,.2);border-radius:50%}@media (min-width:760px){.uploadcare--jcrop-handle:before{height:15px;width:15px}}.uploadcare--jcrop-handle.ord-nw{margin-top:-22.5px;margin-left:-22.5px;top:0;left:0}@media (min-width:760px){.uploadcare--jcrop-handle.ord-nw{margin-left:-17.5px;margin-top:-17.5px}}.uploadcare--jcrop-handle.ord-ne{margin-top:-22.5px;margin-right:-22.5px;top:0;right:0}@media (min-width:760px){.uploadcare--jcrop-handle.ord-ne{margin-right:-17.5px;margin-top:-17.5px}}.uploadcare--jcrop-handle.ord-se{margin-bottom:-22.5px;margin-right:-22.5px;bottom:0;right:0}@media (min-width:760px){.uploadcare--jcrop-handle.ord-se{margin-right:-17.5px;margin-bottom:-17.5px}}.uploadcare--jcrop-handle.ord-sw{margin-bottom:-22.5px;margin-left:-22.5px;bottom:0;left:0}@media (min-width:760px){.uploadcare--jcrop-handle.ord-sw{margin-left:-17.5px;margin-bottom:-17.5px}}.uploadcare--jcrop-hline{width:100%;height:1px!important;background-color:#fff;box-shadow:0 0 0 1px rgba(0,0,0,.2);z-index:2147483620}.uploadcare--jcrop-hline.bottom{bottom:0}.uploadcare--jcrop-vline{width:1px!important;height:100%;background-color:#fff;box-shadow:0 0 0 1px rgba(0,0,0,.2);z-index:2147483620}.uploadcare--jcrop-vline.right{right:0}.uploadcare--jcrop-tracker{height:100%;width:100%;-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.uploadcare--jcrop-holder img{max-width:none;max-height:none}.uploadcare--text{margin:0 0 10px;padding:0;font-size:17.5px;line-height:25px}.uploadcare--text:empty{display:none}.uploadcare--text_muted{color:#a4a2a1}.uploadcare--text_pre{box-sizing:border-box;overflow-x:auto;padding:20px;max-width:100%;background:#e3e1e1;font-family:monospace;white-space:pre;text-align:left}.uploadcare--text_size_small{font-size:15px;line-height:20px}.uploadcare--text_size_medium{font-size:20px;font-weight:700;line-height:25px}.uploadcare--text_size_large{font-size:22px;font-weight:700;line-height:25px}.uploadcare--text_size_extra-large{font-size:35px;line-height:45px}@media (min-width:760px){.uploadcare--text_size_extra-large{font-size:42.5px;line-height:50px}}.uploadcare--icon{all:initial;color:inherit;fill:currentColor;margin:0;padding:0;max-width:100%;width:32px;height:32px;cursor:inherit}.uploadcare--link,.uploadcare--link:link,.uploadcare--link:visited{cursor:pointer;color:#157cfc;text-decoration:underline}.uploadcare--link:focus,.uploadcare--link:hover{color:#3891ff;text-decoration:none}.uploadcare--link:focus{outline:2px solid rgba(21,124,252,.5);outline-offset:1px}.uploadcare--link:active{color:#0969ee}.uploadcare--button{all:initial;-ms-flex-negative:0;flex-shrink:0;display:inline-block;overflow:hidden;box-sizing:border-box;margin:0;padding:10px;width:auto;min-width:100px;height:auto;min-height:0;border-radius:6px;border:1px solid #157cfc;background:transparent;color:#157cfc;cursor:default;white-space:nowrap;text-overflow:ellipsis;text-align:center;font-family:inherit;font-size:15px;font-weight:400;font-style:normal;line-height:20px;box-shadow:none;text-shadow:none;transition:background .3s,color .3s,border .3s}.uploadcare--button svg{pointer-events:none}.uploadcare--button:focus,.uploadcare--button:hover{background:transparent;border-color:#3891ff;color:#3891ff;font-weight:400;font-style:normal;box-shadow:none;text-shadow:none}.uploadcare--button:focus{outline:2px solid rgba(21,124,252,.5);outline-offset:1px}.uploadcare--button:active{border-color:#0969ee;color:#0969ee}.uploadcare--button:disabled,.uploadcare--button[aria-disabled=true]{background:transparent!important;border-color:#d4d2d2!important;color:#d4d2d2!important;cursor:not-allowed}@media (min-width:760px){.uploadcare--button{padding:10px 20px;font-size:17.5px;line-height:25px}}.uploadcare--button_icon{padding:14px;min-width:0;width:60px;height:60px}.uploadcare--button_muted{border-color:transparent!important;color:#a4a2a1;border-radius:0}.uploadcare--button_muted:focus,.uploadcare--button_muted:hover{color:#157cfc}.uploadcare--button_muted:disabled,.uploadcare--button_muted[aria-disabled=true]{border-color:transparent!important}.uploadcare--button_overlay{background:rgba(53,53,53,.5);border-color:transparent;color:#fff}.uploadcare--button_overlay:focus,.uploadcare--button_overlay:hover{background:hsla(0,0%,40%,.5);border-color:transparent;color:#fff}.uploadcare--button_overlay:active{background:rgba(33,33,33,.5)}.uploadcare--button_primary{background:#157cfc;border-color:#157cfc;color:#fff}.uploadcare--button_primary:focus,.uploadcare--button_primary:hover{background:#3891ff;border-color:#3891ff;color:#fff}.uploadcare--button_primary:active{background:#0969ee;border-color:#0969ee}.uploadcare--button_primary:disabled,.uploadcare--button_primary[aria-disabled=true]{background:#d4d2d2!important;border-color:#d4d2d2!important;color:#fff!important}.uploadcare--button_size_big{padding:10px 25px;font-size:20px;line-height:30px}.uploadcare--button_size_small{padding:5px 10px;min-width:80px;font-size:15px;line-height:20px}.uploadcare--input{-webkit-appearance:none;-moz-appearance:none;appearance:none;-ms-flex-negative:0;flex-shrink:0;display:block;box-sizing:border-box;margin:5px 0 15px;padding:10px 15px;width:100%;font-size:17.5px;line-height:25px;background:#fff;color:#353535;border:1px solid #a4a2a1;border-radius:2px;box-shadow:none}.uploadcare--input:focus{outline:2px solid rgba(21,124,252,.5);outline-offset:1px}.uploadcare--input::-webkit-input-placeholder{color:#a4a2a1}.uploadcare--input::-ms-input-placeholder{color:#a4a2a1}.uploadcare--input::placeholder{color:#a4a2a1}.uploadcare--form{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;box-sizing:border-box;max-width:400px;width:100%}.uploadcare--error{color:#e66a6a}.uploadcare--powered-by{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;padding:7.5px 0;font-size:12.5px;line-height:15px;color:#fff;text-align:center}.uploadcare--powered-by__link{display:-ms-inline-flexbox;display:inline-flex;color:inherit!important;text-decoration:none!important}.uploadcare--powered-by__logo{display:-ms-inline-flexbox;display:inline-flex;width:20px;height:15px;vertical-align:text-bottom}.uploadcare--progress__canvas{width:100%;height:100%}.uploadcare--progress__text{display:table-cell;vertical-align:middle;text-align:center;font-size:60%;line-height:1}.uploadcare--progress__text-container{width:100%;height:100%;display:table;white-space:normal}.uploadcare--progress_type_canvas{padding:2px;width:32px;height:32px;color:#ffd800;border-color:#e3e1e1}.uploadcare--progressbar{overflow:hidden;width:100%;height:100%;background:#e3e1e1;border-radius:6px}.uploadcare--progressbar__value{width:0;height:100%;background:#ffd800}.uploadcare--menu{-ms-flex-negative:0;flex-shrink:0;width:100%;width:100vw;max-width:100%;height:100%;overflow:hidden}@media (min-width:760px){.uploadcare--menu{width:60px}}@media (max-width:759px){.uploadcare--menu{height:60px}}.uploadcare--menu__icon{-ms-flex-negative:0;flex-shrink:0;margin:14px}@media (max-width:759px){.uploadcare--menu:not(.uploadcare--menu_opened) .uploadcare--menu__item_current:not(.uploadcare--menu__item_tab_file) .uploadcare--menu__icon{position:absolute;top:0;left:50%;transform:translateX(-50%);margin-left:0}}.uploadcare--menu__item{-ms-flex-negative:0;flex-shrink:0;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;width:100vw;height:60px;overflow:hidden;cursor:default;background:#e3e1e1;color:#666;transition:background .3s,color .3s}@media (min-width:760px){.uploadcare--menu__item{width:60px}}.uploadcare--menu__item:focus,.uploadcare--menu__item:hover{color:#157cfc}.uploadcare--menu__item:active{background-color:#fff;color:#0969ee}.uploadcare--menu__item:focus{outline:none;box-shadow:inset 0 0 0 2px rgba(21,124,252,.5)}.uploadcare--menu__item[aria-disabled=true]{background:#e3e1e1!important;color:#666!important;cursor:not-allowed}.uploadcare--menu__item:after{content:attr(title);-ms-flex-negative:0;flex-shrink:0;display:-ms-flexbox;display:flex;height:30px;font-size:17px;line-height:30px;white-space:nowrap}@media (min-width:760px){.uploadcare--menu__item:after{overflow:hidden;max-width:170px;text-overflow:ellipsis}}.uploadcare--menu__item_current,.uploadcare--menu__item_current:active,.uploadcare--menu__item_current:focus,.uploadcare--menu__item_current:hover{background-color:#fff;color:#353535}.uploadcare--menu__item_hidden{display:none}.uploadcare--menu__items{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;width:100%;height:100%;padding-right:100vw;overflow-y:auto;overflow-x:hidden;background:#e3e1e1}.uploadcare--menu__toggle{width:60px;height:60px;transition:none}.uploadcare--menu__toggle:focus{outline-offset:-2px}@media (min-width:760px){.uploadcare--menu__toggle{display:none}}@media (max-width:759px){.uploadcare--menu:not(.uploadcare--menu_opened) .uploadcare--menu__toggle-icon_back{display:none}}@media (max-width:759px){.uploadcare--menu_opened{position:relative;z-index:1000;height:100%}.uploadcare--menu_opened .uploadcare--menu__toggle{-ms-flex-pack:start;justify-content:flex-start;width:100%;text-align:left;background:#e3e1e1}.uploadcare--menu_opened .uploadcare--menu__toggle-icon_menu{display:none}.uploadcare--menu_opened .uploadcare--menu__items{height:calc(100% - 60px)}}.uploadcare--footer{-ms-flex-negative:0;flex-shrink:0;display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:center;align-items:center;box-sizing:border-box;width:100%;margin-top:10px;padding:5px 20px 15px}@media (max-width:759px) and (orientation:portrait){.uploadcare--footer{display:block}}.uploadcare--footer:empty{display:none}.uploadcare--footer__additions{-ms-flex-positive:1;flex-grow:1;-ms-flex-order:1;order:1;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;box-sizing:border-box;padding:0 0 15px;text-align:center}@media (max-width:759px) and (orientation:landscape){.uploadcare--footer__additions{padding:0 20px}}@media (max-width:500px) and (orientation:landscape){.uploadcare--footer__additions{display:none}}@media (min-width:760px){.uploadcare--footer__additions{padding:0 20px}}.uploadcare--footer__additions:empty{visibility:hidden;padding:0}.uploadcare--footer__button{margin-top:5px;margin-bottom:5px}.uploadcare--footer__button:first-of-type{-ms-flex-order:0;order:0}.uploadcare--footer__button:nth-of-type(2){-ms-flex-order:2;order:2}@media (max-width:759px){.uploadcare--footer__button{max-width:calc(50% - 20px)}}@media (max-width:759px) and (orientation:portrait){.uploadcare--footer__button:first-of-type{float:left}.uploadcare--footer__button:nth-of-type(2){float:right}}.uploadcare--dragging .uploadcare--draganddrop{margin:20px;background:#e3e1e1;color:#a4a2a1;border:2px dashed;border-radius:20px}.uploadcare--draganddrop.uploadcare--dragging{color:#157cfc!important}@media (max-width:759px){.uploadcare--draganddrop__title{display:none}}.uploadcare--draganddrop:not(.uploadcare--draganddrop_supported) .uploadcare--draganddrop__supported,.uploadcare--draganddrop_supported .uploadcare--draganddrop__not-supported,.uploadcare--dragging .uploadcare--dialog__close,.uploadcare--dragging__show{display:none}.uploadcare--dragging .uploadcare--dragging__show{display:block}.uploadcare--dragging .uploadcare--dragging__hide{display:none}.uploadcare--file{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:justify;justify-content:space-between;box-sizing:border-box;padding:5px 0 5px 20px;color:#353535;cursor:default}.uploadcare--file:hover{background:rgba(21,124,252,.1)}.uploadcare--file__description{-ms-flex-positive:1;flex-grow:1;min-width:0;padding-right:20px;text-align:left}.uploadcare--file__description:focus,.uploadcare--file__description:focus .uploadcare--file__preview,.uploadcare--file__description:hover,.uploadcare--file__description:hover .uploadcare--file__preview{color:#157cfc}.uploadcare--file__description:active,.uploadcare--file__description:active .uploadcare--file__preview{color:#0969ee}.uploadcare--file__description:focus{outline:2px solid rgba(21,124,252,.5);outline-offset:2px}.uploadcare--file__icon{max-width:100%;max-height:100%}.uploadcare--file__name{overflow:hidden;margin:0;max-width:calc(100vw - 200px);line-height:25px;white-space:nowrap;text-overflow:ellipsis;transition:color .3s}@media (min-width:760px){.uploadcare--file__name{max-width:350px}}.uploadcare--file__preview{-ms-flex-negative:0;flex-shrink:0;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;float:left;box-sizing:border-box;margin-right:10px;padding:2px;width:60px;height:60px;overflow:hidden;border:1px solid;border-radius:6px;background:transparent;color:#e3e1e1;transition:border .3s}.uploadcare--file__progressbar{-ms-flex-negative:0;flex-shrink:0;-ms-flex-item-align:center;align-self:center;margin:0 10px;width:60px;height:10px}.uploadcare--file__size{font-size:12.5px;color:#a4a2a1}.uploadcare--file_status_error,.uploadcare--file_status_error .uploadcare--file__description,.uploadcare--file_status_error .uploadcare--file__preview{color:#e66a6a!important}.uploadcare--file_status_error .uploadcare--file__name{color:rgba(230,106,106,.5)!important}.uploadcare--file_status_error .uploadcare--file__progressbar,.uploadcare--file_status_error .uploadcare--file__size,.uploadcare--file_status_uploaded .uploadcare--file__progressbar{display:none}.uploadcare--file_status_uploading,.uploadcare--file_status_uploading .uploadcare--file__description{color:#353535!important}.uploadcare--file_status_uploading .uploadcare--file__name{max-width:calc(100vw - 280px)}@media (min-width:760px){.uploadcare--file_status_uploading .uploadcare--file__name{max-width:270px}}.uploadcare--file_status_uploading .uploadcare--file__preview{background:#ffd800;color:#ffd800!important}.uploadcare--files{-ms-flex-positive:1;flex-grow:1;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;overflow:auto;width:100%;height:100%}.uploadcare--files__item{-ms-flex-negative:0;flex-shrink:0}.uploadcare--crop-sizes{-ms-flex-positive:1;flex-grow:1;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around}.uploadcare--crop-sizes__item{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:end;justify-content:flex-end;-ms-flex-align:center;align-items:center;padding:0;height:65px;background:transparent;border-color:transparent;color:#353535}.uploadcare--crop-sizes__item:focus,.uploadcare--crop-sizes__item:hover{background:transparent;border-color:transparent;color:#157cfc}.uploadcare--crop-sizes__item:active{background:transparent;border-color:transparent;color:#0969ee}.uploadcare--crop-sizes__item:disabled,.uploadcare--crop-sizes__item[aria-disabled=true]{border-color:transparent!important}.uploadcare--crop-sizes__item:after{content:attr(data-caption);display:block;font-size:14px;line-height:25px;text-transform:uppercase}@media (max-width:400px),(max-width:600px) and (orientation:landscape){.uploadcare--crop-sizes__item:after{font-size:12px}}.uploadcare--crop-sizes__item:before{content:\\\"\\\";display:block;-ms-flex-order:1;order:1;margin:1px 0;width:6px;height:6px;background:transparent;border-radius:50%}.uploadcare--crop-sizes__item_current:active,.uploadcare--crop-sizes__item_current:focus,.uploadcare--crop-sizes__item_current:hover{color:#353535}.uploadcare--crop-sizes__item_current:before{background:#157cfc}.uploadcare--crop-sizes__icon{box-sizing:border-box;width:30px;height:30px;border:2px solid;border-radius:2px;color:inherit;transform:scale(.666)}.uploadcare--crop-sizes__icon_free{border:none;border-radius:0;transform:none}.uploadcare--file-source{margin:10px;border-color:#e3e1e1;background:#e3e1e1;color:#353535}.uploadcare--file-source_all{-ms-flex-order:1;order:1;border-color:currentColor;background:transparent;color:#157cfc}.uploadcare--file-sources{-ms-flex-negative:0;flex-shrink:0;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;width:100%}@media (max-width:759px) and (max-height:450px),(min-width:760px){.uploadcare--file-sources{display:none}}.uploadcare--file-sources__caption{margin:15px 0 5px}@media (max-width:759px) and (max-height:550px){.uploadcare--file-sources__item:nth-child(4),.uploadcare--file-sources__item:nth-child(5),.uploadcare--file-sources__item:nth-child(6){display:none}}.uploadcare--file-sources__items{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-pack:center;justify-content:center;max-width:300px}.uploadcare--file-sources__items:empty,.uploadcare--file-sources__items:not(.uploadcare--file-sources__items_many) .uploadcare--file-source__all{display:none}.uploadcare--media{-ms-flex-positive:1;flex-grow:1;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;position:relative;width:100%}.uploadcare--media__image{position:absolute;top:50%;left:50%;max-width:100%;max-height:100%;transform:translateX(-50%) translateY(-50%)}.uploadcare--media__video{all:initial;width:auto;max-width:100%;height:auto;min-height:100px;max-height:100%}@media (max-width:759px) and (max-height:379px){.uploadcare--media__video{max-height:120px}}@media (max-width:759px) and (min-height:380px) and (max-height:499px){.uploadcare--media__video{max-height:160px}}@media (max-width:759px) and (min-height:500px),(min-width:760px){.uploadcare--media__video{max-height:300px}}.uploadcare--camera__button{margin:5px 10px}.uploadcare--camera__button_type_mirror{position:absolute;top:15px;left:50%;margin:0;transform:translateX(-50%)}.uploadcare--camera__video{transition:transform .8s cubic-bezier(.23,1,.32,1)}.uploadcare--camera__video_mirrored{transform:scaleX(-1)}.uploadcare--camera__video-container{-ms-flex-positive:0;flex-grow:0;position:relative;margin-bottom:10px}.uploadcare--camera_status_denied .uploadcare--camera__button_type_cancel-record,.uploadcare--camera_status_denied .uploadcare--camera__button_type_capture,.uploadcare--camera_status_denied .uploadcare--camera__button_type_mirror,.uploadcare--camera_status_denied .uploadcare--camera__button_type_start-record,.uploadcare--camera_status_denied .uploadcare--camera__button_type_stop-record,.uploadcare--camera_status_denied .uploadcare--camera__controls,.uploadcare--camera_status_denied .uploadcare--camera__not-found,.uploadcare--camera_status_denied .uploadcare--camera__please-allow,.uploadcare--camera_status_denied .uploadcare--camera__video-container,.uploadcare--camera_status_not-founded .uploadcare--camera__button_type_cancel-record,.uploadcare--camera_status_not-founded .uploadcare--camera__button_type_capture,.uploadcare--camera_status_not-founded .uploadcare--camera__button_type_mirror,.uploadcare--camera_status_not-founded .uploadcare--camera__button_type_retry,.uploadcare--camera_status_not-founded .uploadcare--camera__button_type_start-record,.uploadcare--camera_status_not-founded .uploadcare--camera__button_type_stop-record,.uploadcare--camera_status_not-founded .uploadcare--camera__controls,.uploadcare--camera_status_not-founded .uploadcare--camera__please-allow,.uploadcare--camera_status_not-founded .uploadcare--camera__video-container,.uploadcare--camera_status_ready .uploadcare--camera__button_type_cancel-record,.uploadcare--camera_status_ready .uploadcare--camera__button_type_retry,.uploadcare--camera_status_ready .uploadcare--camera__button_type_stop-record,.uploadcare--camera_status_ready .uploadcare--camera__not-found,.uploadcare--camera_status_ready .uploadcare--camera__please-allow,.uploadcare--camera_status_recording .uploadcare--camera__button_type_capture,.uploadcare--camera_status_recording .uploadcare--camera__button_type_mirror,.uploadcare--camera_status_recording .uploadcare--camera__button_type_retry,.uploadcare--camera_status_recording .uploadcare--camera__button_type_start-record,.uploadcare--camera_status_recording .uploadcare--camera__not-found,.uploadcare--camera_status_recording .uploadcare--camera__please-allow,.uploadcare--camera_status_requested .uploadcare--camera__button_type_cancel-record,.uploadcare--camera_status_requested .uploadcare--camera__button_type_capture,.uploadcare--camera_status_requested .uploadcare--camera__button_type_mirror,.uploadcare--camera_status_requested .uploadcare--camera__button_type_retry,.uploadcare--camera_status_requested .uploadcare--camera__button_type_start-record,.uploadcare--camera_status_requested .uploadcare--camera__button_type_stop-record,.uploadcare--camera_status_requested .uploadcare--camera__controls,.uploadcare--camera_status_requested .uploadcare--camera__not-found,.uploadcare--camera_status_requested .uploadcare--camera__video-container{display:none}.uploadcare--crop-widget>.uploadcare--preview__image{-webkit-filter:brightness(60%);filter:brightness(60%);transform:none}.uploadcare--tab{overflow:hidden;-ms-flex-align:stretch;align-items:stretch;text-align:center}.uploadcare--tab,.uploadcare--tab__content{-ms-flex-positive:1;flex-grow:1;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center}.uploadcare--tab__content{-ms-flex-negative:1;flex-shrink:1;-ms-flex-align:center;align-items:center;overflow-y:auto;padding:0 20px}.uploadcare--tab__header{-ms-flex-negative:0;flex-shrink:0;padding:0 20px;overflow:hidden}@media (min-width:760px){.uploadcare--tab__header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;padding-right:60px;height:60px}}.uploadcare--tab__iframe{-ms-flex-positive:1;flex-grow:1;width:100%;height:100%;border:0;opacity:0}.uploadcare--tab__title{margin-top:10px;margin-bottom:10px}.uploadcare--tab:not(.uploadcare--tab_current),.uploadcare--tab_name_preview.uploadcare--tab_current~.uploadcare--panel__footer{display:none}.uploadcare--tab_remote.uploadcare--tab_current~.uploadcare--panel__footer{margin-top:0}.uploadcare--panel{-ms-flex-negative:0;flex-shrink:0;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;position:relative;box-sizing:border-box;overflow:hidden;width:100%;height:500px;border:1px solid #a4a2a1;border-radius:6px;background:#fff;color:#353535;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,Arial,sans-serif;font-weight:400;font-size:15px;line-height:20px}@media (min-width:760px){.uploadcare--panel{-ms-flex-direction:row;flex-direction:row}}.uploadcare--panel__content{-ms-flex-positive:1;flex-grow:1;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;overflow:hidden}.uploadcare--panel__file-counter{display:inline}.uploadcare--panel__footer{padding-top:15px;background:#fff9d8}.uploadcare--panel__icon{box-sizing:border-box;padding:3px}.uploadcare--panel__menu_hidden{display:none}.uploadcare--panel__message_hidden{color:#d4d2d2}.uploadcare--panel__powered-by{background:#353535;color:hsla(0,0%,100%,.5)}@media (min-width:760px){.uploadcare--panel__powered-by{display:none}}.uploadcare--tab:not(:nth-child(2)).uploadcare--tab_current~.uploadcare--panel__powered-by{display:none}@media (max-width:759px){.uploadcare--panel_menu-hidden .uploadcare--tab__header{padding:6px 60px 0;min-height:60px}}.uploadcare--panel:not(.uploadcare--panel_multiple) .uploadcare--panel__footer{display:none}.uploadcare--panel_multiple .uploadcare--panel__content{position:relative}.uploadcare--panel_multiple .uploadcare--tab_name_preview{position:absolute;top:0;left:0;height:100%;width:100%}.uploadcare--panel_multiple .uploadcare--tab_name_preview .uploadcare--tab__content{padding-left:0;padding-right:0}.uploadcare--panel_multiple .uploadcare--tab_name_preview .uploadcare--tab__footer{position:relative;margin-top:0;padding-top:15px}.uploadcare--panel_multiple .uploadcare--tab_name_preview .uploadcare--tab__footer:before{content:\\\"\\\";position:absolute;top:0;left:20px;width:calc(100% - 40px);height:1px;background:#e3e1e1}.uploadcare--preview__content{overflow:hidden}.uploadcare--preview__content_crop{padding:10px 20px}.uploadcare--dialog{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:start;justify-content:flex-start;-ms-flex-align:stretch;align-items:stretch;position:fixed;top:0;left:0;z-index:2147483647;box-sizing:border-box;overflow:hidden;width:100%;height:100%;background:#fff;color:#353535;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,Arial,sans-serif;font-weight:400;font-size:15px;line-height:20px;opacity:0;transition:opacity .33s cubic-bezier(.05,.7,.25,1)}@media (min-width:760px){.uploadcare--dialog{-ms-flex-align:center;align-items:center;overflow-y:auto;background:rgba(0,0,0,.5)}}@media (min-width:760px) and (max-height:559px){.uploadcare--dialog{padding-top:30px}}@media (min-width:760px) and (min-height:560px){.uploadcare--dialog{-ms-flex-pack:center;justify-content:center}}.uploadcare--dialog__close{position:absolute;top:0;right:0;z-index:49}.uploadcare--dialog__close:focus{outline-offset:-2px}.uploadcare--dialog__container{display:-ms-flexbox;display:flex;position:relative;overflow:hidden}@media (max-width:759px){.uploadcare--dialog__container{-ms-flex-positive:1;flex-grow:1;height:100%}}@media (min-width:760px){.uploadcare--dialog__container{width:calc(100% - 60px);max-width:900px;height:calc(100% - 60px);min-height:500px;max-height:660px;border-radius:6px;-webkit-mask-image:-webkit-radial-gradient(#fff,#000)}}@media (min-width:1210px){.uploadcare--dialog__container{max-width:1050px}}.uploadcare--dialog__panel{height:100%;border:none;border-radius:0}@media (min-width:1210px){.uploadcare--dialog__panel .uploadcare--menu,.uploadcare--dialog__panel .uploadcare--menu__item{width:250px}}.uploadcare--dialog__powered-by{-ms-flex-negative:0;flex-shrink:0}@media (max-width:759px){.uploadcare--dialog__powered-by{display:none}}.uploadcare--dialog_status_active{opacity:1}.uploadcare--widget{display:inline-block;vertical-align:baseline}.uploadcare--dragging .uploadcare--widget,.uploadcare--widget.uploadcare--dragging{position:relative}.uploadcare--widget__button{all:initial;display:inline-block;box-sizing:border-box;margin:0;padding:.4em 1em;width:auto;min-width:0;height:auto;min-height:0;border-radius:6px;border:none;background:#c3c3c3;color:#fff;cursor:default;text-align:center;white-space:nowrap;font:inherit;line-height:inherit;box-shadow:none;text-shadow:inherit;transition:background .3s}.uploadcare--widget__button:focus,.uploadcare--widget__button:hover{background:#b3b3b3;color:#fff;font:inherit;box-shadow:none;text-shadow:inherit}.uploadcare--widget__button:focus{outline:2px solid rgba(21,124,252,.5);outline-offset:1px}.uploadcare--widget__button:active{background:#b3b3b3}.uploadcare--widget__button:disabled{background:#c3c3c3;color:#fff;cursor:not-allowed}.uploadcare--widget__button_type_open{background:#157cfc;color:#fff}.uploadcare--widget__button_type_open:focus,.uploadcare--widget__button_type_open:hover{background:#3891ff}.uploadcare--widget__button_type_open:active{background:#0969ee}.uploadcare--widget__button_type_open:disabled{background:#c3c3c3}.uploadcare--widget__dragndrop-area{position:absolute;top:0;left:0;box-sizing:border-box;min-width:100%;min-height:100%;margin:0;padding:calc(.4em - 1.5px) 1em;font:inherit;line-height:inherit;text-align:center;white-space:nowrap;border:1.5px dashed;border-radius:6px;background:#e3e1e1;color:#a4a2a1;transition:color .3s;display:none}.uploadcare--dragging .uploadcare--widget__dragndrop-area{display:block}.uploadcare--widget.uploadcare--dragging .uploadcare--widget__dragndrop-area{color:#157cfc}.uploadcare--widget__file-name,.uploadcare--widget__file-size{display:inline}.uploadcare--widget__progress{display:inline-block;width:1.8em;height:1.8em;margin:0 .2em 0 0;padding:0;line-height:0;vertical-align:middle}.uploadcare--widget__text{display:inline-block;box-sizing:border-box;margin-right:.2em;padding:.4em 0;white-space:nowrap}.uploadcare--widget:not(.uploadcare--widget_option_clearable).uploadcare--widget_status_error .uploadcare--widget__button_type_remove,.uploadcare--widget:not(.uploadcare--widget_option_clearable).uploadcare--widget_status_loaded .uploadcare--widget__button_type_remove,.uploadcare--widget_option_clearable.uploadcare--widget_status_error .uploadcare--widget__button_type_open,.uploadcare--widget_status_error .uploadcare--widget__button_type_cancel,.uploadcare--widget_status_error .uploadcare--widget__progress,.uploadcare--widget_status_loaded .uploadcare--widget__button_type_cancel,.uploadcare--widget_status_loaded .uploadcare--widget__button_type_open,.uploadcare--widget_status_loaded .uploadcare--widget__progress,.uploadcare--widget_status_ready .uploadcare--widget__button_type_cancel,.uploadcare--widget_status_ready .uploadcare--widget__button_type_remove,.uploadcare--widget_status_ready .uploadcare--widget__progress,.uploadcare--widget_status_ready .uploadcare--widget__text,.uploadcare--widget_status_started .uploadcare--widget__button_type_open,.uploadcare--widget_status_started .uploadcare--widget__button_type_remove{display:none}.uploadcare--page{width:auto;min-width:0;max-width:100%;height:auto;min-height:0;max-height:100%;overflow:hidden}.uploadcare--mouse-focused:focus{outline:none}\";\n\n  var _icons = \"<svg width=\\\"0\\\" height=\\\"0\\\" style=\\\"position:absolute\\\"><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-back\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M21.132 9.06a1.5 1.5 0 00-2.122-2.12L9.88 16.07l9.06 9.061a1.5 1.5 0 102.122-2.121l-6.94-6.94 7.01-7.01z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-box\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M4.962 9C4.385 9 4 9.384 4 9.96v8.243C4 20.793 6.213 23 8.811 23c1.829 0 3.464-1.043 4.33-2.578.866 1.535 2.406 2.578 4.33 2.578 2.695 0 4.812-2.206 4.812-4.797 0-2.686-2.117-4.886-4.811-4.886-1.829 0-3.465 1.043-4.33 2.578-.77-1.535-2.406-2.578-4.33-2.578a4.957 4.957 0 00-2.887.96V9.958c0-.48-.482-.959-.963-.959zm17.08 4.257a.841.841 0 00-.33.15c-.385.288-.5.965-.211 1.349l2.526 3.357-2.526 3.358c-.289.384-.174 1.061.21 1.35.385.287 1.065.173 1.354-.21l2.105-2.879 2.105 2.878c.288.384.968.498 1.353.21.385-.288.499-.965.21-1.349l-2.526-3.358 2.526-3.357c.289-.384.175-1.061-.21-1.35-.385-.287-1.065-.203-1.353.18l-2.105 2.879-2.105-2.878c-.217-.288-.657-.406-1.023-.33zm-13.23 2.068c1.539 0 2.886 1.344 2.886 2.878.096 1.535-1.25 2.878-2.887 2.878a2.89 2.89 0 01-2.886-2.878c0-1.63 1.347-2.878 2.886-2.878zm8.66 0a2.89 2.89 0 012.886 2.878c0 1.535-1.347 2.878-2.886 2.878a2.89 2.89 0 01-2.887-2.878c0-1.63 1.347-2.878 2.887-2.878z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-camera\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M21 10h3c1.653 0 3 1.343 3 3v9c0 1.656-1.344 3-3.001 3H8A3 3 0 015 22v-9a3 3 0 013-3h3v-.999C11 7.901 11.895 7 13 7h6c1.113 0 2 .896 2 2.001V10zm-5 12a4.5 4.5 0 100-9 4.5 4.5 0 000 9zm0-2a2.5 2.5 0 110-5 2.5 2.5 0 010 5z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-close\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.06 7.94a1.5 1.5 0 00-2.12 2.12L13.878 16l-5.94 5.94a1.5 1.5 0 002.122 2.12L16 18.122l5.94 5.94a1.5 1.5 0 002.12-2.122L18.122 16l5.94-5.94a1.5 1.5 0 00-2.122-2.12L16 13.878l-5.94-5.94z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-crop-free\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M8 12a2.004 2.004 0 01-2-2.01V8.01C6 6.897 6.893 6 8.01 6h1.98c1.109 0 2.005.888 2.01 2h8c.005-1.107.896-2 2.01-2h1.98C25.103 6 26 6.893 26 8.01v1.98A2.004 2.004 0 0124 12v8c1.107.005 2 .896 2 2.01v1.98c0 1.112-.893 2.01-2.01 2.01h-1.98A2.004 2.004 0 0120 24h-8a2.004 2.004 0 01-2.01 2H8.01A2.004 2.004 0 016 23.99v-1.98c0-1.109.888-2.005 2-2.01v-8zm2 0v8a2.004 2.004 0 012 2h8a2.004 2.004 0 012-2v-8a2.004 2.004 0 01-2-2h-8a2.004 2.004 0 01-2 2zm12 10.01v1.98c0 .01 0 .01.01.01h1.98c.01 0 .01 0 .01-.01v-1.98c0-.01 0-.01-.01-.01h-1.98c-.01 0-.01 0-.01.01zm0-14v1.98c0 .01 0 .01.01.01h1.98c.01 0 .01 0 .01-.01V8.01C24 8 24 8 23.99 8h-1.98C22 8 22 8 22 8.01zm-14 14v1.98c0 .01 0 .01.01.01h1.98c.01 0 .01 0 .01-.01v-1.98c0-.01 0-.01-.01-.01H8.01C8 22 8 22 8 22.01zm0-14v1.98c0 .01 0 .01.01.01h1.98c.01 0 .01 0 .01-.01V8.01C10 8 10 8 9.99 8H8.01C8 8 8 8 8 8.01z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-dropbox\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.5 5L16 9.141l-6.5 4.141L3 9.141 9.5 5zm13 0L29 9.141l-6.5 4.141L16 9.141 22.5 5zM3 17.423l6.5-4.141 6.5 4.141-6.5 4.141L3 17.423zm19.5-4.141l6.5 4.141-6.5 4.141-6.5-4.141 6.5-4.141zm-13 9.662l6.5-4.14 6.5 4.14-6.5 4.141-6.5-4.14z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-empty-pubkey\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M16 31C7.716 31 1 24.284 1 16 1 7.716 7.716 1 16 1c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15zm0-13.704a1.296 1.296 0 100-2.592 1.296 1.296 0 000 2.592z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-error\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M18.122 23.93V21a.583.583 0 00-.179-.434.585.585 0 00-.423-.175h-2.616a.585.585 0 00-.424.175.583.583 0 00-.179.434v2.93c0 .172.06.316.18.433.118.117.26.175.423.175h2.616a.585.585 0 00.423-.175.583.583 0 00.18-.434zm-.037-6.326l.339-9.05a.404.404 0 00-.189-.351c-.163-.135-.313-.203-.452-.203H14.64c-.138 0-.288.068-.452.203-.125.086-.188.215-.188.388l.32 9.013c0 .123.063.224.188.304.126.08.277.12.452.12h2.484c.176 0 .324-.04.443-.12a.41.41 0 00.198-.304z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-evernote\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7.998 8.648h2.245a.233.233 0 00.232-.233s-.028-1.931-.028-2.468v-.006c0-.441.093-.825.253-1.148l.077-.144a.05.05 0 00-.026.014l-4.359 4.34a.05.05 0 00-.016.025c.09-.044.213-.106.23-.113.38-.172.84-.267 1.392-.267M24.196 6.56c-.553-.2-1.675-.408-3.084-.575-1.134-.134-2.467-.123-3.272-.098-.097-.665-.56-1.272-1.08-1.482-1.384-.56-3.523-.424-4.071-.27-.437.123-.92.373-1.188.76-.18.258-.297.59-.298 1.051 0 .262.007.878.014 1.426.006.548.014 1.04.014 1.043a.887.887 0 01-.884.888H8.103c-.479 0-.845.08-1.124.208-.28.127-.478.3-.628.503-.3.404-.352.902-.351 1.411 0 0 .004.416.104 1.22.083.622.756 4.971 1.394 6.294.248.514.413.73.9.956 1.083.466 3.559.984 4.72 1.133 1.158.148 1.885.46 2.318-.451.002-.003.087-.227.204-.557.377-1.144.43-2.16.43-2.894 0-.075.108-.078.108 0 0 .519-.098 2.354 1.283 2.847.545.194 1.676.367 2.826.502 1.039.12 1.793.53 1.793 3.208 0 1.628-.34 1.851-2.122 1.851-1.444 0-1.994.038-1.994-1.113 0-.932.917-.834 1.596-.834.304 0 .083-.226.083-.8 0-.572.357-.902.02-.91-2.35-.066-3.733-.003-3.733 2.947 0 2.679 1.021 3.176 4.357 3.176 2.614 0 3.536-.086 4.616-3.45.213-.663.73-2.69 1.043-6.092.197-2.15-.187-8.644-.491-10.282-.178-.958-.746-1.43-1.259-1.616zm-3.3 8.792a4.75 4.75 0 00-.923.056c.081-.66.353-1.473 1.316-1.439 1.066.037 1.216 1.049 1.22 1.734-.45-.201-1.006-.33-1.613-.35\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-facebook\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M28 16c0-6.627-5.373-12-12-12S4 9.373 4 16c0 5.99 4.388 10.954 10.125 11.854V19.47h-3.047V16h3.047v-2.644c0-3.007 1.792-4.668 4.533-4.668 1.312 0 2.686.234 2.686.234v2.953H19.83c-1.491 0-1.956.925-1.956 1.875V16h3.328l-.532 3.469h-2.796v8.385C23.612 26.954 28 21.99 28 16z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-file\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M19 6l5 5h-4c-.556 0-1-.448-1-1V6zm5 7v11.192c0 .995-.808 1.808-1.804 1.808H9.804A1.808 1.808 0 018 24.2V7.74C8 6.602 8.627 6 9.778 6H17v4.994c0 1.12.898 2.006 2.006 2.006H24z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-flickr\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11 20c-2.212 0-4-1.79-4-4s1.79-4 4-4a4 4 0 010 8zm10.001 0a4 4 0 11-.002-8 4 4 0 01.002 8z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-gdrive\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M19.461 6l7.109 12h-7.004L12.539 6h6.922zm-9.27 19l3.467-6H27l-3.466 6H10.192zM5 18.841l6.618-11.36 3.566 5.929-6.722 11.36L5 18.84z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-gphotos\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M8.797 9.5l-5.632 5.841c-.064.07-.165.228-.165.33 0 .202.127.329.33.329h8.869c1.444 0 2.501-1.09 2.501-2.534V9.5H8.797zM28.67 16H19.8c-1.444 0-2.501 1.09-2.501 2.534V22.5h5.903l5.632-5.841c.064-.07.165-.228.165-.33 0-.202-.127-.329-.33-.329zM16.659 3.165C16.589 3.1 16.43 3 16.329 3c-.202 0-.329.127-.329.33v8.869c0 1.444 1.09 2.501 2.534 2.501H22.5V8.797l-5.841-5.632zM13.466 17.3H9.5v5.903l5.841 5.632c.07.064.228.165.33.165.202 0 .329-.127.329-.33v-8.869c0-1.444-1.09-2.501-2.534-2.501z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-huddle\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M13.63 14.39c.07-.102.17-.26.2-.313 1.474-2.683 6.857-2.686 8.49 1.002.43.968.67 1.97.675 3.023.008 1.978.004 3.957.002 5.936 0 1.192-.68 1.945-1.763 1.962-1.087.016-1.856-.766-1.865-1.944-.014-1.874.003-3.749-.006-5.623-.006-1.351-.654-2.388-1.719-2.793-1.775-.675-3.59.305-3.892 2.159-.122.747-.104 1.52-.114 2.281-.016 1.336-.002 2.673-.005 4.01-.003 1.125-.669 1.866-1.707 1.907-1.06.042-1.828-.668-1.922-1.78-.007-.086-.003-.173-.003-.26 0-5.31-.002-10.622.002-15.932 0-1.2.731-2.016 1.79-2.025 1.05-.01 1.832.74 1.837 1.792.01 2.013.003 4.026.005 6.04 0 .12.002.391-.005.558\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-instagram\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M16 5c2.987 0 3.362.013 4.535.066 1.171.054 1.97.24 2.67.511a5.391 5.391 0 011.949 1.27 5.392 5.392 0 011.269 1.948c.272.7.457 1.499.51 2.67.054 1.173.067 1.548.067 4.535s-.013 3.362-.066 4.535c-.054 1.171-.24 1.97-.511 2.67a5.392 5.392 0 01-1.27 1.949 5.391 5.391 0 01-1.948 1.269c-.7.271-1.499.457-2.67.51-1.173.054-1.548.067-4.535.067s-3.362-.013-4.535-.066c-1.171-.054-1.97-.24-2.67-.511a5.392 5.392 0 01-1.949-1.27 5.391 5.391 0 01-1.268-1.948c-.273-.7-.458-1.499-.512-2.67C5.013 19.362 5 18.987 5 16s.013-3.362.066-4.535c.054-1.171.24-1.97.512-2.67a5.391 5.391 0 011.268-1.949 5.392 5.392 0 011.949-1.269c.7-.271 1.499-.457 2.67-.51C12.638 5.012 13.013 5 16 5zm0 1.982c-2.937 0-3.285.011-4.445.064-1.072.049-1.655.228-2.042.379-.514.2-.88.438-1.265.823a3.41 3.41 0 00-.823 1.264c-.15.388-.33.97-.379 2.043-.053 1.16-.064 1.508-.064 4.445 0 2.937.011 3.285.064 4.445.049 1.072.228 1.655.379 2.043.2.513.438.88.823 1.264.385.385.751.624 1.265.823.387.15.97.33 2.042.379 1.16.053 1.508.064 4.445.064 2.937 0 3.285-.011 4.445-.064 1.072-.049 1.655-.228 2.042-.379.514-.2.88-.438 1.265-.823.385-.385.624-.751.823-1.264.15-.388.33-.97.379-2.043.053-1.16.064-1.508.064-4.445 0-2.937-.011-3.285-.064-4.445-.049-1.072-.228-1.655-.379-2.043-.2-.513-.438-.88-.823-1.264a3.408 3.408 0 00-1.265-.823c-.387-.15-.97-.33-2.042-.379-1.16-.053-1.508-.064-4.445-.064zm0 3.37a5.649 5.649 0 110 11.297 5.649 5.649 0 010-11.298zm0 9.315a3.667 3.667 0 100-7.334 3.667 3.667 0 000 7.334zm7.192-9.539a1.32 1.32 0 11-2.64 0 1.32 1.32 0 012.64 0z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-menu\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7.5 10a1.5 1.5 0 010-3h17a1.5 1.5 0 010 3h-17zm0 7a1.5 1.5 0 010-3h17a1.5 1.5 0 010 3h-17zm0 7a1.5 1.5 0 010-3h17a1.5 1.5 0 010 3h-17z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-more\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M21 16a3 3 0 116 0 3 3 0 01-6 0zm-8 0a3 3 0 116 0 3 3 0 01-6 0zm-8 0a3 3 0 116 0 3 3 0 01-6 0z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-onedrive\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.715 16.427c.584-2.413 2.699-4.177 5.209-4.177 1.483 0 2.873.621 3.878 1.7.425-.14.922-.248 1.364-.258v-.16c0-3.054-2.214-5.532-4.944-5.532-1.952 0-3.624 1.278-4.428 3.115a3.55 3.55 0 00-2.033-.658c-2.142 0-3.877 1.94-3.877 4.336 0 .258.028.51.068.754-1.652.167-2.946 1.9-2.946 3.79 0 .02.005.037.005.056-.001.017-.011.035-.011.052 0 .757.257 1.449.673 2.007a3.14 3.14 0 002.568 1.317h1.513a4.49 4.49 0 01-.477-1.987c-.001-2.138 1.476-3.93 3.438-4.355zm13.752 2.375c-.03 0-.06.01-.09.01.008-.09.026-.18.026-.273 0-1.812-1.431-3.279-3.198-3.279-.703 0-1.347.24-1.877.635-.655-1.249-1.924-2.107-3.405-2.107-2.146 0-3.885 1.784-3.885 3.984 0 .029.008.053.009.082a2.764 2.764 0 00-.431-.045c-1.602 0-2.898 1.33-2.898 2.973 0 .205.02.406.059.599C10.05 22.87 11.322 24 12.856 24h12.847v-.023C26.99 23.85 28 22.753 28 21.402c0-1.435-1.134-2.6-2.533-2.6z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-remove\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M22.142 24.009c-.078 1.1-1.044 1.991-2.15 1.991h-7.983c-1.11 0-2.073-.897-2.151-1.991l-.786-11.002A.924.924 0 0110.007 12h11.986c.556 0 .975.45.935 1.007l-.786 11.002zM13 7V6c0-.556.444-1 .99-1h4.02A1 1 0 0119 6v1h4c.556 0 1 .447 1 .999v1.002A.997.997 0 0123 10H9c-.555 0-1-.447-1-.999V7.999A.996.996 0 019 7h4z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-uploadcare\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"#ffd800\\\" d=\\\"M16 31C7.716 31 1 24.284 1 16 1 7.716 7.716 1 16 1c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15zm0-13.704a1.296 1.296 0 100-2.592 1.296 1.296 0 000 2.592z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-url\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M16 5c6.074 0 11 4.926 11 11s-4.926 11-11 11S5 22.074 5 16 9.926 5 16 5zm6.076 6.327a.992.992 0 10-1.403-1.403l-1.128 1.128c-1.431-.92-3.47-.768-4.697.461l-3.186 3.185a3.7 3.7 0 00-1.09 2.636c0 .748.22 1.46.624 2.067l-1.272 1.272a.992.992 0 101.402 1.403l1.273-1.272c.606.405 1.32.623 2.067.623.997 0 1.933-.386 2.634-1.089l3.187-3.186a3.729 3.729 0 00.464-4.7l1.125-1.125zm-4.252 3.841a.982.982 0 00.701-.29l.95-.95c.067.188.114.385.114.591 0 .466-.178.904-.505 1.23l-3.186 3.187c-.472.47-1.197.588-1.813.382l.793-.792a.992.992 0 10-1.404-1.404l-.801.802a1.752 1.752 0 01-.115-.59c0-.468.179-.905.506-1.232l3.186-3.186a1.736 1.736 0 011.23-.507c.207 0 .404.049.592.116l-.948.95a.992.992 0 00.7 1.693z\\\"/></symbol><symbol viewBox=\\\"0 0 32 32\\\" id=\\\"uploadcare--icon-vk\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M27.791 21.484c-.416-.767-1.212-1.708-2.386-2.824l-.038-.038c-.558-.532-.895-.882-1.037-1.06-.258-.341-.316-.686-.175-1.036.1-.264.475-.821 1.125-1.673.341-.451.612-.813.812-1.086 1.441-1.959 2.066-3.21 1.874-3.756l-.074-.127c-.05-.077-.18-.147-.387-.211-.209-.064-.475-.075-.8-.032l-3.599.025a.457.457 0 00-.25.007l-.163.038-.062.032-.05.039a.56.56 0 00-.137.134.882.882 0 00-.125.223 21.072 21.072 0 01-1.337 2.875 27.31 27.31 0 01-.85 1.373c-.258.388-.475.673-.65.856a4.57 4.57 0 01-.475.44c-.141.112-.25.158-.324.141a8.987 8.987 0 01-.213-.05.843.843 0 01-.281-.314 1.425 1.425 0 01-.144-.498c-.025-.2-.04-.373-.044-.518-.003-.144-.002-.349.007-.613.008-.264.012-.443.012-.536 0-.324.007-.675.019-1.054l.031-.901c.009-.222.013-.456.013-.703 0-.247-.015-.44-.044-.581a2.02 2.02 0 00-.131-.409.684.684 0 00-.256-.307 1.426 1.426 0 00-.419-.172c-.441-.102-1.004-.158-1.687-.166-1.55-.017-2.545.085-2.986.307a1.69 1.69 0 00-.475.383c-.15.187-.171.29-.063.306.5.077.854.26 1.062.55l.075.153c.059.11.117.307.175.588.059.28.096.592.113.932.041.622.041 1.154 0 1.597-.042.443-.081.788-.119 1.035a2.107 2.107 0 01-.169.6 2.55 2.55 0 01-.15.281.217.217 0 01-.062.064.918.918 0 01-.337.064c-.117 0-.259-.06-.425-.179a3.024 3.024 0 01-.519-.492c-.179-.208-.38-.5-.606-.875a15.385 15.385 0 01-.7-1.328l-.2-.37a32.156 32.156 0 01-.512-1.042 20.306 20.306 0 01-.575-1.323.84.84 0 00-.3-.408l-.062-.039a.85.85 0 00-.2-.108 1.304 1.304 0 00-.287-.083L4.8 9.64c-.35 0-.587.081-.712.243l-.05.077a.421.421 0 00-.038.204c0 .094.025.209.075.345.5 1.201 1.043 2.36 1.63 3.475C6.294 15.1 6.804 16 7.237 16.68c.433.681.875 1.324 1.325 1.929.45.604.748.992.893 1.162.146.17.26.298.344.384l.312.306c.2.205.494.45.881.735.388.285.817.566 1.287.843.471.277 1.019.503 1.644.677a5.564 5.564 0 001.824.211h1.437c.292-.026.512-.12.662-.281l.05-.064a.858.858 0 00.094-.236c.029-.107.044-.224.044-.351a4.301 4.301 0 01.08-.99c.063-.294.134-.516.213-.665a1.632 1.632 0 01.482-.562.806.806 0 01.1-.045c.2-.068.434-.002.705.199.271.2.525.447.763.74.237.295.522.625.856.99.333.367.625.64.874.818l.25.154c.167.102.384.196.65.28.266.086.5.107.7.065l3.199-.051c.316 0 .562-.054.737-.16.175-.107.279-.224.312-.351.034-.128.035-.273.007-.435a1.632 1.632 0 00-.088-.338 1.694 1.694 0 00-.082-.16z\\\"/></symbol></svg>\";\n\n  var JST = {\n    dialog: dialog,\n    dialog__panel: dialogPanel,\n    progress__text: progressText,\n    'tab-camera-capture': tabCameraCapture,\n    'tab-camera': tabCamera,\n    'tab-file': tabFile,\n    'tab-preview-error': tabPreviewError,\n    'tab-preview-image': tabPreviewImage,\n    'tab-preview-multiple-file': tabPreviewMultipleFile,\n    'tab-preview-multiple': tabPreviewMultiple,\n    'tab-preview-regular': tabPreviewRegular,\n    'tab-preview-unknown': tabPreviewUnknown,\n    'tab-preview-video': tabPreviewVideo,\n    'tab-url': tabUrl,\n    'widget-button': widgetButton,\n    'widget-file-name': widgetFileName,\n    widget: widget,\n    icons: function icons() {\n      return _icons;\n    },\n    styles: function styles() {\n      return _styles;\n    }\n  };\n\n  var tpl = function tpl(key) {\n    var ctx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var fn = JST[key];\n    return fn != null ? fn(_objectSpread2({}, ctx)) : '';\n  };\n\n  isWindowDefined() && waitForSettings.add(function (settings) {\n    var css = tpl('styles', {\n      settings: settings\n    });\n    var style = document.createElement('style');\n    style.setAttribute('type', 'text/css');\n\n    if (style.styleSheet != null) {\n      style.styleSheet.cssText = css;\n    } else {\n      style.appendChild(document.createTextNode(css));\n    }\n\n    return $__default['default']('head').prepend(style);\n  });\n\n  var canSubmit = function canSubmit(form) {\n    var notSubmittable;\n    notSubmittable = '[data-status=started], [data-status=error]';\n    return !form.find('.uploadcare--widget').is(notSubmittable);\n  };\n\n  var submitPreventionState = function submitPreventionState(form, prevent) {\n    form.attr('data-uploadcare-submitted', prevent);\n    return form.find(':submit').attr('disabled', prevent);\n  };\n\n  var uploadForm = '[role~=\"uploadcare-upload-form\"]';\n  var submittedForm = uploadForm + '[data-uploadcare-submitted]';\n\n  if (isWindowDefined()) {\n    $__default['default'](document).on('submit', uploadForm, function () {\n      var form;\n      form = $__default['default'](this);\n\n      if (canSubmit(form)) {\n        return true; // allow submit\n      } else {\n        submitPreventionState(form, true);\n        return false;\n      }\n    });\n    $__default['default'](document).on('loaded.uploadcare', submittedForm, function () {\n      return $__default['default'](this).submit();\n    });\n    var cancelEvents = 'ready.uploadcare error.uploadcare';\n    $__default['default'](document).on(cancelEvents, submittedForm, function () {\n      var form;\n      form = $__default['default'](this);\n\n      if (canSubmit(form)) {\n        return submitPreventionState(form, false);\n      }\n    });\n  }\n\n  var fakeButtons = ['.uploadcare--menu__item', '.uploadcare--file__description', '.uploadcare--crop-sizes__item'].join(', ');\n  var mouseFocusedClass = 'uploadcare--mouse-focused';\n  isWindowDefined() && $__default['default'](document.documentElement).on('mousedown', fakeButtons, function (e) {\n    // http://wd.dizaina.net/internet-maintenance/on-outlines/\n    return defer(function () {\n      var activeElement;\n      activeElement = document.activeElement;\n\n      if (activeElement && activeElement !== document.body) {\n        return $__default['default'](activeElement).addClass(mouseFocusedClass).one('blur', function () {\n          return $__default['default'](activeElement).removeClass(mouseFocusedClass);\n        });\n      }\n    });\n  }).on('keypress', fakeButtons, function (e) {\n    // 13 = Return, 32 = Space\n    if (e.which === 13 || e.which === 32) {\n      $__default['default'](this).click();\n      e.preventDefault();\n      return e.stopPropagation();\n    }\n  });\n\n  var Circle = /*#__PURE__*/function () {\n    function Circle(element) {\n      _classCallCheck(this, Circle);\n\n      if (canvas) {\n        this.renderer = new CanvasRenderer(element);\n      } else {\n        this.renderer = new TextRenderer(element);\n      }\n\n      this.observed = null;\n    }\n\n    _createClass(Circle, [{\n      key: \"listen\",\n      value: function listen(file, selector) {\n        var _this = this;\n\n        var selectorFn;\n        this.reset();\n        selectorFn = selector != null ? function (info) {\n          return info[selector];\n        } : function (x) {\n          return x;\n        };\n        this.observed = file;\n\n        if (this.observed.state() === 'resolved') {\n          this.renderer.setValue(1, true);\n        } else {\n          this.observed.progress(function (progress) {\n            // if we are still listening to this one\n            if (file === _this.observed) {\n              _this.renderer.setValue(selectorFn(progress));\n            }\n          }).always(function (uploadedFile) {\n            if (file === _this.observed) {\n              _this.renderer.setValue(1, false);\n            }\n          });\n        }\n\n        return this;\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        var filled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        this.observed = null;\n        this.renderer.setValue(filled ? 1 : 0, true);\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        this.renderer.update();\n      }\n    }]);\n\n    return Circle;\n  }();\n\n  var BaseRenderer = /*#__PURE__*/function () {\n    function BaseRenderer(el) {\n      _classCallCheck(this, BaseRenderer);\n\n      this.element = $__default['default'](el);\n      this.element.data('uploadcare-progress-renderer', this);\n      this.element.addClass('uploadcare--progress');\n    }\n\n    _createClass(BaseRenderer, [{\n      key: \"update\",\n      value: function update() {}\n    }]);\n\n    return BaseRenderer;\n  }();\n\n  var TextRenderer = /*#__PURE__*/function (_BaseRenderer) {\n    _inherits(TextRenderer, _BaseRenderer);\n\n    var _super = _createSuper(TextRenderer);\n\n    function TextRenderer() {\n      var _this2;\n\n      _classCallCheck(this, TextRenderer);\n\n      _this2 = _super.apply(this, arguments);\n\n      _this2.element.addClass('uploadcare--progress_type_text');\n\n      _this2.element.html(tpl('progress__text'));\n\n      _this2.text = _this2.element.find('.uploadcare--progress__text');\n      return _this2;\n    }\n\n    _createClass(TextRenderer, [{\n      key: \"setValue\",\n      value: function setValue(val) {\n        val = Math.round(val * 100);\n        this.text.html(\"\".concat(val, \" %\"));\n      }\n    }]);\n\n    return TextRenderer;\n  }(BaseRenderer);\n\n  var CanvasRenderer = /*#__PURE__*/function (_BaseRenderer2) {\n    _inherits(CanvasRenderer, _BaseRenderer2);\n\n    var _super2 = _createSuper(CanvasRenderer);\n\n    function CanvasRenderer() {\n      var _this3;\n\n      _classCallCheck(this, CanvasRenderer);\n\n      _this3 = _super2.apply(this, arguments);\n      _this3.canvasEl = $__default['default']('<canvas>').addClass('uploadcare--progress__canvas').get(0);\n\n      _this3.element.addClass('uploadcare--progress_type_canvas');\n\n      _this3.element.html(_this3.canvasEl);\n\n      _this3.setValue(0, true);\n\n      return _this3;\n    }\n\n    _createClass(CanvasRenderer, [{\n      key: \"update\",\n      value: function update() {\n        var _this4 = this;\n\n        window.cancelAnimationFrame(this.__rafId);\n        this.__rafId = window.requestAnimationFrame(function () {\n          var half = Math.floor(Math.min(_this4.element.width(), _this4.element.height()));\n          var size = half * 2;\n\n          if (half) {\n            if (_this4.canvasEl.width !== size || _this4.canvasEl.height !== size) {\n              _this4.canvasEl.width = size;\n              _this4.canvasEl.height = size;\n            }\n\n            var ctx = _this4.canvasEl.getContext('2d');\n\n            var arc = function arc(radius, val) {\n              var offset;\n              offset = -Math.PI / 2;\n              ctx.beginPath();\n              ctx.moveTo(half, half);\n              ctx.arc(half, half, radius, offset, offset + 2 * Math.PI * val, false);\n              ctx.fill();\n            }; // Clear\n\n\n            ctx.clearRect(0, 0, size, size); // Background circle\n\n            ctx.globalCompositeOperation = 'source-over';\n            ctx.fillStyle = _this4.element.css('border-left-color');\n            arc(half - 0.5, 1); // Progress circle\n\n            ctx.fillStyle = _this4.element.css('color');\n            arc(half, _this4.val); // Make a hole\n\n            ctx.globalCompositeOperation = 'destination-out';\n            arc(half / 7, 1);\n          }\n        });\n      }\n    }, {\n      key: \"__animateValue\",\n      value: function __animateValue(target) {\n        var _this5 = this;\n\n        var speed, start, val;\n        val = this.val;\n        start = new Date();\n        speed = target > val ? 2 : -2;\n        this.__animIntervalId = setInterval(function () {\n          var current;\n          current = val + (new Date() - start) / 1000 * speed;\n          current = (speed > 0 ? Math.min : Math.max)(current, target);\n\n          if (current === target) {\n            _this5.__stopAnimation();\n          }\n\n          _this5.__setValue(current);\n        }, 15);\n      }\n    }, {\n      key: \"__stopAnimation\",\n      value: function __stopAnimation() {\n        if (this.__animIntervalId) {\n          clearInterval(this.__animIntervalId);\n        }\n\n        this.__animIntervalId = null;\n      }\n    }, {\n      key: \"__setValue\",\n      value: function __setValue(val) {\n        this.val = val;\n        this.element.attr('aria-valuenow', (val * 100).toFixed(0));\n        this.update();\n      }\n    }, {\n      key: \"setValue\",\n      value: function setValue(val) {\n        var instant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        this.__stopAnimation();\n\n        if (instant) {\n          this.__setValue(val);\n        } else {\n          this.__animateValue(val);\n        }\n      }\n    }]);\n\n    return CanvasRenderer;\n  }(BaseRenderer);\n\n  var support = fileDragAndDrop;\n\n  var uploadDrop = function uploadDrop(el, callback, settings) {\n    settings = build(settings);\n    return receiveDrop(el, function (type, data) {\n      return callback(settings.multiple ? filesFrom(type, data, settings) : fileFrom(type, data[0], settings));\n    });\n  };\n\n  var receiveDrop = !support ? function () {} : function (el, callback) {\n    watchDragging(el);\n    $__default['default'](el).on({\n      dragover: function dragover(e) {\n        e.preventDefault(); // Prevent opening files.\n        // This is way to change cursor.\n\n        e.originalEvent.dataTransfer.dropEffect = 'copy';\n      },\n      drop: function drop(e) {\n        var dt, i, len, ref, uri, uris;\n        e.preventDefault(); // Prevent opening files.\n\n        dt = e.originalEvent.dataTransfer;\n\n        if (!dt) {\n          return;\n        }\n\n        if (dt.files.length) {\n          // eslint-disable-next-line standard/no-callback-literal\n          return callback('object', dt.files);\n        } else {\n          uris = [];\n          ref = dt.getData('text/uri-list').split();\n\n          for (i = 0, len = ref.length; i < len; i++) {\n            uri = ref[i];\n            uri = $__default['default'].trim(uri);\n\n            if (uri && uri[0] !== '#') {\n              uris.push(uri);\n            }\n          }\n\n          if (uris) {\n            // eslint-disable-next-line standard/no-callback-literal\n            return callback('url', uris);\n          }\n        }\n      }\n    });\n  };\n  var watchDragging = !support ? function () {} : function (el, receiver) {\n    var changeState, counter, lastActive;\n    lastActive = false;\n    counter = 0;\n\n    changeState = function changeState(active) {\n      if (lastActive !== active) {\n        lastActive = active;\n        return $__default['default'](el).toggleClass('uploadcare--dragging', active);\n      }\n    };\n\n    return $__default['default'](receiver || el).on({\n      dragenter: function dragenter() {\n        counter += 1;\n        return changeState(true);\n      },\n      dragleave: function dragleave() {\n        counter -= 1;\n\n        if (counter === 0) {\n          return changeState(false);\n        }\n      },\n      'drop mouseenter': function dropMouseenter() {\n        counter = 0;\n        return changeState(false);\n      }\n    });\n  };\n  isWindowDefined() && watchDragging('body', document);\n\n  var Template = /*#__PURE__*/function () {\n    function Template(settings, element) {\n      _classCallCheck(this, Template);\n\n      this.settings = settings;\n      this.element = element;\n      this.content = $__default['default'](tpl('widget'));\n      this.element.after(this.content);\n      this.circle = new Circle(this.content.find('.uploadcare--widget__progress').removeClass('uploadcare--widget__progress'));\n      this.content.find('.uploadcare--progress').addClass('uploadcare--widget__progress');\n      this.statusText = this.content.find('.uploadcare--widget__text');\n      this.content.toggleClass('uploadcare--widget_option_clearable', this.settings.clearable);\n    }\n\n    _createClass(Template, [{\n      key: \"addButton\",\n      value: function addButton(name) {\n        var caption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        return $__default['default'](tpl('widget-button', {\n          name: name,\n          caption: caption\n        })).appendTo(this.content);\n      }\n    }, {\n      key: \"setStatus\",\n      value: function setStatus(status) {\n        var prefix;\n        prefix = 'uploadcare--widget_status_';\n        this.content.removeClass(prefix + this.content.attr('data-status'));\n        this.content.attr('data-status', status);\n        this.content.addClass(prefix + status);\n        return this.element.trigger(\"\".concat(status, \".uploadcare\"));\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this.circle.reset();\n        this.setStatus('ready');\n        this.content.attr('aria-busy', false);\n        this.__file = undefined;\n        return this.__file;\n      }\n    }, {\n      key: \"loaded\",\n      value: function loaded() {\n        this.setStatus('loaded');\n        this.content.attr('aria-busy', false);\n        return this.circle.reset(true);\n      }\n    }, {\n      key: \"listen\",\n      value: function listen(file) {\n        var _this = this;\n\n        this.__file = file;\n        this.circle.listen(file, 'uploadProgress');\n        this.setStatus('started');\n        this.content.attr('aria-busy', true);\n        return file.progress(function (info) {\n          if (file === _this.__file) {\n            switch (info.state) {\n              case 'uploading':\n                return _this.statusText.text(locale.t('uploading'));\n\n              case 'uploaded':\n                return _this.statusText.text(locale.t('loadingInfo'));\n            }\n          }\n        });\n      }\n    }, {\n      key: \"error\",\n      value: function error(type) {\n        this.statusText.text(locale.t(\"errors.\".concat(type || 'default')));\n        this.content.attr('aria-busy', false);\n        return this.setStatus('error');\n      }\n    }, {\n      key: \"setFileInfo\",\n      value: function setFileInfo(info) {\n        return this.statusText.html(tpl('widget-file-name', info)).find('.uploadcare--widget__file-name').toggleClass('needsclick', this.settings.systemDialog);\n      }\n    }]);\n\n    return Template;\n  }();\n\n  var FileTab = /*#__PURE__*/function () {\n    function FileTab(container, tabButton1, dialogApi, settings, name1) {\n      _classCallCheck(this, FileTab);\n\n      this.__initTabsList = this.__initTabsList.bind(this);\n      this.container = container;\n      this.tabButton = tabButton1;\n      this.dialogApi = dialogApi;\n      this.settings = settings;\n      this.name = name1;\n      this.container.append(tpl('tab-file'));\n\n      this.__setupFileButton();\n\n      this.__initDragNDrop();\n\n      this.__initTabsList();\n    }\n\n    _createClass(FileTab, [{\n      key: \"__initDragNDrop\",\n      value: function __initDragNDrop() {\n        var _this = this;\n\n        var dropArea;\n        dropArea = this.container.find('.uploadcare--draganddrop');\n\n        if (fileDragAndDrop) {\n          receiveDrop(dropArea, function (type, files) {\n            if (_this.settings.multiple) {\n              _this.dialogApi.addFiles(type, files);\n            } else {\n              _this.dialogApi.addFiles(type, [files[0]]);\n            }\n\n            return _this.dialogApi.switchTab('preview');\n          });\n          return dropArea.addClass('uploadcare--draganddrop_supported');\n        }\n      }\n    }, {\n      key: \"__setupFileButton\",\n      value: function __setupFileButton() {\n        var _this2 = this;\n\n        var fileButton;\n        fileButton = this.container.find('.uploadcare--tab__action-button');\n\n        if (sendFileAPI) {\n          return fileButton.on('click', function () {\n            fileSelectDialog(_this2.container, _this2.settings, function (input) {\n              _this2.dialogApi.addFiles('object', input.files);\n\n              return _this2.dialogApi.switchTab('preview');\n            });\n            return false;\n          });\n        } else {\n          return fileInput(fileButton, this.settings, function (input) {\n            _this2.dialogApi.addFiles('input', [input]);\n\n            return _this2.dialogApi.switchTab('preview');\n          });\n        }\n      }\n    }, {\n      key: \"__initTabsList\",\n      value: function __initTabsList() {\n        var _this3 = this;\n\n        var i, len, list, n, ref, tab;\n        list = this.container.find('.uploadcare--file-sources__items');\n        list.remove('.uploadcare--file-sources__item:not(.uploadcare--file-source_all)');\n        n = 0;\n        ref = this.settings.tabs;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          tab = ref[i];\n\n          if (tab === 'file' || tab === 'url' || tab === 'camera') {\n            continue;\n          }\n\n          if (!this.dialogApi.isTabVisible(tab)) {\n            continue;\n          }\n\n          n += 1;\n\n          if (n > 5) {\n            continue;\n          }\n\n          list.append([this.__tabButton(tab), ' ']);\n        }\n\n        list.find('.uploadcare--file-source_all').on('click', function () {\n          return _this3.dialogApi.openMenu();\n        });\n\n        if (n > 5) {\n          list.addClass('uploadcare--file-sources__items_many');\n        }\n\n        return this.container.find('.uploadcare--file-sources').attr('hidden', n === 0);\n      }\n    }, {\n      key: \"__tabButton\",\n      value: function __tabButton(name) {\n        var _this4 = this;\n\n        var tabIcon;\n        tabIcon = $__default['default'](\"<svg width='32' height='32'><use xlink:href='#uploadcare--icon-\".concat(name, \"'/></svg>\")).attr('role', 'presentation').attr('class', 'uploadcare--icon uploadcare--file-source__icon');\n        return $__default['default']('<button>').addClass('uploadcare--button').addClass('uploadcare--button_icon').addClass('uploadcare--file-source').addClass(\"uploadcare--file-source_\".concat(name)).addClass('uploadcare--file-sources__item').attr('type', 'button').attr('title', locale.t(\"dialog.tabs.names.\".concat(name))).attr('data-tab', name).append(tabIcon).on('click', function () {\n          return _this4.dialogApi.switchTab(name);\n        });\n      }\n    }, {\n      key: \"displayed\",\n      value: function displayed() {\n        this.dialogApi.takeFocus() && this.container.find('.uploadcare--tab__action-button').focus();\n      }\n    }]);\n\n    return FileTab;\n  }();\n\n  var fixUrl, urlRegexp;\n\n  var UrlTab = /*#__PURE__*/function () {\n    function UrlTab(container, tabButton, dialogApi, settings, name) {\n      var _this = this;\n\n      _classCallCheck(this, UrlTab);\n\n      var button, input;\n      this.container = container;\n      this.tabButton = tabButton;\n      this.dialogApi = dialogApi;\n      this.settings = settings;\n      this.name = name;\n      this.container.append(tpl('tab-url'));\n      input = this.container.find('.uploadcare--input');\n      input.on('change keyup input', function () {\n        var isDisabled = !$__default['default'].trim(this.value);\n        return button.attr('disabled', isDisabled).attr('aria-disabled', isDisabled);\n      });\n      button = this.container.find('.uploadcare--button[type=submit]').attr('disabled', true);\n      this.container.find('.uploadcare--form').on('submit', function () {\n        var url = fixUrl(input.val());\n\n        if (url) {\n          _this.dialogApi.addFiles('url', [[url, {\n            source: 'url-tab'\n          }]]);\n\n          input.val('').trigger('change');\n        }\n\n        return false;\n      });\n    }\n\n    _createClass(UrlTab, [{\n      key: \"displayed\",\n      value: function displayed() {\n        this.dialogApi.takeFocus() && this.container.find('.uploadcare--input').focus();\n      }\n    }]);\n\n    return UrlTab;\n  }(); // starts with scheme\n\n\n  urlRegexp = /^[a-z][a-z0-9+\\-.]*:?\\/\\//;\n\n  fixUrl = function fixUrl(url) {\n    url = $__default['default'].trim(url);\n\n    if (urlRegexp.test(url)) {\n      return url;\n    } else {\n      return 'http://' + url;\n    }\n  };\n\n  function find(arr, predicate) {\n    var len = arr.length;\n    var k = 0;\n\n    while (k < len) {\n      var kValue = arr[k];\n\n      if (predicate(kValue)) {\n        return kValue;\n      }\n\n      k++;\n    }\n\n    return undefined;\n  }\n\n  var isSecure = isWindowDefined() && document.location.protocol === 'https:';\n\n  var CameraTab = /*#__PURE__*/function () {\n    function CameraTab(container1, tabButton, dialogApi, settings, name1) {\n      _classCallCheck(this, CameraTab);\n\n      var video;\n      this.__captureInput = this.__captureInput.bind(this);\n      this.__captureInputHandle = this.__captureInputHandle.bind(this);\n      this.__setState = this.__setState.bind(this);\n      this.__requestCamera = this.__requestCamera.bind(this);\n      this.__revoke = this.__revoke.bind(this);\n      this.__mirror = this.__mirror.bind(this);\n      this.__capture = this.__capture.bind(this);\n      this.__startRecording = this.__startRecording.bind(this);\n      this.__stopRecording = this.__stopRecording.bind(this);\n      this.__cancelRecording = this.__cancelRecording.bind(this);\n      this.container = container1;\n      this.tabButton = tabButton;\n      this.dialogApi = dialogApi;\n      this.settings = settings;\n      this.name = name1;\n\n      if (this.__checkCapture()) {\n        this.container.append(tpl('tab-camera-capture'));\n        this.container.addClass('uploadcare--camera');\n        this.container.find('.uploadcare--camera__button_type_photo').on('click', this.__captureInput('image/*'));\n        video = this.container.find('.uploadcare--camera__button_type_video').on('click', this.__captureInput('video/*'));\n\n        if (this.settings.imagesOnly) {\n          video.hide();\n        }\n      } else {\n        if (!this.__checkCompatibility()) {\n          this.dialogApi.hideTab(this.name);\n          return;\n        }\n\n        this.__initCamera();\n      }\n    }\n\n    _createClass(CameraTab, [{\n      key: \"__captureInput\",\n      value: function __captureInput(accept) {\n        var _this = this;\n\n        return function () {\n          return fileSelectDialog(_this.container, {\n            inputAcceptTypes: accept\n          }, _this.__captureInputHandle, {\n            capture: 'camera'\n          });\n        };\n      }\n    }, {\n      key: \"__captureInputHandle\",\n      value: function __captureInputHandle(input) {\n        this.dialogApi.addFiles('object', input.files);\n        return this.dialogApi.switchTab('preview');\n      }\n    }, {\n      key: \"__initCamera\",\n      value: function __initCamera() {\n        var _this2 = this;\n\n        var startRecord;\n        this.__loaded = false;\n        this.mirrored = this.settings.cameraMirrorDefault;\n        this.container.append(tpl('tab-camera'));\n        this.container.addClass('uploadcare--camera');\n        this.container.addClass('uploadcare--camera_status_requested');\n        this.container.find('.uploadcare--camera__button_type_capture').on('click', this.__capture);\n        startRecord = this.container.find('.uploadcare--camera__button_type_start-record').on('click', this.__startRecording);\n        this.container.find('.uploadcare--camera__button_type_stop-record').on('click', this.__stopRecording);\n        this.container.find('.uploadcare--camera__button_type_cancel-record').on('click', this.__cancelRecording);\n        this.container.find('.uploadcare--camera__button_type_mirror').on('click', this.__mirror);\n        this.container.find('.uploadcare--camera__button_type_retry').on('click', this.__requestCamera);\n\n        if (!this.MediaRecorder || this.settings.imagesOnly) {\n          startRecord.hide();\n        }\n\n        this.video = this.container.find('.uploadcare--camera__video');\n        this.video.toggleClass('uploadcare--camera__video_mirrored', this.mirrored);\n        this.video.on('loadeddata', function () {\n          return this.play();\n        });\n        this.dialogApi.progress(function (name) {\n          if (name === _this2.name) {\n            if (!_this2.__loaded) {\n              return _this2.__requestCamera();\n            }\n          } else {\n            if (_this2.__loaded && isSecure) {\n              return _this2.__revoke();\n            }\n          }\n        });\n        return this.dialogApi.always(this.__revoke);\n      }\n    }, {\n      key: \"__checkCompatibility\",\n      value: function __checkCompatibility() {\n        var isLocalhost;\n\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n          this.getUserMedia = function (constraints, successCallback, errorCallback) {\n            return navigator.mediaDevices.getUserMedia(constraints).then(successCallback).catch(errorCallback);\n          };\n        } else {\n          this.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n        }\n\n        this.URL = window.URL || window.webkitURL;\n        this.MediaRecorder = window.MediaRecorder;\n\n        if (!isSecure) {\n          warn('Camera is not allowed for HTTP. Please use HTTPS connection.');\n        }\n\n        isLocalhost = document.location.hostname === 'localhost';\n        return !!this.getUserMedia && Uint8Array && (isSecure || isLocalhost);\n      }\n    }, {\n      key: \"__checkCapture\",\n      value: function __checkCapture() {\n        var input;\n        input = document.createElement('input');\n        input.setAttribute('capture', 'camera');\n        return !!input.capture;\n      }\n    }, {\n      key: \"__setState\",\n      value: function __setState(newState) {\n        var oldStates = ['', 'ready', 'requested', 'denied', 'not-founded', 'recording', 'error'].join(' uploadcare--camera_status_');\n        this.container.removeClass(oldStates).addClass(\"uploadcare--camera_status_\".concat(newState));\n        this.container.find('.uploadcare--camera__button').focus();\n      }\n    }, {\n      key: \"__requestCamera\",\n      value: function __requestCamera() {\n        var _this3 = this;\n\n        this.__loaded = true;\n        return this.getUserMedia.call(navigator, {\n          audio: true,\n          video: {\n            width: {\n              ideal: 1920\n            },\n            height: {\n              ideal: 1080\n            },\n            frameRate: {\n              ideal: 30\n            }\n          }\n        }, function (stream) {\n          _this3.__setState('ready');\n\n          _this3.__stream = stream;\n\n          if ('srcObject' in _this3.video[0]) {\n            _this3.video.prop('srcObject', stream);\n\n            return _this3.video.on('loadedmetadata', function () {\n              return _this3.video[0].play();\n            });\n          } else {\n            if (_this3.URL) {\n              _this3.__streamObject = _this3.URL.createObjectURL(stream);\n\n              _this3.video.prop('src', _this3.__streamObject);\n            } else {\n              _this3.video.prop('src', stream);\n            }\n\n            return _this3.video[0].play();\n          }\n        }, function (error) {\n          var handle = Object.create(null);\n\n          handle.NotFoundError = function () {\n            _this3.__setState('not-founded');\n          };\n\n          handle.NotAllowedError = function () {\n            _this3.__setState('denied');\n          };\n\n          handle.other = function () {\n            _this3.__setState('denied'); // TODO: add common error state: this.__setState('error')\n\n\n            console.warn('Camera error occurred: ' + error.name);\n          };\n\n          (handle[error.name] || handle.other)();\n          _this3.__loaded = false;\n          return _this3.__loaded;\n        });\n      }\n    }, {\n      key: \"__revoke\",\n      value: function __revoke() {\n        var base;\n\n        this.__setState('requested');\n\n        this.__loaded = false;\n\n        if (!this.__stream) {\n          return;\n        }\n\n        if (this.__streamObject) {\n          this.URL.revokeObjectURL(this.__streamObject);\n        }\n\n        if (this.__stream.getTracks) {\n          $__default['default'].each(this.__stream.getTracks(), function () {\n            return typeof this.stop === 'function' ? this.stop() : undefined;\n          });\n        } else {\n          if (typeof (base = this.__stream).stop === 'function') {\n            base.stop();\n          }\n        }\n\n        this.__stream = null;\n        return this.__stream;\n      }\n    }, {\n      key: \"__mirror\",\n      value: function __mirror() {\n        this.mirrored = !this.mirrored;\n        return this.video.toggleClass('uploadcare--camera__video_mirrored', this.mirrored);\n      }\n    }, {\n      key: \"__capture\",\n      value: function __capture() {\n        var _this4 = this;\n\n        var canvas, ctx, h, video, w;\n        video = this.video[0];\n        w = video.videoWidth;\n        h = video.videoHeight;\n        canvas = document.createElement('canvas');\n        canvas.width = w;\n        canvas.height = h;\n        ctx = canvas.getContext('2d');\n\n        if (this.mirrored) {\n          ctx.translate(w, 0);\n          ctx.scale(-1, 1);\n        }\n\n        ctx.drawImage(video, 0, 0, w, h);\n        return canvasToBlob(canvas, 'image/jpeg', 0.9, function (blob) {\n          canvas.width = canvas.height = 1;\n          blob.name = 'camera.jpg';\n\n          _this4.dialogApi.addFiles('object', [[blob, {\n            source: 'camera'\n          }]]);\n\n          return _this4.dialogApi.switchTab('preview');\n        });\n      }\n    }, {\n      key: \"__startRecording\",\n      value: function __startRecording() {\n        var _this5 = this;\n\n        this.__setState('recording');\n\n        this.__chunks = [];\n        var __recorderOptions = {};\n        var mimeTypes = this.settings.videoPreferredMimeTypes;\n\n        if (mimeTypes != null) {\n          var mimeType = find($__default['default'].isArray(mimeTypes) ? mimeTypes : [mimeTypes], function (mimeType) {\n            return _this5.MediaRecorder.isTypeSupported(mimeType);\n          });\n\n          if (mimeType != null) {\n            __recorderOptions.mimeType = mimeType;\n          }\n        }\n\n        var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n\n        if (__recorderOptions.mimeType == null && isFirefox && this.MediaRecorder.isTypeSupported('video/webm')) {\n          __recorderOptions.mimeType = 'video/webm';\n        }\n\n        if (this.settings.audioBitsPerSecond !== null) {\n          __recorderOptions.audioBitsPerSecond = this.settings.audioBitsPerSecond;\n        }\n\n        if (this.settings.videoBitsPerSecond !== null) {\n          __recorderOptions.videoBitsPerSecond = this.settings.videoBitsPerSecond;\n        }\n\n        if (Object.keys(__recorderOptions).length !== 0) {\n          this.__recorder = new this.MediaRecorder(this.__stream, __recorderOptions);\n        } else {\n          this.__recorder = new this.MediaRecorder(this.__stream);\n        }\n\n        this.__recorder.start();\n\n        this.__recorder.ondataavailable = function (e) {\n          return _this5.__chunks.push(e.data);\n        };\n\n        return this.__recorder.ondataavailable;\n      }\n    }, {\n      key: \"__stopRecording\",\n      value: function __stopRecording() {\n        var _this6 = this;\n\n        this.__setState('ready');\n\n        this.__recorder.onstop = function () {\n          var blob, ext;\n          blob = new window.Blob(_this6.__chunks, {\n            type: _this6.__recorder.mimeType\n          });\n          ext = _this6.__guessExtensionByMime(_this6.__recorder.mimeType);\n          blob.name = \"record.\".concat(ext);\n\n          _this6.dialogApi.addFiles('object', [[blob, {\n            source: 'camera'\n          }]]);\n\n          _this6.dialogApi.switchTab('preview');\n\n          _this6.__chunks = [];\n          return _this6.__chunks;\n        };\n\n        return this.__recorder.stop();\n      }\n    }, {\n      key: \"__cancelRecording\",\n      value: function __cancelRecording() {\n        this.__setState('ready');\n\n        this.__recorder.stop();\n\n        this.__chunks = [];\n        return this.__chunks;\n      }\n    }, {\n      key: \"__guessExtensionByMime\",\n      value: function __guessExtensionByMime(mime) {\n        var knownContainers = {\n          mp4: 'mp4',\n          ogg: 'ogg',\n          webm: 'webm',\n          quicktime: 'mov',\n          'x-matroska': 'mkv'\n        }; // MediaRecorder.mimeType returns empty string in Firefox.\n        // Firefox record video as WebM now by default.\n        // @link https://bugzilla.mozilla.org/show_bug.cgi?id=1512175\n\n        if (mime === '') {\n          return 'webm';\n        } // e.g. \"video/x-matroska;codecs=avc1,opus\"\n\n\n        if (mime) {\n          // e.g. [\"video\", \"x-matroska;codecs=avc1,opus\"]\n          mime = mime.split('/');\n\n          if (mime[0] === 'video') {\n            // e.g. \"x-matroska;codecs=avc1,opus\"\n            mime = mime.slice(1).join('/'); // e.g. \"x-matroska\"\n\n            var container = mime.split(';')[0]; // e.g. \"mkv\"\n\n            if (knownContainers[container]) {\n              return knownContainers[container];\n            }\n          }\n        } // In all other cases just return the base extension for all times\n\n\n        return 'avi';\n      }\n    }, {\n      key: \"displayed\",\n      value: function displayed() {\n        this.dialogApi.takeFocus() && this.container.find('.uploadcare--camera__button').focus();\n      }\n    }]);\n\n    return CameraTab;\n  }();\n\n  /**\n   * jquery.Jcrop.js v0.9.10\n   * jQuery Image Cropping Plugin - released under MIT License \n   * Author: Kelly Hallman <khallman@gmail.com>\n   * http://github.com/tapmodo/Jcrop\n   * Copyright (c) 2008-2012 Tapmodo Interactive LLC {{{\n   *\n   * Permission is hereby granted, free of charge, to any person\n   * obtaining a copy of this software and associated documentation\n   * files (the \"Software\"), to deal in the Software without\n   * restriction, including without limitation the rights to use,\n   * copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the\n   * Software is furnished to do so, subject to the following\n   * conditions:\n   *\n   * The above copyright notice and this permission notice shall be\n   * included in all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n   * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n   * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n   * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n   * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n   * OTHER DEALINGS IN THE SOFTWARE.\n   *\n   * }}}\n   */\n\n  isWindowDefined() && function ($) {\n    $.Jcrop = function (obj, opt) {\n      var options = $.extend({}, $.Jcrop.defaults),\n          docOffset;\n   // Internal Methods {{{\n\n      function px(n) {\n        return Math.round(n) + 'px';\n      }\n\n      function cssClass(cl) {\n        return options.baseClass + '-' + cl;\n      }\n\n      function supportsColorFade() {\n        return $.fx.step.hasOwnProperty('backgroundColor');\n      }\n\n      function getPos(obj) //{{{\n      {\n        var pos = $(obj).offset();\n        return [pos.left, pos.top];\n      } //}}}\n\n\n      function mouseAbs(e) //{{{\n      {\n        return [e.pageX - docOffset[0], e.pageY - docOffset[1]];\n      } //}}}\n\n\n      function setOptions(opt) //{{{\n      {\n        if (_typeof(opt) !== 'object') opt = {};\n        options = $.extend(options, opt);\n        $.each(['onChange', 'onSelect', 'onRelease', 'onDblClick'], function (i, e) {\n          if (typeof options[e] !== 'function') options[e] = function () {};\n        });\n      } //}}}\n\n\n      function startDragMode(mode, pos) //{{{\n      {\n        docOffset = getPos($img);\n\n        if (mode === 'move') {\n          return Tracker.activateHandlers(createMover(pos), doneSelect);\n        }\n\n        var fc = Coords.getFixed();\n        var opp = oppLockCorner(mode);\n        var opc = Coords.getCorner(oppLockCorner(opp));\n        Coords.setPressed(Coords.getCorner(opp));\n        Coords.setCurrent(opc);\n        Tracker.activateHandlers(dragmodeHandler(mode, fc), doneSelect);\n      } //}}}\n\n\n      function dragmodeHandler(mode, f) //{{{\n      {\n        return function (pos) {\n          if (!options.aspectRatio) {\n            switch (mode) {\n              case 'e':\n                pos[1] = f.y2;\n                break;\n\n              case 'w':\n                pos[1] = f.y2;\n                break;\n\n              case 'n':\n                pos[0] = f.x2;\n                break;\n\n              case 's':\n                pos[0] = f.x2;\n                break;\n            }\n          } else {\n            switch (mode) {\n              case 'e':\n                pos[1] = f.y + 1;\n                break;\n\n              case 'w':\n                pos[1] = f.y + 1;\n                break;\n\n              case 'n':\n                pos[0] = f.x + 1;\n                break;\n\n              case 's':\n                pos[0] = f.x + 1;\n                break;\n            }\n          }\n\n          Coords.setCurrent(pos);\n          Selection.update();\n        };\n      } //}}}\n\n\n      function createMover(pos) //{{{\n      {\n        var lloc = pos;\n        KeyManager.watchKeys();\n        return function (pos) {\n          Coords.moveOffset([pos[0] - lloc[0], pos[1] - lloc[1]]);\n          lloc = pos;\n          Selection.update();\n        };\n      } //}}}\n\n\n      function oppLockCorner(ord) //{{{\n      {\n        switch (ord) {\n          case 'n':\n            return 'sw';\n\n          case 's':\n            return 'nw';\n\n          case 'e':\n            return 'nw';\n\n          case 'w':\n            return 'ne';\n\n          case 'ne':\n            return 'sw';\n\n          case 'nw':\n            return 'se';\n\n          case 'se':\n            return 'nw';\n\n          case 'sw':\n            return 'ne';\n        }\n      } //}}}\n\n\n      function createDragger(ord) //{{{\n      {\n        return function (e) {\n          if (options.disabled) {\n            return false;\n          }\n\n          if (ord === 'move' && !options.allowMove) {\n            return false;\n          } // Fix position of crop area when dragged the very first time.\n          // Necessary when crop image is in a hidden element when page is loaded.\n\n\n          docOffset = getPos($img);\n          btndown = true;\n          startDragMode(ord, mouseAbs(e));\n          e.stopPropagation();\n          e.preventDefault();\n          return false;\n        };\n      } //}}}\n\n\n      function presize($obj, w, h) //{{{\n      {\n        var nw = $obj.width(),\n            nh = $obj.height();\n\n        if (nw > w && w > 0) {\n          nw = w;\n          nh = w / $obj.width() * $obj.height();\n        }\n\n        if (nh > h && h > 0) {\n          nh = h;\n          nw = h / $obj.height() * $obj.width();\n        }\n\n        xscale = $obj.width() / nw;\n        yscale = $obj.height() / nh;\n        $obj.width(nw).height(nh);\n      } //}}}\n\n\n      function unscale(c) //{{{\n      {\n        return {\n          x: c.x * xscale,\n          y: c.y * yscale,\n          x2: c.x2 * xscale,\n          y2: c.y2 * yscale,\n          w: c.w * xscale,\n          h: c.h * yscale\n        };\n      } //}}}\n\n\n      function doneSelect(pos) //{{{\n      {\n        Coords.getFixed();\n        Selection.enableHandles();\n        Selection.done();\n      } //}}}\n\n\n      function newTracker() //{{{\n      {\n        var trk = $('<div></div>').addClass(cssClass('tracker'));\n        trk.css({\n          opacity: 0,\n          backgroundColor: 'white'\n        });\n        return trk;\n      } //}}}\n      // }}}\n      // Initialization {{{\n      // Sanitize some options {{{\n\n\n      if (_typeof(obj) !== 'object') {\n        obj = $(obj)[0];\n      }\n\n      if (_typeof(opt) !== 'object') {\n        opt = {};\n      } // }}}\n\n\n      setOptions(opt); // Initialize some jQuery objects {{{\n      // The values are SET on the image(s) for the interface\n      // If the original image has any of these set, they will be reset\n      // However, if you destroy() the Jcrop instance the original image's\n      // character in the DOM will be as you left it.\n\n      var img_css = {\n        border: 'none',\n        visibility: 'visible',\n        margin: 0,\n        padding: 0,\n        position: 'absolute',\n        top: 0,\n        left: 0\n      };\n      var $origimg = $(obj),\n          img_mode = true;\n\n      if (obj.tagName == 'IMG') {\n        // Fix size of crop image.\n        // Necessary when crop image is within a hidden element when page is loaded.\n        if ($origimg[0].width != 0 && $origimg[0].height != 0) {\n          // Obtain dimensions from contained img element.\n          $origimg.width($origimg[0].width);\n          $origimg.height($origimg[0].height);\n        } else {\n          // Obtain dimensions from temporary image in case the original is not loaded yet (e.g. IE 7.0). \n          var tempImage = new Image();\n          tempImage.src = $origimg[0].src;\n          $origimg.width(tempImage.width);\n          $origimg.height(tempImage.height);\n        }\n\n        var $img = $origimg.clone().removeAttr('id').css(img_css).show();\n        $img.width($origimg.width());\n        $img.height($origimg.height());\n        $origimg.after($img).hide();\n      } else {\n        $img = $origimg.css(img_css).show();\n        img_mode = false;\n\n        if (options.shade === null) {\n          options.shade = true;\n        }\n      }\n\n      presize($img, options.boxWidth, options.boxHeight);\n      var boundx = $img.width(),\n          boundy = $img.height(),\n          $div = $('<div />').width(boundx).height(boundy).addClass(cssClass('holder')).css({\n        position: 'relative',\n        backgroundColor: options.bgColor\n      }).insertAfter($origimg).append($img);\n\n      if (options.addClass) {\n        $div.addClass(options.addClass);\n      }\n\n      var $img2 = $('<div />'),\n          $img_holder = $('<div />').width('100%').height('100%').css({\n        zIndex: 310,\n        position: 'absolute',\n        overflow: 'hidden'\n      }),\n          $sel = $('<div />').css({\n        position: 'absolute',\n        zIndex: 600\n      }).dblclick(function () {\n        var c = Coords.getFixed();\n        options.onDblClick.call(api, c);\n      }).insertBefore($img).append($img_holder);\n\n      if (img_mode) {\n        $img2 = $('<img />').attr('src', $img.attr('src')).css(img_css).width(boundx).height(boundy), $img_holder.append($img2);\n      }\n\n      var bound = options.boundary;\n      var $trk = newTracker().width(boundx + bound * 2).height(boundy + bound * 2).css({\n        position: 'absolute',\n        top: px(-bound),\n        left: px(-bound),\n        zIndex: 290\n      });\n      /* }}} */\n      // Set more variables {{{\n\n      var bgcolor = options.bgColor,\n          bgopacity = options.bgOpacity,\n          xlimit,\n          ylimit,\n          xmin,\n          ymin,\n          xscale,\n          yscale,\n          btndown,\n          shift_down;\n      docOffset = getPos($img); // }}}\n      // }}}\n      // Internal Modules {{{\n      // Touch Module {{{ \n\n      var Touch = function () {\n        // Touch support detection function adapted (under MIT License)\n        // from code by Jeffrey Sambells - http://github.com/iamamused/\n        function hasTouchSupport() {\n          var support = {},\n              events = ['touchstart', 'touchmove', 'touchend'],\n              el = document.createElement('div'),\n              i;\n\n          try {\n            for (i = 0; i < events.length; i++) {\n              var eventName = events[i];\n              eventName = 'on' + eventName;\n              var isSupported = (eventName in el);\n\n              if (!isSupported) {\n                el.setAttribute(eventName, 'return;');\n                isSupported = typeof el[eventName] == 'function';\n              }\n\n              support[events[i]] = isSupported;\n            }\n\n            return support.touchstart && support.touchend && support.touchmove;\n          } catch (err) {\n            return false;\n          }\n        }\n\n        function detectSupport() {\n          if (options.touchSupport === true || options.touchSupport === false) return options.touchSupport;else return hasTouchSupport();\n        }\n\n        return {\n          createDragger: function createDragger(ord) {\n            return function (e) {\n              e.pageX = e.originalEvent.changedTouches[0].pageX;\n              e.pageY = e.originalEvent.changedTouches[0].pageY;\n\n              if (options.disabled) {\n                return false;\n              }\n\n              if (ord === 'move' && !options.allowMove) {\n                return false;\n              }\n\n              btndown = true;\n              startDragMode(ord, mouseAbs(e));\n              e.stopPropagation();\n              e.preventDefault();\n              return false;\n            };\n          },\n          isSupported: hasTouchSupport,\n          support: detectSupport()\n        };\n      }(); // }}}\n      // Coords Module {{{\n\n\n      var Coords = function () {\n        var x1 = 0,\n            y1 = 0,\n            x2 = 0,\n            y2 = 0,\n            ox,\n            oy;\n\n        function setPressed(pos) //{{{\n        {\n          pos = rebound(pos);\n          x2 = x1 = pos[0];\n          y2 = y1 = pos[1];\n        } //}}}\n\n\n        function setCurrent(pos) //{{{\n        {\n          pos = rebound(pos);\n          ox = pos[0] - x2;\n          oy = pos[1] - y2;\n          x2 = pos[0];\n          y2 = pos[1];\n        } //}}}\n\n\n        function getOffset() //{{{\n        {\n          return [ox, oy];\n        } //}}}\n\n\n        function moveOffset(offset) //{{{\n        {\n          var ox = offset[0],\n              oy = offset[1];\n\n          if (0 > x1 + ox) {\n            ox -= ox + x1;\n          }\n\n          if (0 > y1 + oy) {\n            oy -= oy + y1;\n          }\n\n          if (boundy < y2 + oy) {\n            oy += boundy - (y2 + oy);\n          }\n\n          if (boundx < x2 + ox) {\n            ox += boundx - (x2 + ox);\n          }\n\n          x1 += ox;\n          x2 += ox;\n          y1 += oy;\n          y2 += oy;\n        } //}}}\n\n\n        function getCorner(ord) //{{{\n        {\n          var c = getFixed();\n\n          switch (ord) {\n            case 'ne':\n              return [c.x2, c.y];\n\n            case 'nw':\n              return [c.x, c.y];\n\n            case 'se':\n              return [c.x2, c.y2];\n\n            case 'sw':\n              return [c.x, c.y2];\n          }\n        } //}}}\n\n\n        function getFixed() //{{{\n        {\n          if (!options.aspectRatio) {\n            return getRect();\n          } // This function could use some optimization I think...\n\n\n          var aspect = options.aspectRatio,\n              min_x = options.minSize[0] / xscale,\n              //min_y = options.minSize[1]/yscale,\n          max_x = options.maxSize[0] / xscale;\n              options.maxSize[1] / yscale;\n              var rw = x2 - x1,\n              rh = y2 - y1,\n              rwa = Math.abs(rw),\n              rha = Math.abs(rh),\n              real_ratio = rwa / rha,\n              xx,\n              yy,\n              w,\n              h;\n\n          if (max_x === 0) {\n            max_x = boundx * 10;\n          }\n\n          if (real_ratio < aspect) {\n            yy = y2;\n            w = rha * aspect;\n            xx = rw < 0 ? x1 - w : w + x1;\n\n            if (xx < 0) {\n              xx = 0;\n              h = Math.abs((xx - x1) / aspect);\n              yy = rh < 0 ? y1 - h : h + y1;\n            } else if (xx > boundx) {\n              xx = boundx;\n              h = Math.abs((xx - x1) / aspect);\n              yy = rh < 0 ? y1 - h : h + y1;\n            }\n          } else {\n            xx = x2;\n            h = rwa / aspect;\n            yy = rh < 0 ? y1 - h : y1 + h;\n\n            if (yy < 0) {\n              yy = 0;\n              w = Math.abs((yy - y1) * aspect);\n              xx = rw < 0 ? x1 - w : w + x1;\n            } else if (yy > boundy) {\n              yy = boundy;\n              w = Math.abs(yy - y1) * aspect;\n              xx = rw < 0 ? x1 - w : w + x1;\n            }\n          } // Magic %-)\n\n\n          if (xx > x1) {\n            // right side\n            if (xx - x1 < min_x) {\n              xx = x1 + min_x;\n            } else if (xx - x1 > max_x) {\n              xx = x1 + max_x;\n            }\n\n            if (yy > y1) {\n              yy = y1 + (xx - x1) / aspect;\n            } else {\n              yy = y1 - (xx - x1) / aspect;\n            }\n          } else if (xx < x1) {\n            // left side\n            if (x1 - xx < min_x) {\n              xx = x1 - min_x;\n            } else if (x1 - xx > max_x) {\n              xx = x1 - max_x;\n            }\n\n            if (yy > y1) {\n              yy = y1 + (x1 - xx) / aspect;\n            } else {\n              yy = y1 - (x1 - xx) / aspect;\n            }\n          }\n\n          if (xx < 0) {\n            x1 -= xx;\n            xx = 0;\n          } else if (xx > boundx) {\n            x1 -= xx - boundx;\n            xx = boundx;\n          }\n\n          if (yy < 0) {\n            y1 -= yy;\n            yy = 0;\n          } else if (yy > boundy) {\n            y1 -= yy - boundy;\n            yy = boundy;\n          }\n\n          return makeObj(flipCoords(x1, y1, xx, yy));\n        } //}}}\n\n\n        function rebound(p) //{{{\n        {\n          if (p[0] < 0) {\n            p[0] = 0;\n          }\n\n          if (p[1] < 0) {\n            p[1] = 0;\n          }\n\n          if (p[0] > boundx) {\n            p[0] = boundx;\n          }\n\n          if (p[1] > boundy) {\n            p[1] = boundy;\n          }\n\n          return [p[0], p[1]];\n        } //}}}\n\n\n        function flipCoords(x1, y1, x2, y2) //{{{\n        {\n          var xa = x1,\n              xb = x2,\n              ya = y1,\n              yb = y2;\n\n          if (x2 < x1) {\n            xa = x2;\n            xb = x1;\n          }\n\n          if (y2 < y1) {\n            ya = y2;\n            yb = y1;\n          }\n\n          return [xa, ya, xb, yb];\n        } //}}}\n\n\n        function getRect() //{{{\n        {\n          var xsize = x2 - x1,\n              ysize = y2 - y1,\n              delta;\n\n          if (xlimit && Math.abs(xsize) > xlimit) {\n            x2 = xsize > 0 ? x1 + xlimit : x1 - xlimit;\n          }\n\n          if (ylimit && Math.abs(ysize) > ylimit) {\n            y2 = ysize > 0 ? y1 + ylimit : y1 - ylimit;\n          }\n\n          if (ymin / yscale && Math.abs(ysize) < ymin / yscale) {\n            y2 = ysize > 0 ? y1 + ymin / yscale : y1 - ymin / yscale;\n          }\n\n          if (xmin / xscale && Math.abs(xsize) < xmin / xscale) {\n            x2 = xsize > 0 ? x1 + xmin / xscale : x1 - xmin / xscale;\n          }\n\n          if (x1 < 0) {\n            x2 -= x1;\n            x1 -= x1;\n          }\n\n          if (y1 < 0) {\n            y2 -= y1;\n            y1 -= y1;\n          }\n\n          if (x2 < 0) {\n            x1 -= x2;\n            x2 -= x2;\n          }\n\n          if (y2 < 0) {\n            y1 -= y2;\n            y2 -= y2;\n          }\n\n          if (x2 > boundx) {\n            delta = x2 - boundx;\n            x1 -= delta;\n            x2 -= delta;\n          }\n\n          if (y2 > boundy) {\n            delta = y2 - boundy;\n            y1 -= delta;\n            y2 -= delta;\n          }\n\n          if (x1 > boundx) {\n            delta = x1 - boundy;\n            y2 -= delta;\n            y1 -= delta;\n          }\n\n          if (y1 > boundy) {\n            delta = y1 - boundy;\n            y2 -= delta;\n            y1 -= delta;\n          }\n\n          return makeObj(flipCoords(x1, y1, x2, y2));\n        } //}}}\n\n\n        function makeObj(a) //{{{\n        {\n          return {\n            x: a[0],\n            y: a[1],\n            x2: a[2],\n            y2: a[3],\n            w: a[2] - a[0],\n            h: a[3] - a[1]\n          };\n        } //}}}\n\n\n        return {\n          flipCoords: flipCoords,\n          setPressed: setPressed,\n          setCurrent: setCurrent,\n          getOffset: getOffset,\n          moveOffset: moveOffset,\n          getCorner: getCorner,\n          getFixed: getFixed\n        };\n      }(); //}}}\n      // Shade Module {{{\n\n\n      var Shade = function () {\n        var enabled = false,\n            holder = $('<div />').css({\n          position: 'absolute',\n          zIndex: 240,\n          opacity: 0\n        }),\n            shades = {\n          top: createShade(),\n          left: createShade().height(boundy),\n          right: createShade().height(boundy),\n          bottom: createShade()\n        };\n\n        function resizeShades(w, h) {\n          shades.left.css({\n            height: px(h)\n          });\n          shades.right.css({\n            height: px(h)\n          });\n        }\n\n        function updateAuto() {\n          return updateShade(Coords.getFixed());\n        }\n\n        function updateShade(c) {\n          shades.top.css({\n            left: px(c.x),\n            width: px(c.w),\n            height: px(c.y)\n          });\n          shades.bottom.css({\n            top: px(c.y2),\n            left: px(c.x),\n            width: px(c.w),\n            height: px(boundy - c.y2)\n          });\n          shades.right.css({\n            left: px(c.x2),\n            width: px(boundx - c.x2)\n          });\n          shades.left.css({\n            width: px(c.x)\n          });\n        }\n\n        function createShade() {\n          return $('<div />').css({\n            position: 'absolute',\n            backgroundColor: options.shadeColor || options.bgColor\n          }).appendTo(holder);\n        }\n\n        function enableShade() {\n          if (!enabled) {\n            enabled = true;\n            holder.insertBefore($img);\n            updateAuto();\n            Selection.setBgOpacity(1, 0, 1);\n            $img2.hide();\n            setBgColor(options.shadeColor || options.bgColor, 1);\n\n            if (Selection.isAwake()) {\n              setOpacity(options.bgOpacity, 1);\n            } else setOpacity(1, 1);\n          }\n        }\n\n        function setBgColor(color, now) {\n          colorChangeMacro(getShades(), color, now);\n        }\n\n        function disableShade() {\n          if (enabled) {\n            holder.remove();\n            $img2.show();\n            enabled = false;\n\n            if (Selection.isAwake()) {\n              Selection.setBgOpacity(options.bgOpacity, 1, 1);\n            } else {\n              Selection.setBgOpacity(1, 1, 1);\n              Selection.disableHandles();\n            }\n\n            colorChangeMacro($div, 0, 1);\n          }\n        }\n\n        function setOpacity(opacity, now) {\n          if (enabled) {\n            if (options.bgFade && !now) {\n              holder.animate({\n                opacity: 1 - opacity\n              }, {\n                queue: false,\n                duration: options.fadeTime\n              });\n            } else holder.css({\n              opacity: 1 - opacity\n            });\n          }\n        }\n\n        function refreshAll() {\n          options.shade ? enableShade() : disableShade();\n          if (Selection.isAwake()) setOpacity(options.bgOpacity);\n        }\n\n        function getShades() {\n          return holder.children();\n        }\n\n        return {\n          update: updateAuto,\n          updateRaw: updateShade,\n          getShades: getShades,\n          setBgColor: setBgColor,\n          enable: enableShade,\n          disable: disableShade,\n          resize: resizeShades,\n          refresh: refreshAll,\n          opacity: setOpacity\n        };\n      }(); // }}}\n      // Selection Module {{{\n\n\n      var Selection = function () {\n        var awake,\n            borders = {},\n            handle = {};\n   // Private Methods\n\n        function insertBorder(type) //{{{\n        {\n          var jq = $('<div />').css({\n            position: 'absolute'\n          }).addClass(cssClass(type));\n          $sel.append(jq);\n          return jq;\n        } //}}}\n\n\n        function dragDiv(ord) //{{{\n        {\n          var jq = $('<div />').mousedown(createDragger(ord)).css({\n            cursor: ord + '-resize',\n            position: 'absolute'\n          }).append('<div/>').addClass('ord-' + ord);\n\n          if (Touch.support) {\n            jq.on('touchstart.jcrop', Touch.createDragger(ord));\n          }\n\n          $sel.append(jq);\n          return jq;\n        } //}}}\n\n\n        function insertHandle(ord) //{{{\n        {\n          return dragDiv(ord).addClass(cssClass('handle'));\n        } //}}}\n\n\n        function createBorders(li) //{{{\n        {\n          var cl, i;\n\n          for (i = 0; i < li.length; i++) {\n            switch (li[i]) {\n              case 'n':\n                cl = 'hline';\n                break;\n\n              case 's':\n                cl = 'hline bottom';\n                break;\n\n              case 'e':\n                cl = 'vline right';\n                break;\n\n              case 'w':\n                cl = 'vline';\n                break;\n            }\n\n            borders[li[i]] = insertBorder(cl);\n          }\n        } //}}}\n\n\n        function createHandles(li) //{{{\n        {\n          var i;\n\n          for (i = 0; i < li.length; i++) {\n            handle[li[i]] = insertHandle(li[i]);\n          }\n        } //}}}\n\n\n        function moveto(x, y) //{{{\n        {\n          if (!options.shade) {\n            $img2.css({\n              top: px(-y),\n              left: px(-x)\n            });\n          }\n\n          $sel.css({\n            top: px(y),\n            left: px(x)\n          });\n        } //}}}\n\n\n        function resize(w, h) //{{{\n        {\n          $sel.width(Math.round(w)).height(Math.round(h));\n        } //}}}\n\n\n        function refresh() //{{{\n        {\n          var c = Coords.getFixed();\n          Coords.setPressed([c.x, c.y]);\n          Coords.setCurrent([c.x2, c.y2]);\n          updateVisible();\n        } //}}}\n        // Internal Methods\n\n\n        function updateVisible(select) //{{{\n        {\n          if (awake) {\n            return update(select);\n          }\n        } //}}}\n\n\n        function update(select) //{{{\n        {\n          var c = Coords.getFixed();\n          resize(c.w, c.h);\n          moveto(c.x, c.y);\n          if (options.shade) Shade.updateRaw(c);\n          awake || show();\n\n          if (select) {\n            options.onSelect.call(api, unscale(c));\n          } else {\n            options.onChange.call(api, unscale(c));\n          }\n        } //}}}\n\n\n        function setBgOpacity(opacity, force, now) //{{{\n        {\n          if (!awake && !force) return;\n\n          if (options.bgFade && !now) {\n            $img.animate({\n              opacity: opacity\n            }, {\n              queue: false,\n              duration: options.fadeTime\n            });\n          } else {\n            $img.css('opacity', opacity);\n          }\n        } //}}}\n\n\n        function show() //{{{\n        {\n          $sel.show();\n          if (options.shade) Shade.opacity(bgopacity);else setBgOpacity(bgopacity, true);\n          awake = true;\n        } //}}}\n\n\n        function release() //{{{\n        {\n          $sel.hide();\n          if (options.shade) Shade.opacity(1);else setBgOpacity(1);\n          awake = false;\n          options.onRelease.call(api);\n        } //}}}\n\n\n        function enableHandles() //{{{\n        {\n\n          if (options.allowResize) {\n            return true;\n          }\n        } //}}}\n\n\n        function disableHandles() //{{{\n        {\n        } //}}}\n\n\n        function animMode(v) //{{{\n        {\n          if (v) ; else {\n            enableHandles();\n          }\n        } //}}}\n\n\n        function done() //{{{\n        {\n          animMode(false);\n          refresh();\n        } //}}}\n        // Insert draggable elements {{{\n        // Insert border divs for outline\n\n\n        if ($.isArray(options.createHandles)) createHandles(options.createHandles);\n        if (options.drawBorders && $.isArray(options.createBorders)) createBorders(options.createBorders); //}}}\n        // This is a hack for iOS5 to support drag/move touch functionality\n\n        $(document).on('touchstart.jcrop-ios', function (e) {\n          if ($(e.currentTarget).hasClass('jcrop-tracker')) e.stopPropagation();\n        });\n        var $track = newTracker().mousedown(createDragger('move')).css({\n          cursor: 'move',\n          position: 'absolute',\n          zIndex: 360\n        });\n\n        if (Touch.support) {\n          $track.on('touchstart.jcrop', Touch.createDragger('move'));\n        }\n\n        $img_holder.append($track);\n        return {\n          updateVisible: updateVisible,\n          update: update,\n          release: release,\n          refresh: refresh,\n          isAwake: function isAwake() {\n            return awake;\n          },\n          setCursor: function setCursor(cursor) {\n            $track.css('cursor', cursor);\n          },\n          enableHandles: enableHandles,\n          enableOnly: function enableOnly() {\n          },\n          disableHandles: disableHandles,\n          animMode: animMode,\n          setBgOpacity: setBgOpacity,\n          done: done\n        };\n      }(); //}}}\n      // Tracker Module {{{\n\n\n      var Tracker = function () {\n        var onMove = function onMove() {},\n            onDone = function onDone() {},\n            trackDoc = options.trackDocument;\n\n        function toFront() //{{{\n        {\n          $trk.css({\n            zIndex: 450\n          });\n\n          if (Touch.support) {\n            $(document).on('touchmove.jcrop', trackTouchMove).on('touchend.jcrop', trackTouchEnd);\n          }\n\n          if (trackDoc) {\n            $(document).on('mousemove.jcrop', trackMove).on('mouseup.jcrop', trackUp);\n          }\n        } //}}}\n\n\n        function toBack() //{{{\n        {\n          $trk.css({\n            zIndex: 290\n          });\n          $(document).off('.jcrop');\n        } //}}}\n\n\n        function trackMove(e) //{{{\n        {\n          onMove(mouseAbs(e));\n          return false;\n        } //}}}\n\n\n        function trackUp(e) //{{{\n        {\n          e.preventDefault();\n          e.stopPropagation();\n\n          if (btndown) {\n            btndown = false;\n            onDone(mouseAbs(e));\n\n            if (Selection.isAwake()) {\n              options.onSelect.call(api, unscale(Coords.getFixed()));\n            }\n\n            toBack();\n\n            onMove = function onMove() {};\n\n            onDone = function onDone() {};\n          }\n\n          return false;\n        } //}}}\n\n\n        function activateHandlers(move, done) //{{{\n        {\n          btndown = true;\n          onMove = move;\n          onDone = done;\n          toFront();\n          return false;\n        } //}}}\n\n\n        function trackTouchMove(e) //{{{\n        {\n          e.pageX = e.originalEvent.changedTouches[0].pageX;\n          e.pageY = e.originalEvent.changedTouches[0].pageY;\n          return trackMove(e);\n        } //}}}\n\n\n        function trackTouchEnd(e) //{{{\n        {\n          e.pageX = e.originalEvent.changedTouches[0].pageX;\n          e.pageY = e.originalEvent.changedTouches[0].pageY;\n          return trackUp(e);\n        } //}}}\n\n\n        if (!trackDoc) {\n          $trk.mousemove(trackMove).mouseup(trackUp).mouseout(trackUp);\n        }\n\n        $img.before($trk);\n        return {\n          activateHandlers: activateHandlers\n        };\n      }(); //}}}\n      // KeyManager Module {{{\n\n\n      var KeyManager = function () {\n        var $keymgr = $('<input type=\"radio\" />').css({\n          position: 'fixed',\n          left: '-120px',\n          width: '12px'\n        }).addClass('jcrop-keymgr'),\n            $keywrap = $('<div />').css({\n          position: 'absolute',\n          overflow: 'hidden'\n        }).append($keymgr);\n\n        function watchKeys() //{{{\n        {\n          if (options.keySupport) {\n            $keymgr.show();\n            $keymgr.focus();\n          }\n        } //}}}\n\n\n        function onBlur(e) //{{{\n        {\n          $keymgr.hide();\n        } //}}}\n\n\n        function doNudge(e, x, y) //{{{\n        {\n          if (options.allowMove) {\n            Coords.moveOffset([x, y]);\n            Selection.updateVisible(true);\n          }\n\n          e.preventDefault();\n          e.stopPropagation();\n        } //}}}\n\n\n        function parseKey(e) //{{{\n        {\n          if (e.ctrlKey || e.metaKey) {\n            return true;\n          }\n\n          shift_down = e.shiftKey ? true : false;\n          var nudge = shift_down ? 10 : 1;\n\n          switch (e.keyCode) {\n            case 37:\n              doNudge(e, -nudge, 0);\n              break;\n\n            case 39:\n              doNudge(e, nudge, 0);\n              break;\n\n            case 38:\n              doNudge(e, 0, -nudge);\n              break;\n\n            case 40:\n              doNudge(e, 0, nudge);\n              break;\n\n            case 9:\n              return true;\n          }\n\n          return false;\n        } //}}}\n\n\n        if (options.keySupport) {\n          $keymgr.keydown(parseKey).blur(onBlur);\n          $keymgr.css({\n            position: 'absolute',\n            left: '-20px'\n          });\n          $keywrap.append($keymgr).insertBefore($img);\n        }\n\n        return {\n          watchKeys: watchKeys\n        };\n      }(); //}}}\n      // }}}\n      // API methods {{{\n\n\n      function setClass(cname) //{{{\n      {\n        $div.removeClass().addClass(cssClass('holder')).addClass(cname);\n      } //}}}\n\n\n      function setSelect(rect) //{{{\n      {\n        setSelectRaw([rect[0] / xscale, rect[1] / yscale, rect[2] / xscale, rect[3] / yscale]);\n        options.onSelect.call(api, unscale(Coords.getFixed()));\n        Selection.enableHandles();\n      } //}}}\n\n\n      function setSelectRaw(l) //{{{\n      {\n        Coords.setPressed([l[0], l[1]]);\n        Coords.setCurrent([l[2], l[3]]);\n        Selection.update();\n      } //}}}\n\n\n      function tellSelect() //{{{\n      {\n        return unscale(Coords.getFixed());\n      } //}}}\n\n\n      function tellScaled() //{{{\n      {\n        return Coords.getFixed();\n      } //}}}\n\n\n      function setOptionsNew(opt) //{{{\n      {\n        setOptions(opt);\n        interfaceUpdate();\n      } //}}}\n\n\n      function disableCrop() //{{{\n      {\n        options.disabled = true;\n        Selection.disableHandles();\n        Selection.setCursor('default');\n      } //}}}\n\n\n      function enableCrop() //{{{\n      {\n        options.disabled = false;\n        interfaceUpdate();\n      } //}}}\n\n\n      function cancelCrop() //{{{\n      {\n        Selection.done();\n        Tracker.activateHandlers(null, null);\n      } //}}}\n\n\n      function destroy() //{{{\n      {\n        $div.remove();\n        $origimg.show();\n        $origimg.css('visibility', 'visible');\n        $(obj).removeData('Jcrop');\n      } //}}}\n\n\n      function colorChangeMacro($obj, color, now) {\n        var mycolor = color || options.bgColor;\n\n        if (options.bgFade && supportsColorFade() && options.fadeTime && !now) {\n          $obj.animate({\n            backgroundColor: mycolor\n          }, {\n            queue: false,\n            duration: options.fadeTime\n          });\n        } else {\n          $obj.css('backgroundColor', mycolor);\n        }\n      }\n\n      function interfaceUpdate(alt) //{{{\n      // This method tweaks the interface based on options object.\n      // Called when options are changed and at end of initialization.\n      {\n        if (options.allowResize) {\n          if (alt) {\n            Selection.enableOnly();\n          } else {\n            Selection.enableHandles();\n          }\n        } else {\n          Selection.disableHandles();\n        }\n\n        Selection.setCursor(options.allowMove ? 'move' : 'default');\n\n        if (options.hasOwnProperty('trueSize')) {\n          xscale = options.trueSize[0] / boundx;\n          yscale = options.trueSize[1] / boundy;\n        }\n\n        if (options.hasOwnProperty('setSelect')) {\n          setSelect(options.setSelect);\n          Selection.done();\n          delete options.setSelect;\n        }\n\n        Shade.refresh();\n\n        if (options.bgColor != bgcolor) {\n          colorChangeMacro(options.shade ? Shade.getShades() : $div, options.shade ? options.shadeColor || options.bgColor : options.bgColor);\n          bgcolor = options.bgColor;\n        }\n\n        if (bgopacity != options.bgOpacity) {\n          bgopacity = options.bgOpacity;\n          if (options.shade) Shade.refresh();else Selection.setBgOpacity(bgopacity);\n        }\n\n        xlimit = options.maxSize[0] || 0;\n        ylimit = options.maxSize[1] || 0;\n        xmin = options.minSize[0] || 0;\n        ymin = options.minSize[1] || 0;\n\n        if (options.hasOwnProperty('outerImage')) {\n          $img.attr('src', options.outerImage);\n          delete options.outerImage;\n        }\n\n        Selection.refresh();\n      } //}}}\n      //}}}\n\n\n      interfaceUpdate(true);\n      var api = {\n        setSelect: setSelect,\n        setOptions: setOptionsNew,\n        tellSelect: tellSelect,\n        tellScaled: tellScaled,\n        setClass: setClass,\n        disable: disableCrop,\n        enable: enableCrop,\n        cancel: cancelCrop,\n        release: Selection.release,\n        destroy: destroy,\n        focus: KeyManager.watchKeys,\n        getBounds: function getBounds() {\n          return [boundx * xscale, boundy * yscale];\n        },\n        getWidgetSize: function getWidgetSize() {\n          return [boundx, boundy];\n        },\n        getScaleFactor: function getScaleFactor() {\n          return [xscale, yscale];\n        },\n        getOptions: function getOptions() {\n          // careful: internal values are returned\n          return options;\n        },\n        ui: {\n          holder: $div,\n          selection: $sel\n        }\n      };\n      $origimg.data('Jcrop', api);\n      return api;\n    };\n\n    $.fn.Jcrop = function (options, callback) //{{{\n    {\n      var api; // Iterate over each object, attach Jcrop\n\n      this.each(function () {\n        // If we've already attached to this object\n        if ($(this).data('Jcrop')) {\n          // The API can be requested this way (undocumented)\n          if (options === 'api') return $(this).data('Jcrop'); // Otherwise, we just reset the options...\n          else $(this).data('Jcrop').setOptions(options);\n        } // If we haven't been attached, preload and attach\n        else {\n            if (this.tagName == 'IMG') $.Jcrop.Loader(this, function () {\n              $(this).css({\n                display: 'block',\n                visibility: 'hidden'\n              });\n              api = $.Jcrop(this, options);\n              if ($.isFunction(callback)) callback.call(api);\n            });else {\n              $(this).css({\n                display: 'block',\n                visibility: 'hidden'\n              });\n              api = $.Jcrop(this, options);\n              if ($.isFunction(callback)) callback.call(api);\n            }\n          }\n      }); // Return \"this\" so the object is chainable (jQuery-style)\n\n      return this;\n    }; //}}}\n    // $.Jcrop.Loader - basic image loader {{{\n\n\n    $.Jcrop.Loader = function (imgobj, success, error) {\n      var $img = $(imgobj),\n          img = $img[0];\n\n      function completeCheck() {\n        if (img.complete) {\n          $img.off('.jcloader');\n          if ($.isFunction(success)) success.call(img);\n        } else window.setTimeout(completeCheck, 50);\n      }\n\n      $img.on('load.jcloader', completeCheck).on('error.jcloader', function (e) {\n        $img.off('.jcloader');\n        if ($.isFunction(error)) error.call(img);\n      });\n\n      if (img.complete && $.isFunction(success)) {\n        $img.off('.jcloader');\n        success.call(img);\n      }\n    }; //}}}\n    // Global Defaults {{{\n\n\n    $.Jcrop.defaults = {\n      // Basic Settings\n      allowMove: true,\n      allowResize: true,\n      trackDocument: true,\n      // Styling Options\n      baseClass: 'jcrop',\n      addClass: null,\n      bgColor: 'black',\n      bgOpacity: 0.6,\n      bgFade: false,\n      aspectRatio: 0,\n      keySupport: true,\n      createHandles: ['n', 's', 'e', 'w', 'nw', 'ne', 'se', 'sw'],\n      createBorders: ['n', 's', 'e', 'w'],\n      drawBorders: true,\n      dragEdges: true,\n      fixedSupport: true,\n      touchSupport: null,\n      shade: null,\n      boxWidth: 0,\n      boxHeight: 0,\n      boundary: 2,\n      fadeTime: 400,\n      animationDelay: 20,\n      swingSpeed: 3,\n      maxSize: [0, 0],\n      minSize: [0, 0],\n      // Callbacks / Event Handlers\n      onChange: function onChange() {},\n      onSelect: function onSelect() {},\n      onDblClick: function onDblClick() {},\n      onRelease: function onRelease() {}\n    }; // }}}\n  }($__default['default']);\n\n  var cropModifierRegExp = /-\\/crop\\/([0-9]+)x([0-9]+)(\\/(center|([0-9]+),([0-9]+)))?\\//i;\n\n  var CropWidget = /*#__PURE__*/function () {\n    function CropWidget(element, originalSize) {\n      var crop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      _classCallCheck(this, CropWidget);\n\n      this.element = element;\n      this.originalSize = originalSize;\n      this.__api = $__default['default'].Jcrop(this.element[0], {\n        trueSize: this.originalSize,\n        baseClass: 'uploadcare--jcrop',\n        addClass: 'uploadcare--crop-widget',\n        createHandles: ['nw', 'ne', 'se', 'sw'],\n        bgColor: 'transparent',\n        bgOpacity: 0.8\n      });\n      this.setCrop(crop);\n      this.setSelection();\n    } //   downscale:\n    // If set to `true` \"-/resize/%preferedSize%/\" will be added\n    // if selected area bigger than `preferedSize`. Default false.\n    //   upscale:\n    // If set to `true` \"-/resize/%preferedSize%/\" will be added\n    // if selected area smaller than `preferedSize`. Default false.\n    //   notLess:\n    // Restrict selection to preferedSize area. Default false.\n    //   preferedSize:\n    // Defines image size you want to get at the end.\n    // If `downscale` option is set to `false`, it defines only\n    // the prefered aspect ratio.\n    // If set to `null` any aspect ratio will be acceptable.\n    // Array: [123, 123]. (optional)\n\n\n    _createClass(CropWidget, [{\n      key: \"setCrop\",\n      value: function setCrop(crop) {\n        this.crop = crop;\n        return this.__api.setOptions({\n          aspectRatio: crop.preferedSize ? crop.preferedSize[0] / crop.preferedSize[1] : 0,\n          minSize: crop.notLess ? fitSize(crop.preferedSize, this.originalSize) : [0, 0]\n        });\n      }\n    }, {\n      key: \"setSelection\",\n      value: function setSelection(selection) {\n        var center, left, size, top;\n\n        if (selection) {\n          center = selection.center;\n          size = [selection.width, selection.height];\n        } else {\n          center = true;\n          size = this.originalSize;\n        }\n\n        if (this.crop.preferedSize) {\n          size = fitSize(this.crop.preferedSize, size, true);\n        }\n\n        if (center) {\n          left = (this.originalSize[0] - size[0]) / 2;\n          top = (this.originalSize[1] - size[1]) / 2;\n        } else {\n          left = selection.left || 0;\n          top = selection.top || 0;\n        }\n\n        return this.__api.setSelect([left, top, size[0] + left, size[1] + top]);\n      }\n    }, {\n      key: \"__parseModifiers\",\n      value: function __parseModifiers(modifiers) {\n        var raw = modifiers != null ? modifiers.match(cropModifierRegExp) : undefined;\n\n        if (raw) {\n          return {\n            width: parseInt(raw[1], 10),\n            height: parseInt(raw[2], 10),\n            center: raw[4] === 'center',\n            left: parseInt(raw[5], 10) || undefined,\n            top: parseInt(raw[6], 10) || undefined\n          };\n        }\n      }\n    }, {\n      key: \"setSelectionFromModifiers\",\n      value: function setSelectionFromModifiers(modifiers) {\n        return this.setSelection(this.__parseModifiers(modifiers));\n      }\n    }, {\n      key: \"getSelection\",\n      value: function getSelection() {\n        var coords, left, top;\n        coords = this.__api.tellSelect();\n        left = Math.round(Math.max(0, coords.x));\n        top = Math.round(Math.max(0, coords.y));\n        return {\n          left: left,\n          top: top,\n          width: Math.round(Math.min(this.originalSize[0], coords.x2)) - left,\n          height: Math.round(Math.min(this.originalSize[1], coords.y2)) - top\n        };\n      }\n    }, {\n      key: \"applySelectionToFile\",\n      value: function applySelectionToFile(file) {\n        var _this = this;\n\n        return file.then(function (info) {\n          return applyCropCoordsToInfo(info, _this.crop, _this.originalSize, _this.getSelection());\n        });\n      }\n    }]);\n\n    return CropWidget;\n  }();\n\n  var BasePreviewTab = /*#__PURE__*/function () {\n    function BasePreviewTab(container, tabButton, dialogApi, settings, name) {\n      var _this = this;\n\n      _classCallCheck(this, BasePreviewTab);\n\n      var notDisabled;\n      this.container = container;\n      this.tabButton = tabButton;\n      this.dialogApi = dialogApi;\n      this.settings = settings;\n      this.name = name;\n\n      this.__initTabButtonCircle();\n\n      this.container.addClass('uploadcare--preview');\n      notDisabled = ':not(:disabled)';\n      this.container.on('click', '.uploadcare--preview__back' + notDisabled, function () {\n        return _this.dialogApi.fileColl.clear();\n      });\n      this.container.on('click', '.uploadcare--preview__done' + notDisabled, this.dialogApi.resolve);\n    }\n\n    _createClass(BasePreviewTab, [{\n      key: \"__initTabButtonCircle\",\n      value: function __initTabButtonCircle() {\n        var _this2 = this;\n\n        var circle, circleDf, circleEl, update;\n        circleEl = this.tabButton.find('.uploadcare--panel__icon');\n        circleDf = $__default['default'].Deferred();\n\n        update = function update() {\n          var i, infos, len, progress, progressInfo;\n          infos = _this2.dialogApi.fileColl.lastProgresses();\n          progress = 0;\n\n          for (i = 0, len = infos.length; i < len; i++) {\n            progressInfo = infos[i];\n            progress += ((progressInfo != null ? progressInfo.progress : undefined) || 0) / infos.length;\n          }\n\n          return circleDf.notify(progress);\n        };\n\n        this.dialogApi.fileColl.onAnyProgress(update);\n        this.dialogApi.fileColl.onAdd.add(update);\n        this.dialogApi.fileColl.onRemove.add(update);\n        update();\n        circle = new Circle(circleEl).listen(circleDf.promise());\n        return this.dialogApi.progress(function () {\n          var _circle;\n\n          return (_circle = circle).update.apply(_circle, arguments);\n        });\n      }\n    }]);\n\n    return BasePreviewTab;\n  }();\n\n  var PreviewTab = /*#__PURE__*/function (_BasePreviewTab) {\n    _inherits(PreviewTab, _BasePreviewTab);\n\n    var _super = _createSuper(PreviewTab);\n\n    function PreviewTab(container, tabButton, dialogApi, settings, name) {\n      var _this;\n\n      _classCallCheck(this, PreviewTab);\n\n      _this = _super.apply(this, arguments); // error\n      // unknown\n      // image\n      // video\n      // regular\n\n      _this.container = container;\n      _this.tabButton = tabButton;\n      _this.dialogApi = dialogApi;\n      _this.settings = settings;\n      _this.name = name;\n      $__default['default'].each(_this.dialogApi.fileColl.get(), function (i, file) {\n        return _this.__setFile(file);\n      });\n\n      _this.dialogApi.fileColl.onAdd.add(_this.__setFile.bind(_assertThisInitialized(_this)));\n\n      _this.widget = null;\n      _this.__state = null;\n      return _this;\n    }\n\n    _createClass(PreviewTab, [{\n      key: \"__setFile\",\n      value: function __setFile(file) {\n        var _this2 = this;\n\n        var ifCur, tryToLoadImagePreview, tryToLoadVideoPreview;\n        this.file = file;\n\n        ifCur = function ifCur(fn) {\n          return function () {\n            if (file === _this2.file) {\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return fn.apply(null, args);\n            }\n          };\n        };\n\n        tryToLoadImagePreview = once(this.__tryToLoadImagePreview.bind(this));\n        tryToLoadVideoPreview = once(this.__tryToLoadVideoPreview.bind(this));\n\n        this.__setState('unknown', {});\n\n        this.file.progress(ifCur(function (info) {\n          var blob, label, source;\n          info = info.incompleteFileInfo;\n          label = (info.name || '') + readableFileSize(info.size, '', ', ');\n\n          _this2.container.find('.uploadcare--preview__file-name').text(label);\n\n          source = info.sourceInfo;\n          blob = Blob;\n\n          if (source.file && blob && source.file instanceof blob) {\n            if (source.file.type && source.file.type.search(/^image\\//i) !== -1) {\n              return tryToLoadImagePreview(file, source.file);\n            } else if (source.file.type && source.file.type.search(/^video\\//i) !== -1) {\n              return tryToLoadVideoPreview(file, source.file);\n            } else {\n              return tryToLoadImagePreview(file, source.file).fail(function () {\n                return tryToLoadVideoPreview(file, source.file);\n              });\n            }\n          }\n        }));\n        this.file.done(ifCur(function (info) {\n          var imgInfo, src;\n\n          if (_this2.__state === 'video') {\n            return;\n          }\n\n          if (info.isImage) {\n            // avoid subsequent image states\n            if (_this2.__state !== 'image') {\n              src = info.originalUrl; // 1162x684 is 1.5 size of conteiner\n\n              src += '-/preview/1162x693/-/setfill/ffffff/-/format/jpeg/-/progressive/yes/';\n\n              if (_this2.settings.previewUrlCallback) {\n                src = _this2.settings.previewUrlCallback(src, info);\n              }\n\n              imgInfo = info.originalImageInfo;\n\n              _this2.__setState('image', {\n                src: src,\n                name: info.name,\n                info: info\n              });\n\n              return _this2.initImage([imgInfo.width, imgInfo.height], info.cdnUrlModifiers);\n            }\n          } else {\n            // , but update if other\n            return _this2.__setState('regular', {\n              file: info\n            });\n          }\n        }));\n        return this.file.fail(ifCur(function (error, info) {\n          return _this2.__setState('error', {\n            error: error,\n            file: info\n          });\n        }));\n      }\n    }, {\n      key: \"__tryToLoadImagePreview\",\n      value: function __tryToLoadImagePreview(file, blob) {\n        var _this3 = this;\n\n        var df;\n        df = $__default['default'].Deferred();\n\n        if (file.state() !== 'pending' || !blob.size || blob.size >= this.settings.multipartMinSize) {\n          return df.reject().promise();\n        }\n\n        drawFileToCanvas(blob, 1550, 924, '#ffffff', this.settings.imagePreviewMaxSize).done(function (canvas, size) {\n          return canvasToBlob(canvas, 'image/jpeg', 0.95, function (blob) {\n            var src;\n            df.resolve();\n            canvas.width = canvas.height = 1;\n\n            if (file.state() !== 'pending' || _this3.dialogApi.state() !== 'pending' || _this3.file !== file) {\n              return;\n            }\n\n            src = URL.createObjectURL(blob);\n\n            _this3.dialogApi.always(function () {\n              return URL.revokeObjectURL(src);\n            });\n\n            if (_this3.__state !== 'image') {\n              _this3.__setState('image', {\n                src: src,\n                name: ''\n              });\n\n              return _this3.initImage(size);\n            }\n          });\n        }).fail(df.reject);\n        return df.promise();\n      }\n    }, {\n      key: \"__tryToLoadVideoPreview\",\n      value: function __tryToLoadVideoPreview(file, blob) {\n        var _this4 = this;\n\n        var df, op, src;\n        df = $__default['default'].Deferred();\n\n        if (!URL || !blob.size) {\n          return df.reject().promise();\n        }\n\n        src = URL.createObjectURL(blob);\n        op = videoLoader(src);\n        op.fail(function () {\n          URL.revokeObjectURL(src);\n          return df.reject();\n        }).done(function () {\n          if (file.state() !== 'pending' || _this4.dialogApi.state() !== 'pending' || _this4.file !== file) {\n            URL.revokeObjectURL(src);\n            return;\n          }\n\n          _this4.dialogApi.always(function () {\n            return URL.revokeObjectURL(src);\n          });\n\n          df.resolve();\n\n          _this4.__setState('video');\n\n          var videoTag = _this4.container.find('.uploadcare--preview__video'); // hack to enable seeking due to bug in MediaRecorder API\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=569840\n\n\n          videoTag.on('loadeddata', function () {\n            var el;\n            el = videoTag.get(0);\n            el.currentTime = 360000; // 100 hours\n\n            return videoTag.off('loadeddata');\n          });\n          videoTag.on('ended', function () {\n            var el;\n            el = videoTag.get(0);\n            el.currentTime = 0;\n            return videoTag.off('ended');\n          }); // end of hack\n\n          videoTag.attr('src', src); // hack to load first-frame poster on ios safari\n\n          return videoTag.get(0).load();\n        });\n        return df.promise();\n      }\n    }, {\n      key: \"__setState\",\n      value: function __setState(state, data) {\n        this.__state = state;\n        data = data || {};\n        data.crop = this.settings.crop;\n        this.container.empty().append(tpl(\"tab-preview-\".concat(state), data));\n        this.container.removeClass(function (index, classes) {\n          return classes.split(' ').filter(function (c) {\n            return !!~c.indexOf('uploadcare--preview_status_');\n          }).join(' ');\n        });\n\n        if (state === 'unknown' && this.settings.crop) {\n          this.container.find('.uploadcare--preview__done').hide();\n        }\n\n        if (state === 'error') {\n          this.container.addClass('uploadcare--preview_status_error-' + data.error);\n        }\n\n        this.container.find('.uploadcare--preview__done').focus();\n      }\n    }, {\n      key: \"initImage\",\n      value: function initImage(imgSize, cdnModifiers) {\n        var _this5 = this;\n\n        var done, img, imgLoader, startCrop;\n        img = this.container.find('.uploadcare--preview__image');\n        done = this.container.find('.uploadcare--preview__done');\n        imgLoader = imageLoader(img[0]).done(function () {\n          return _this5.container.addClass('uploadcare--preview_status_loaded');\n        }).fail(function () {\n          _this5.file = null;\n          return _this5.__setState('error', {\n            error: 'loadImage'\n          });\n        });\n\n        startCrop = function startCrop() {\n          _this5.container.find('.uploadcare--crop-sizes__item').attr('aria-disabled', false).attr('tabindex', 0);\n\n          done.attr('disabled', false).attr('aria-disabled', false);\n          _this5.widget = new CropWidget(img, imgSize, _this5.settings.crop[0]);\n\n          if (cdnModifiers) {\n            _this5.widget.setSelectionFromModifiers(cdnModifiers);\n          }\n\n          return done.on('click', function () {\n            var newFile;\n            newFile = _this5.widget.applySelectionToFile(_this5.file);\n\n            _this5.dialogApi.fileColl.replace(_this5.file, newFile);\n\n            return true;\n          });\n        };\n\n        if (this.settings.crop) {\n          this.container.find('.uploadcare--preview__title').text(locale.t('dialog.tabs.preview.crop.title'));\n          this.container.find('.uploadcare--preview__content').addClass('uploadcare--preview__content_crop');\n          done.attr('disabled', true).attr('aria-disabled', true);\n          done.text(locale.t('dialog.tabs.preview.crop.done'));\n          this.populateCropSizes();\n          this.container.find('.uploadcare--crop-sizes__item').attr('aria-disabled', true).attr('tabindex', -1);\n          return imgLoader.done(function () {\n            // Often IE 11 doesn't do reflow after image.onLoad\n            // and actual image remains 28x30 (broken image placeholder).\n            // Looks like defer always fixes it.\n            return defer(startCrop);\n          });\n        }\n      }\n    }, {\n      key: \"populateCropSizes\",\n      value: function populateCropSizes() {\n        var _this6 = this;\n\n        var control, currentClass, template;\n        control = this.container.find('.uploadcare--crop-sizes');\n        template = control.children();\n        currentClass = 'uploadcare--crop-sizes__item_current';\n        $__default['default'].each(this.settings.crop, function (i, crop) {\n          var caption, gcd$1, icon, item, prefered, size;\n          prefered = crop.preferedSize;\n\n          if (prefered) {\n            gcd$1 = gcd(prefered[0], prefered[1]);\n            caption = \"\".concat(prefered[0] / gcd$1, \":\").concat(prefered[1] / gcd$1);\n          } else {\n            caption = locale.t('dialog.tabs.preview.crop.free');\n          }\n\n          item = template.clone().appendTo(control).attr('data-caption', caption).on('click', function (e) {\n            if ($__default['default'](e.currentTarget).attr('aria-disabled') === 'true') {\n              return;\n            }\n\n            if (!$__default['default'](e.currentTarget).hasClass(currentClass) && _this6.settings.crop.length > 1 && _this6.widget) {\n              _this6.widget.setCrop(crop);\n\n              control.find('>*').removeClass(currentClass);\n              item.addClass(currentClass);\n            }\n          });\n\n          if (prefered) {\n            size = fitSize(prefered, [30, 30], true);\n            return item.children().css({\n              width: Math.max(20, size[0]),\n              height: Math.max(12, size[1])\n            });\n          } else {\n            icon = $__default['default'](\"<svg width='32' height='32'><use xlink:href='#uploadcare--icon-crop-free'/></svg>\").attr('role', 'presentation').attr('class', 'uploadcare--icon');\n            return item.children().append(icon).addClass('uploadcare--crop-sizes__icon_free');\n          }\n        });\n        template.remove();\n        return control.find('>*').eq(0).addClass(currentClass);\n      }\n    }, {\n      key: \"displayed\",\n      value: function displayed() {\n        this.dialogApi.takeFocus() && this.container.find('.uploadcare--preview__done').focus();\n      }\n    }]);\n\n    return PreviewTab;\n  }(BasePreviewTab);\n\n  isWindowDefined() && function ($) {\n    function nearestFinder(targets) {\n      this.targets = targets;\n      this.last = null;\n      this.update();\n    }\n\n    nearestFinder.prototype = {\n      update: function update() {\n        var rows = {};\n        this.targets.each(function (i) {\n          var offset = $(this).offset();\n\n          if (!(offset.top in rows)) {\n            rows[offset.top] = [];\n          }\n\n          rows[offset.top].push([offset.left + this.offsetWidth / 2, this]);\n        });\n        this.rows = rows;\n      },\n      find: function find(x, y) {\n        var minDistance = Infinity;\n        var rows = this.rows;\n        var nearestRow, top, nearest;\n\n        for (top in rows) {\n          var distance = Math.abs(top - y);\n\n          if (distance < minDistance) {\n            minDistance = distance;\n            nearestRow = rows[top];\n          }\n        }\n\n        minDistance = Math.abs(nearestRow[0][0] - x);\n        nearest = nearestRow[0][1];\n\n        for (var i = 1; i < nearestRow.length; i++) {\n          var distance = Math.abs(nearestRow[i][0] - x);\n\n          if (distance < minDistance) {\n            minDistance = distance;\n            nearest = nearestRow[i][1];\n          }\n        }\n\n        return nearest;\n      },\n      findNotLast: function findNotLast(x, y) {\n        var nearest = this.find(x, y);\n\n        if (this.last && nearest && this.last == nearest) {\n          return null;\n        }\n\n        return this.last = nearest;\n      }\n    };\n    var movableName = 'uploadcareMovable';\n    var sortableName = 'uploadcareSortable';\n    var extend = {};\n\n    extend[movableName] = function (o) {\n      o = $.extend({\n        distance: 4,\n        anyButton: false,\n        axis: false,\n        zIndex: 1000,\n        start: $.noop,\n        move: $.noop,\n        finish: $.noop,\n        items: null,\n        keepFake: false,\n        touch: true\n      }, o);\n\n      function fixTouch(e) {\n        if (!o.touch) {\n          return;\n        }\n\n        var touch, s;\n        s = e.originalEvent.touches;\n\n        if (s && s.length) {\n          touch = s[0];\n        } else {\n          s = e.originalEvent.changedTouches;\n\n          if (s && s.length) {\n            touch = s[0];\n          } else {\n            return;\n          }\n        }\n\n        e.pageX = touch.pageX;\n        e.pageY = touch.pageY;\n        e.which = 1;\n      }\n\n      var events = 'mousedown.{} touchstart.{}'.replace(/\\{}/g, movableName);\n      this.on(events, o.items, null, function (eDown) {\n        fixTouch(eDown);\n\n        if (!o.anyButton && eDown.which != 1) {\n          return;\n        }\n\n        eDown.preventDefault();\n        var dragged = false;\n        var $dragged = $(this);\n        var $fake = false;\n        var originalPos = $dragged.position(); // offset parent\n\n        originalPos.top += $dragged.offsetParent().scrollTop();\n        originalPos.left += $dragged.offsetParent().scrollLeft();\n        var events = 'mousemove.{} touchmove.{}'.replace(/\\{}/g, movableName);\n        $(document).on(events, function (eMove) {\n          fixTouch(eMove);\n\n          if (!dragged && (Math.abs(eMove.pageX - eDown.pageX) > o.distance || Math.abs(eMove.pageY - eDown.pageY) > o.distance)) {\n            dragged = true;\n            $fake = $dragged.clone().css({\n              position: 'absolute',\n              zIndex: o.zIndex,\n              width: $dragged.width()\n            }).appendTo($dragged.offsetParent());\n            o.start({\n              event: eMove,\n              dragged: $dragged,\n              fake: $fake\n            });\n          }\n\n          if (!dragged) {\n            return;\n          }\n\n          eMove.preventDefault();\n          var dx = o.axis == 'y' ? 0 : eMove.pageX - eDown.pageX;\n          var dy = o.axis == 'x' ? 0 : eMove.pageY - eDown.pageY;\n          $fake.css({\n            left: dx + originalPos.left,\n            top: dy + originalPos.top\n          });\n          o.move({\n            event: eMove,\n            dragged: $dragged,\n            fake: $fake,\n            dx: dx,\n            dy: dy\n          });\n        });\n        var events = 'mouseup.{} touchend.{} touchcancel.{} touchleave.{}';\n        $(document).on(events.replace(/\\{}/g, movableName), function (eUp) {\n          fixTouch(eUp);\n          var events = 'mousemove.{} touchmove.{} mouseup.{} touchend.{} touchcancel.{} touchleave.{}';\n          $(document).off(events.replace(/\\{}/g, movableName));\n\n          if (!dragged) {\n            return;\n          }\n\n          eUp.preventDefault();\n          var dx = eUp.pageX - eDown.pageX;\n          var dy = eUp.pageY - eDown.pageY;\n          dragged = false;\n          o.finish({\n            event: eUp,\n            dragged: $dragged,\n            fake: $fake,\n            dx: dx,\n            dy: dy\n          });\n\n          if (!o.keepFake) {\n            $fake.remove();\n          }\n        });\n      });\n    };\n\n    extend[sortableName] = function (o) {\n      var oMovable = $.extend({\n        items: '>*'\n      }, o);\n      var o = $.extend({\n        checkBounds: function checkBounds() {\n          return true;\n        },\n        start: $.noop,\n        attach: $.noop,\n        move: $.noop,\n        finish: $.noop\n      }, o);\n      var finder;\n      var initialNext = false;\n      var parent = this;\n\n      oMovable.start = function (info) {\n        o.start(info);\n        finder = new nearestFinder(parent.find(oMovable.items).not(info.fake));\n        initialNext = info.dragged.next();\n      };\n\n      oMovable.move = function (info) {\n        info.nearest = null;\n\n        if (o.checkBounds(info)) {\n          var offset = info.fake.offset();\n          var nearest = finder.findNotLast(offset.left + info.dragged.width() / 2, offset.top);\n          info.nearest = $(nearest);\n\n          if (nearest && nearest != info.dragged[0]) {\n            if (info.dragged.nextAll().filter(nearest).length > 0) {\n              info.dragged.insertAfter(nearest);\n            } else {\n              info.dragged.insertBefore(nearest);\n            }\n\n            o.attach(info);\n            finder.last = null;\n            finder.update();\n          }\n        } else if (finder.last !== null) {\n          finder.last = null;\n\n          if (initialNext.length) {\n            info.dragged.insertBefore(initialNext);\n          } else {\n            info.dragged.parent().append(info.dragged);\n          }\n\n          o.attach(info);\n          finder.update();\n        }\n\n        o.move(info);\n      };\n\n      oMovable.finish = function (info) {\n        var offset = info.fake.offset();\n        info.nearest = null;\n\n        if (o.checkBounds(info)) {\n          info.nearest = $(finder.find(offset.left + info.dragged.width() / 2, offset.top));\n        }\n\n        o.finish(info);\n        finder = null;\n      };\n\n      return this[movableName](oMovable);\n    };\n\n    $.fn.extend(extend);\n  }($__default['default']);\n\n  var PreviewTabMultiple = /*#__PURE__*/function (_BasePreviewTab) {\n    _inherits(PreviewTabMultiple, _BasePreviewTab);\n\n    var _super = _createSuper(PreviewTabMultiple);\n\n    function PreviewTabMultiple() {\n      var _this;\n\n      _classCallCheck(this, PreviewTabMultiple);\n\n      _this = _super.apply(this, arguments);\n\n      _this.container.append(tpl('tab-preview-multiple'));\n\n      _this.__fileTpl = $__default['default'](tpl('tab-preview-multiple-file'));\n      _this.fileListEl = _this.container.find('.uploadcare--files');\n      _this.doneBtnEl = _this.container.find('.uploadcare--preview__done');\n      $__default['default'].each(_this.dialogApi.fileColl.get(), function (i, file) {\n        return _this.__fileAdded(file);\n      });\n\n      _this.__updateContainerView();\n\n      _this.dialogApi.fileColl.onAdd.add(_this.__fileAdded.bind(_assertThisInitialized(_this)), function () {\n        return _this.__updateContainerView();\n      });\n\n      _this.dialogApi.fileColl.onRemove.add(_this.__fileRemoved.bind(_assertThisInitialized(_this)), function () {\n        return _this.__updateContainerView();\n      });\n\n      _this.dialogApi.fileColl.onReplace.add(_this.__fileReplaced.bind(_assertThisInitialized(_this)), function () {\n        return _this.__updateContainerView();\n      });\n\n      _this.dialogApi.fileColl.onAnyProgress(_this.__fileProgress.bind(_assertThisInitialized(_this)));\n\n      _this.dialogApi.fileColl.onAnyDone(_this.__fileDone.bind(_assertThisInitialized(_this)));\n\n      _this.dialogApi.fileColl.onAnyFail(_this.__fileFailed.bind(_assertThisInitialized(_this)));\n\n      _this.fileListEl.addClass(_this.settings.imagesOnly ? 'uploadcare--files_type_tiles' : 'uploadcare--files_type_table');\n\n      _this.__setupSorting();\n\n      return _this;\n    }\n\n    _createClass(PreviewTabMultiple, [{\n      key: \"__setupSorting\",\n      value: function __setupSorting() {\n        var _this2 = this;\n\n        return this.fileListEl.uploadcareSortable({\n          touch: false,\n          axis: this.settings.imagesOnly ? 'xy' : 'y',\n          start: function start(info) {\n            return info.dragged.css('visibility', 'hidden');\n          },\n          finish: function finish(info) {\n            var elements, index;\n            info.dragged.css('visibility', 'visible');\n            elements = _this2.container.find('.uploadcare--file');\n\n            index = function index(file) {\n              return elements.index(_this2.__fileToEl(file));\n            };\n\n            return _this2.dialogApi.fileColl.sort(function (a, b) {\n              return index(a) - index(b);\n            });\n          }\n        });\n      }\n    }, {\n      key: \"__updateContainerView\",\n      value: function __updateContainerView() {\n        var errorContainer, files, hasWrongNumberFiles, title, tooFewFiles, tooManyFiles, wrongNumberFilesMessage;\n        files = this.dialogApi.fileColl.length();\n        tooManyFiles = files > this.settings.multipleMax;\n        tooFewFiles = files < this.settings.multipleMin;\n        hasWrongNumberFiles = tooManyFiles || tooFewFiles;\n        this.doneBtnEl.attr('disabled', hasWrongNumberFiles).attr('aria-disabled', hasWrongNumberFiles);\n        title = locale.t('dialog.tabs.preview.multiple.question').replace('%files%', locale.t('file', files));\n        this.container.find('.uploadcare--preview__title').text(title);\n        errorContainer = this.container.find('.uploadcare--preview__message');\n        errorContainer.empty();\n\n        if (hasWrongNumberFiles) {\n          wrongNumberFilesMessage = tooManyFiles ? locale.t('dialog.tabs.preview.multiple.tooManyFiles').replace('%max%', this.settings.multipleMax) : files && tooFewFiles ? locale.t('dialog.tabs.preview.multiple.tooFewFiles').replace('%min%', this.settings.multipleMin).replace('%files%', locale.t('file', files)) : undefined;\n          return errorContainer.addClass('uploadcare--error').text(wrongNumberFilesMessage);\n        }\n      }\n    }, {\n      key: \"__updateFileInfo\",\n      value: function __updateFileInfo(fileEl, info) {\n        var filename;\n        filename = info.name || locale.t('dialog.tabs.preview.unknownName');\n        fileEl.find('.uploadcare--file__name').text(filename);\n        fileEl.find('.uploadcare--file__description').attr('aria-label', locale.t('dialog.tabs.preview.multiple.file.preview').replace('%file%', filename));\n        fileEl.find('.uploadcare--file__remove').attr('title', locale.t('dialog.tabs.preview.multiple.file.remove').replace('%file%', filename)).attr('aria-label', locale.t('dialog.tabs.preview.multiple.file.remove').replace('%file%', filename));\n        return fileEl.find('.uploadcare--file__size').text(readableFileSize(info.size, '–'));\n      }\n    }, {\n      key: \"__fileProgress\",\n      value: function __fileProgress(file, progressInfo) {\n        var fileEl;\n        fileEl = this.__fileToEl(file);\n        fileEl.find('.uploadcare--progressbar__value').css('width', Math.round(progressInfo.progress * 100) + '%');\n        return this.__updateFileInfo(fileEl, progressInfo.incompleteFileInfo);\n      }\n    }, {\n      key: \"__fileDone\",\n      value: function __fileDone(file, info) {\n        var _this3 = this;\n\n        var cdnURL, fileEl, filePreview, filename;\n        fileEl = this.__fileToEl(file).removeClass('uploadcare--file_status_uploading').addClass('uploadcare--file_status_uploaded');\n        fileEl.find('.uploadcare--progressbar__value').css('width', '100%');\n\n        this.__updateFileInfo(fileEl, info);\n\n        if (info.isImage) {\n          cdnURL = \"\".concat(info.cdnUrl, \"-/quality/lightest/-/preview/108x108/\");\n\n          if (this.settings.previewUrlCallback) {\n            cdnURL = this.settings.previewUrlCallback(cdnURL, info);\n          }\n\n          filename = fileEl.find('.uploadcare--file__name').text();\n          filePreview = $__default['default']('<img>').attr('src', cdnURL).attr('alt', filename).addClass('uploadcare--file__icon');\n        } else {\n          filePreview = $__default['default'](\"<svg width='32' height='32'><use xlink:href='#uploadcare--icon-file'/></svg>\").attr('role', 'presentation').attr('class', 'uploadcare--icon uploadcare--file__icon');\n        }\n\n        fileEl.find('.uploadcare--file__preview').html(filePreview);\n        return fileEl.find('.uploadcare--file__description').on('click', function () {\n          return openPreviewDialog(file, _this3.settings).done(function (newFile) {\n            return _this3.dialogApi.fileColl.replace(file, newFile);\n          });\n        });\n      }\n    }, {\n      key: \"__fileFailed\",\n      value: function __fileFailed(file, error, info) {\n        var fileEl, filePreview;\n        fileEl = this.__fileToEl(file).removeClass('uploadcare--file_status_uploading').addClass('uploadcare--file_status_error');\n        fileEl.find('.uploadcare--file__error').text(locale.t(\"errors.\".concat(error)));\n        filePreview = $__default['default'](\"<svg width='32' height='32'><use xlink:href='#uploadcare--icon-error'/></svg>\").attr('role', 'presentation').attr('class', 'uploadcare--icon uploadcare--file__icon');\n        return fileEl.find('.uploadcare--file__preview').html(filePreview);\n      }\n    }, {\n      key: \"__fileAdded\",\n      value: function __fileAdded(file) {\n        var fileEl;\n        fileEl = this.__createFileEl(file);\n        return fileEl.appendTo(this.fileListEl);\n      }\n    }, {\n      key: \"__fileRemoved\",\n      value: function __fileRemoved(file) {\n        this.__fileToEl(file).remove();\n\n        return $__default['default'](file).removeData();\n      }\n    }, {\n      key: \"__fileReplaced\",\n      value: function __fileReplaced(oldFile, newFile) {\n        var fileEl;\n        fileEl = this.__createFileEl(newFile);\n        fileEl.insertAfter(this.__fileToEl(oldFile));\n        return this.__fileRemoved(oldFile);\n      }\n    }, {\n      key: \"__fileToEl\",\n      value: function __fileToEl(file) {\n        // File can be removed before.\n        return $__default['default'](file).data('dpm-el') || $__default['default']();\n      }\n    }, {\n      key: \"__createFileEl\",\n      value: function __createFileEl(file) {\n        var _this4 = this;\n\n        var fileEl;\n        fileEl = this.__fileTpl.clone().on('click', '.uploadcare--file__remove', function () {\n          return _this4.dialogApi.fileColl.remove(file);\n        });\n        $__default['default'](file).data('dpm-el', fileEl);\n        return fileEl;\n      }\n    }, {\n      key: \"displayed\",\n      value: function displayed() {\n        this.container.find('.uploadcare--preview__done').focus();\n      }\n    }]);\n\n    return PreviewTabMultiple;\n  }(BasePreviewTab);\n\n  var lockDialogFocus = function lockDialogFocus(e) {\n    if (!e.shiftKey && focusableElements.last().is(e.target)) {\n      e.preventDefault();\n      return focusableElements.first().focus();\n    } else if (e.shiftKey && focusableElements.first().is(e.target)) {\n      e.preventDefault();\n      return focusableElements.last().focus();\n    }\n  };\n\n  var lockScroll = function lockScroll(el, toTop) {\n    var left, top;\n    top = el.scrollTop();\n    left = el.scrollLeft();\n\n    if (toTop) {\n      el.scrollTop(0).scrollLeft(0);\n    }\n\n    return function () {\n      return el.scrollTop(top).scrollLeft(left);\n    };\n  };\n\n  isWindowDefined() && $__default['default'](window).on('keydown', function (e) {\n    if (isDialogOpened()) {\n      if (e.which === 27) {\n        // Escape\n        e.stopImmediatePropagation(); // close only topmost dialog\n\n        if (typeof currentDialogPr !== 'undefined' && currentDialogPr !== null) {\n          currentDialogPr.reject();\n        }\n      }\n\n      if (e.which === 9) {\n        // Tab\n        return lockDialogFocus(e);\n      }\n    }\n  });\n  var currentDialogPr = null;\n  var openedClass = 'uploadcare--page';\n  var originalFocusedElement = null;\n  var focusableElements = null;\n\n  var isDialogOpened = function isDialogOpened() {\n    return currentDialogPr !== null;\n  };\n\n  var closeDialog = function closeDialog() {\n    if (currentDialogPr) {\n      currentDialogPr.reject();\n      currentDialogPr = null;\n    }\n  };\n\n  var openDialog = function openDialog(files, tab, settings) {\n    var cancelLock, dialog, dialogPr;\n    closeDialog();\n    originalFocusedElement = document.activeElement;\n    dialog = $__default['default'](tpl('dialog')).appendTo('body');\n    dialogPr = openPanel(dialog.find('.uploadcare--dialog__placeholder'), files, tab, settings, {\n      inModal: true\n    });\n    dialog.find('.uploadcare--panel').addClass('uploadcare--dialog__panel');\n    dialog.addClass('uploadcare--dialog_status_active');\n    dialogPr.dialogElement = dialog;\n    focusableElements = dialog.find('select, input, textarea, button, a[href]');\n    focusableElements.first().focus();\n    cancelLock = lockScroll($__default['default'](window), dialog.css('position') === 'absolute');\n    $__default['default']('html, body').addClass(openedClass);\n    dialog.find('.uploadcare--dialog__close').on('click', dialogPr.reject);\n    dialog.on('dblclick', function (e) {\n      var showStoppers; // handler can be called after element detached (close button)\n\n      if (!$__default['default'].contains(document.documentElement, e.target)) {\n        return;\n      }\n\n      showStoppers = '.uploadcare--dialog__panel, .uploadcare--dialog__powered-by';\n\n      if ($__default['default'](e.target).is(showStoppers) || $__default['default'](e.target).parents(showStoppers).length) {\n        return;\n      }\n\n      return dialogPr.reject();\n    });\n    currentDialogPr = dialogPr.always(function () {\n      $__default['default']('html, body').removeClass(openedClass);\n      currentDialogPr = null;\n      dialog.remove();\n      cancelLock();\n      return originalFocusedElement.focus();\n    });\n    return currentDialogPr;\n  };\n\n  var openPreviewDialog = function openPreviewDialog(file, settings) {\n    var dialog, oldDialogPr; // hide current opened dialog and open new one\n\n    oldDialogPr = currentDialogPr;\n    currentDialogPr = null;\n    settings = $__default['default'].extend({}, settings, {\n      multiple: false,\n      tabs: ''\n    });\n    dialog = openDialog(file, 'preview', settings);\n\n    if (oldDialogPr != null) {\n      oldDialogPr.dialogElement.addClass('uploadcare--dialog_status_inactive');\n    }\n\n    dialog.always(function () {\n      currentDialogPr = oldDialogPr;\n\n      if (oldDialogPr != null) {\n        // still opened\n        $__default['default']('html, body').addClass(openedClass);\n        return oldDialogPr.dialogElement.removeClass('uploadcare--dialog_status_inactive');\n      }\n    });\n    dialog.onTabVisibility(function (tab, shown) {\n      if (tab === 'preview' && !shown) {\n        return dialog.reject();\n      }\n    });\n    return dialog;\n  }; // files - null, or File object, or array of File objects, or FileGroup object\n  // result - File objects or FileGroup object (depends on settings.multiple)\n\n\n  var openPanel = function openPanel(placeholder, files, tab, settings) {\n    var opt = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n      inModal: false\n    };\n    var filter, panel;\n\n    if ($__default['default'].isPlainObject(tab)) {\n      settings = tab;\n      tab = null;\n    }\n\n    if (!files) {\n      files = [];\n    } else if (isFileGroup(files)) {\n      files = files.files();\n    } else if (!$__default['default'].isArray(files)) {\n      files = [files];\n    }\n\n    settings = build(settings);\n    panel = new Panel(settings, placeholder, files, tab, opt).publicPromise();\n\n    filter = function filter(files) {\n      if (settings.multiple) {\n        return FileGroup(files, settings);\n      } else {\n        return files[0];\n      }\n    };\n\n    return then(panel, filter, filter).promise(panel);\n  };\n\n  var registeredTabs = {};\n\n  var registerTab = function registerTab(tabName, constructor) {\n    registeredTabs[tabName] = constructor;\n    return registeredTabs[tabName];\n  };\n\n  registerTab('file', FileTab);\n  registerTab('url', UrlTab);\n  registerTab('camera', CameraTab);\n  registerTab('facebook', RemoteTab);\n  registerTab('dropbox', RemoteTab);\n  registerTab('gdrive', RemoteTab);\n  registerTab('gphotos', RemoteTab);\n  registerTab('instagram', RemoteTab);\n  registerTab('flickr', RemoteTab);\n  registerTab('vk', RemoteTab);\n  registerTab('evernote', RemoteTab);\n  registerTab('box', RemoteTab);\n  registerTab('onedrive', RemoteTab);\n  registerTab('huddle', RemoteTab);\n  registerTab('empty-pubkey', function (tabPanel, _1, _2, settings) {\n    return tabPanel.append(emptyKeyText);\n  });\n  registerTab('preview', function (tabPanel, tabButton, dialogApi, settings, name) {\n    var tabCls;\n\n    if (!settings.previewStep && dialogApi.fileColl.length() === 0) {\n      return;\n    }\n\n    tabCls = settings.multiple ? PreviewTabMultiple : PreviewTab; // eslint-disable-next-line new-cap\n\n    return new tabCls(tabPanel, tabButton, dialogApi, settings, name);\n  });\n\n  var Panel = /*#__PURE__*/function () {\n    function Panel(settings1, placeholder, files, tab, opt) {\n      var _this = this;\n\n      _classCallCheck(this, Panel);\n\n      var sel;\n      this.inModal = opt.inModal || false; // (fileType, data) or ([fileObject, fileObject])\n\n      this.addFiles = this.addFiles.bind(this);\n      this.__resolve = this.__resolve.bind(this);\n      this.__reject = this.__reject.bind(this);\n      this.__updateFooter = this.__updateFooter.bind(this);\n      this.__closePanel = this.__closePanel.bind(this);\n      this.switchTab = this.switchTab.bind(this);\n      this.showTab = this.showTab.bind(this);\n      this.hideTab = this.hideTab.bind(this);\n      this.isTabVisible = this.isTabVisible.bind(this);\n      this.openMenu = this.openMenu.bind(this);\n      this.settings = settings1;\n      this.dfd = $__default['default'].Deferred();\n      this.dfd.always(this.__closePanel);\n      sel = '.uploadcare--panel';\n      this.content = $__default['default'](tpl('dialog__panel'));\n      this.panel = this.content.find(sel).add(this.content.filter(sel));\n      this.placeholder = $__default['default'](placeholder);\n      this.placeholder.replaceWith(this.content);\n      this.panel.append($__default['default'](tpl('icons')));\n\n      if (this.settings.multiple) {\n        this.panel.addClass('uploadcare--panel_multiple');\n      }\n\n      this.panel.find('.uploadcare--menu__toggle').on('click', function () {\n        return _this.panel.find('.uploadcare--menu').toggleClass('uploadcare--menu_opened');\n      }); // files collection\n\n      this.files = new CollectionOfPromises(files);\n      this.files.onRemove.add(function () {\n        if (_this.files.length() === 0) {\n          return _this.hideTab('preview');\n        }\n      });\n\n      this.__autoCrop(this.files);\n\n      this.tabs = {};\n\n      this.__prepareFooter();\n\n      this.onTabVisibility = $__default['default'].Callbacks().add(function (tab, show) {\n        return _this.panel.find(\".uploadcare--menu__item_tab_\".concat(tab)).toggleClass('uploadcare--menu__item_hidden', !show);\n      });\n\n      if (this.settings.publicKey) {\n        this.__prepareTabs(tab);\n      } else {\n        this.__welcome();\n      }\n    }\n\n    _createClass(Panel, [{\n      key: \"takeFocus\",\n      value: function takeFocus() {\n        return this.inModal;\n      }\n    }, {\n      key: \"publicPromise\",\n      value: function publicPromise() {\n        if (!this.promise) {\n          this.promise = this.dfd.promise({\n            reject: this.__reject,\n            resolve: this.__resolve,\n            fileColl: this.files,\n            addFiles: this.addFiles,\n            switchTab: this.switchTab,\n            hideTab: this.hideTab,\n            showTab: this.showTab,\n            isTabVisible: this.isTabVisible,\n            openMenu: this.openMenu,\n            takeFocus: this.takeFocus.bind(this),\n            onTabVisibility: publicCallbacks(this.onTabVisibility)\n          });\n        }\n\n        return this.promise;\n      }\n    }, {\n      key: \"addFiles\",\n      value: function addFiles(files, data) {\n        var file, i, len;\n\n        if (data) {\n          // 'files' is actually file type\n          files = filesFrom(files, data, this.settings);\n        }\n\n        if (!this.settings.multiple) {\n          this.files.clear();\n          files = [files[0]];\n        }\n\n        for (i = 0, len = files.length; i < len; i++) {\n          file = files[i];\n\n          if (this.settings.multipleMaxStrict) {\n            if (this.files.length() >= this.settings.multipleMax) {\n              file.cancel();\n              continue;\n            }\n          }\n\n          this.files.add(file);\n        }\n\n        if (this.settings.previewStep) {\n          this.showTab('preview');\n\n          if (!this.settings.multiple) {\n            return this.switchTab('preview');\n          }\n        } else {\n          return this.__resolve();\n        }\n      }\n    }, {\n      key: \"__autoCrop\",\n      value: function __autoCrop(files) {\n        var _this2 = this;\n\n        var crop, i, len, ref;\n\n        if (!this.settings.crop || !this.settings.multiple) {\n          return;\n        }\n\n        ref = this.settings.crop;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          crop = ref[i]; // if even one of crop option sets allow free crop,\n          // we don't need to crop automatically\n\n          if (!crop.preferedSize) {\n            return;\n          }\n        }\n\n        return files.autoThen(function (fileInfo) {\n          var info, size; // .cdnUrlModifiers came from already cropped files\n          // .crop came from autocrop even if autocrop do not set cdnUrlModifiers\n\n          if (!fileInfo.isImage || fileInfo.cdnUrlModifiers || fileInfo.crop) {\n            return fileInfo;\n          }\n\n          info = fileInfo.originalImageInfo;\n          size = fitSize(_this2.settings.crop[0].preferedSize, [info.width, info.height], true);\n          return applyCropCoordsToInfo(fileInfo, _this2.settings.crop[0], [info.width, info.height], {\n            width: size[0],\n            height: size[1],\n            left: Math.round((info.width - size[0]) / 2),\n            top: Math.round((info.height - size[1]) / 2)\n          });\n        });\n      }\n    }, {\n      key: \"__resolve\",\n      value: function __resolve() {\n        return this.dfd.resolve(this.files.get());\n      }\n    }, {\n      key: \"__reject\",\n      value: function __reject() {\n        return this.dfd.reject(this.files.get());\n      }\n    }, {\n      key: \"__prepareTabs\",\n      value: function __prepareTabs(tab) {\n        var i, len, ref, tabName;\n        this.addTab('preview');\n        ref = this.settings.tabs;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          tabName = ref[i];\n          this.addTab(tabName);\n        }\n\n        if (this.files.length()) {\n          this.showTab('preview');\n          this.switchTab('preview');\n        } else {\n          this.hideTab('preview');\n          this.switchTab(tab || this.__firstVisibleTab());\n        }\n\n        if (this.settings.tabs.length === 0) {\n          this.panel.addClass('uploadcare--panel_menu-hidden');\n          return this.panel.find('.uploadcare--panel__menu').addClass('uploadcare--panel__menu_hidden');\n        }\n      }\n    }, {\n      key: \"__prepareFooter\",\n      value: function __prepareFooter() {\n        var _this3 = this;\n\n        var notDisabled;\n        this.footer = this.panel.find('.uploadcare--panel__footer');\n        notDisabled = ':not(:disabled)';\n        this.footer.on('click', '.uploadcare--panel__show-files' + notDisabled, function () {\n          return _this3.switchTab('preview');\n        });\n        this.footer.on('click', '.uploadcare--panel__done' + notDisabled, this.__resolve);\n\n        this.__updateFooter();\n\n        this.files.onAdd.add(this.__updateFooter);\n        return this.files.onRemove.add(this.__updateFooter);\n      }\n    }, {\n      key: \"__updateFooter\",\n      value: function __updateFooter() {\n        var footer, tooFewFiles, tooManyFiles;\n        var files = this.files.length();\n        tooManyFiles = files > this.settings.multipleMax;\n        tooFewFiles = files < this.settings.multipleMin;\n        this.footer.find('.uploadcare--panel__done').attr('disabled', tooManyFiles || tooFewFiles).attr('aria-disabled', tooManyFiles || tooFewFiles);\n        this.footer.find('.uploadcare--panel__show-files').attr('disabled', files === 0).attr('aria-disabled', files === 0);\n        footer = tooManyFiles ? locale.t('dialog.tabs.preview.multiple.tooManyFiles').replace('%max%', this.settings.multipleMax) : files && tooFewFiles ? locale.t('dialog.tabs.preview.multiple.tooFewFiles').replace('%min%', this.settings.multipleMin) : locale.t('dialog.tabs.preview.multiple.title');\n        this.footer.find('.uploadcare--panel__message').toggleClass('uploadcare--panel__message_hidden', files === 0).toggleClass('uploadcare--error', tooManyFiles || tooFewFiles).text(footer.replace('%files%', locale.t('file', files)));\n        return this.footer.find('.uploadcare--panel__file-counter').toggleClass('uploadcare--error', tooManyFiles || tooFewFiles).text(files ? \"(\".concat(files, \")\") : '');\n      }\n    }, {\n      key: \"__closePanel\",\n      value: function __closePanel() {\n        this.panel.replaceWith(this.placeholder);\n        return this.content.remove();\n      }\n    }, {\n      key: \"addTab\",\n      value: function addTab(name) {\n        var _this4 = this;\n\n        var TabCls, tabButton, tabIcon, tabPanel;\n\n        if (name in this.tabs) {\n          return;\n        }\n\n        TabCls = registeredTabs[name];\n\n        if (!TabCls) {\n          throw new Error(\"No such tab: \".concat(name));\n        }\n\n        tabPanel = $__default['default']('<div>').addClass('uploadcare--tab').addClass(\"uploadcare--tab_name_\".concat(name)).insertBefore(this.footer);\n\n        if (name === 'preview') {\n          tabIcon = $__default['default']('<div class=\"uploadcare--menu__icon uploadcare--panel__icon\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">');\n        } else {\n          tabIcon = $__default['default'](\"<svg width='32' height='32'><use xlink:href='#uploadcare--icon-\".concat(name, \"'/></svg>\")).attr('role', 'presentation').attr('class', 'uploadcare--icon uploadcare--menu__icon');\n        }\n\n        tabButton = $__default['default']('<div>', {\n          role: 'button',\n          tabindex: '0'\n        }).addClass('uploadcare--menu__item').addClass(\"uploadcare--menu__item_tab_\".concat(name)).attr('title', locale.t(\"dialog.tabs.names.\".concat(name))).append(tabIcon).appendTo(this.panel.find('.uploadcare--menu__items')).on('click', function () {\n          if (name === _this4.currentTab) {\n            return _this4.panel.find('.uploadcare--panel__menu').removeClass('uploadcare--menu_opened');\n          } else {\n            return _this4.switchTab(name);\n          }\n        });\n        this.tabs[name] = new TabCls(tabPanel, tabButton, this.publicPromise(), this.settings, name);\n        return this.tabs[name];\n      }\n    }, {\n      key: \"switchTab\",\n      value: function switchTab(tab) {\n        var className;\n\n        if (!tab || this.currentTab === tab) {\n          return;\n        }\n\n        this.currentTab = tab;\n        this.panel.find('.uploadcare--panel__menu').removeClass('uploadcare--menu_opened').attr('data-current', tab);\n        this.panel.find('.uploadcare--menu__item').removeClass('uploadcare--menu__item_current').filter(\".uploadcare--menu__item_tab_\".concat(tab)).addClass('uploadcare--menu__item_current');\n        className = 'uploadcare--tab';\n        this.panel.find(\".\".concat(className)).removeClass(\"\".concat(className, \"_current\")).filter(\".\".concat(className, \"_name_\").concat(tab)).addClass(\"\".concat(className, \"_current\"));\n\n        if (this.tabs[tab].displayed) {\n          this.tabs[tab].displayed();\n        }\n\n        return this.dfd.notify(tab);\n      }\n    }, {\n      key: \"showTab\",\n      value: function showTab(tab) {\n        return this.onTabVisibility.fire(tab, true);\n      }\n    }, {\n      key: \"hideTab\",\n      value: function hideTab(tab) {\n        this.onTabVisibility.fire(tab, false);\n\n        if (this.currentTab === tab) {\n          return this.switchTab(this.__firstVisibleTab());\n        }\n      }\n    }, {\n      key: \"isTabVisible\",\n      value: function isTabVisible(tab) {\n        return !this.panel.find(\".uploadcare--menu__item_tab_\".concat(tab)).is('.uploadcare--menu__item_hidden');\n      }\n    }, {\n      key: \"openMenu\",\n      value: function openMenu() {\n        return this.panel.find('.uploadcare--panel__menu').addClass('uploadcare--menu_opened');\n      }\n    }, {\n      key: \"__firstVisibleTab\",\n      value: function __firstVisibleTab() {\n        var i, len, ref, tab;\n        ref = this.settings.tabs;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          tab = ref[i];\n\n          if (this.isTabVisible(tab)) {\n            return tab;\n          }\n        }\n      }\n    }, {\n      key: \"__welcome\",\n      value: function __welcome() {\n        var i, len, ref, tabName;\n        this.addTab('empty-pubkey');\n        this.switchTab('empty-pubkey');\n        ref = this.settings.tabs;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          tabName = ref[i];\n\n          this.__addFakeTab(tabName);\n        }\n\n        return null;\n      }\n    }, {\n      key: \"__addFakeTab\",\n      value: function __addFakeTab(name) {\n        var tabIcon;\n        tabIcon = $__default['default'](\"<svg width='32' height='32'><use xlink:href='#uploadcare--icon-\".concat(name, \"'/></svg>\")).attr('role', 'presentation').attr('class', 'uploadcare--icon uploadcare--menu__icon');\n\n        if (name === 'empty-pubkey') {\n          tabIcon.addClass('uploadcare--panel__icon');\n        }\n\n        return $__default['default']('<div>').addClass('uploadcare--menu__item').addClass(\"uploadcare--menu__item_tab_\".concat(name)).attr('aria-disabled', true).attr('title', locale.t(\"dialog.tabs.names.\".concat(name))).append(tabIcon).appendTo(this.panel.find('.uploadcare--menu__items'));\n      }\n    }]);\n\n    return Panel;\n  }();\n\n  var BaseWidget = /*#__PURE__*/function () {\n    function BaseWidget(element, settings) {\n      var _this = this;\n\n      _classCallCheck(this, BaseWidget);\n\n      this.element = element;\n      this.settings = settings;\n      this.validators = this.settings.validators = [];\n      this.currentObject = null;\n      this.__onDialogOpen = $__default['default'].Callbacks();\n      this.__onUploadComplete = $__default['default'].Callbacks();\n      this.__onChange = $__default['default'].Callbacks().add(function (object) {\n        return object != null ? object.promise().done(function (info) {\n          return _this.__onUploadComplete.fire(info);\n        }) : undefined;\n      });\n\n      this.__setupWidget();\n\n      this.element.on('change.uploadcare', this.reloadInfo.bind(this)); // Delay loading info to allow set custom validators on page load.\n\n      this.__hasValue = false;\n      defer(function () {\n        // Do not reload info if user call uc.Widget().value(uuid) manual.\n        if (!_this.__hasValue) {\n          return _this.reloadInfo();\n        }\n      });\n    }\n\n    _createClass(BaseWidget, [{\n      key: \"__setupWidget\",\n      value: function __setupWidget() {\n        var _this2 = this;\n\n        var path;\n        this.template = new Template(this.settings, this.element);\n        path = ['buttons.choose'];\n        path.push(this.settings.imagesOnly ? 'images' : 'files');\n        path.push(this.settings.multiple ? 'other' : 'one');\n        this.template.addButton('open', locale.t(path.join('.'))).toggleClass('needsclick', this.settings.systemDialog).on('click', function () {\n          return _this2.openDialog();\n        });\n        this.template.addButton('cancel', locale.t('buttons.cancel')).on('click', function () {\n          return _this2.__setObject(null);\n        });\n        this.template.addButton('remove', locale.t('buttons.remove')).on('click', function () {\n          return _this2.__setObject(null);\n        });\n        this.template.content.on('click', '.uploadcare--widget__file-name', function () {\n          return _this2.openDialog();\n        }); // Enable drag and drop\n\n        receiveDrop(this.template.content, this.__handleDirectSelection.bind(this));\n        return this.template.reset();\n      }\n    }, {\n      key: \"__infoToValue\",\n      value: function __infoToValue(info) {\n        if (info.cdnUrlModifiers || this.settings.pathValue) {\n          return info.cdnUrl;\n        } else {\n          return info.uuid;\n        }\n      }\n    }, {\n      key: \"__reset\",\n      value: function __reset() {\n        var object; // low-level primitive. @__setObject(null) could be better.\n\n        object = this.currentObject;\n        this.currentObject = null;\n\n        if (object != null) {\n          if (typeof object.cancel === 'function') {\n            object.cancel();\n          }\n        }\n\n        return this.template.reset();\n      }\n    }, {\n      key: \"__setObject\",\n      value: function __setObject(newFile) {\n        if (newFile === this.currentObject) {\n          return;\n        }\n\n        this.__reset();\n\n        if (newFile) {\n          this.currentObject = newFile;\n\n          this.__watchCurrentObject();\n        } else {\n          this.element.val('');\n        }\n\n        return this.__onChange.fire(this.currentObject);\n      }\n    }, {\n      key: \"__watchCurrentObject\",\n      value: function __watchCurrentObject() {\n        var _this3 = this;\n\n        var object;\n        object = this.__currentFile();\n\n        if (object) {\n          this.template.listen(object);\n          return object.done(function (info) {\n            if (object === _this3.__currentFile()) {\n              return _this3.__onUploadingDone(info);\n            }\n          }).fail(function (error) {\n            if (object === _this3.__currentFile()) {\n              return _this3.__onUploadingFailed(error);\n            }\n          });\n        }\n      }\n    }, {\n      key: \"__onUploadingDone\",\n      value: function __onUploadingDone(info) {\n        this.element.val(this.__infoToValue(info));\n        this.template.setFileInfo(info);\n        return this.template.loaded();\n      }\n    }, {\n      key: \"__onUploadingFailed\",\n      value: function __onUploadingFailed(error) {\n        this.template.reset();\n        return this.template.error(error);\n      }\n    }, {\n      key: \"__setExternalValue\",\n      value: function __setExternalValue(value) {\n        return this.__setObject(valueToFile(value, this.settings));\n      }\n    }, {\n      key: \"value\",\n      value: function value(_value) {\n        if (_value !== undefined) {\n          this.__hasValue = true;\n\n          this.__setExternalValue(_value);\n\n          return this;\n        } else {\n          return this.currentObject;\n        }\n      }\n    }, {\n      key: \"reloadInfo\",\n      value: function reloadInfo() {\n        return this.value(this.element.val());\n      }\n    }, {\n      key: \"openDialog\",\n      value: function openDialog(tab) {\n        var _this4 = this;\n\n        if (this.settings.systemDialog) {\n          return fileSelectDialog(this.template.content, this.settings, function (input) {\n            return _this4.__handleDirectSelection('object', input.files);\n          });\n        } else {\n          return this.__openDialog(tab);\n        }\n      }\n    }, {\n      key: \"__openDialog\",\n      value: function __openDialog(tab) {\n        var dialogApi;\n        dialogApi = openDialog(this.currentObject, tab, this.settings);\n\n        this.__onDialogOpen.fire(dialogApi);\n\n        return dialogApi.done(this.__setObject.bind(this));\n      }\n    }, {\n      key: \"api\",\n      value: function api() {\n        if (!this.__api) {\n          this.__api = bindAll(this, ['openDialog', 'reloadInfo', 'value', 'validators']);\n          this.__api.onChange = publicCallbacks(this.__onChange);\n          this.__api.onUploadComplete = publicCallbacks(this.__onUploadComplete);\n          this.__api.onDialogOpen = publicCallbacks(this.__onDialogOpen);\n          this.__api.inputElement = this.element.get(0);\n        }\n\n        return this.__api;\n      }\n    }]);\n\n    return BaseWidget;\n  }();\n\n  var Widget$1 = /*#__PURE__*/function (_BaseWidget) {\n    _inherits(Widget, _BaseWidget);\n\n    var _super = _createSuper(Widget);\n\n    function Widget() {\n      _classCallCheck(this, Widget);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(Widget, [{\n      key: \"__currentFile\",\n      value: function __currentFile() {\n        return this.currentObject;\n      }\n    }, {\n      key: \"__handleDirectSelection\",\n      value: function __handleDirectSelection(type, data) {\n        var file = fileFrom(type, data[0], this.settings);\n\n        if (this.settings.systemDialog || !this.settings.previewStep) {\n          return this.__setObject(file);\n        } else {\n          return this.__openDialog('preview').addFiles([file]);\n        }\n      }\n    }]);\n\n    return Widget;\n  }(BaseWidget);\n\n  Widget$1._name = 'SingleWidget';\n\n  var MultipleWidget$1 = /*#__PURE__*/function (_BaseWidget) {\n    _inherits(MultipleWidget, _BaseWidget);\n\n    var _super = _createSuper(MultipleWidget);\n\n    function MultipleWidget() {\n      _classCallCheck(this, MultipleWidget);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(MultipleWidget, [{\n      key: \"__currentFile\",\n      value: function __currentFile() {\n        var ref1;\n        return (ref1 = this.currentObject) != null ? ref1.promise() : undefined;\n      }\n    }, {\n      key: \"__setObject\",\n      value: function __setObject(group) {\n        if (!isFileGroupsEqual(this.currentObject, group)) {\n          return _get(_getPrototypeOf(MultipleWidget.prototype), \"__setObject\", this).call(this, group); // special case, when multiple widget is used with clearable\n          // and user or some external code clears the value after\n          // group loading error.\n        } else if (!group) {\n          this.__reset();\n\n          return this.element.val('');\n        }\n      }\n    }, {\n      key: \"__setExternalValue\",\n      value: function __setExternalValue(value) {\n        var _this = this;\n\n        var groupPr;\n        this.__lastGroupPr = groupPr = valueToGroup(value, this.settings);\n\n        if (value) {\n          this.template.setStatus('started');\n          this.template.statusText.text(locale.t('loadingInfo'));\n        }\n\n        return groupPr.done(function (group) {\n          if (_this.__lastGroupPr === groupPr) {\n            return _this.__setObject(group);\n          }\n        }).fail(function () {\n          if (_this.__lastGroupPr === groupPr) {\n            return _this.__onUploadingFailed('createGroup');\n          }\n        });\n      }\n    }, {\n      key: \"__handleDirectSelection\",\n      value: function __handleDirectSelection(type, data) {\n        var files = filesFrom(type, data, this.settings);\n\n        if (this.settings.systemDialog) {\n          return this.__setObject(FileGroup(files, this.settings));\n        } else {\n          return this.__openDialog('preview').addFiles(files);\n        }\n      }\n    }]);\n\n    return MultipleWidget;\n  }(BaseWidget);\n\n  MultipleWidget$1._name = 'MultipleWidget';\n\n  var dataAttr = 'uploadcareWidget';\n  var selector = '[role~=\"uploadcare-uploader\"]';\n\n  var initialize = function initialize() {\n    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ':root';\n    var el, i, len, ref, res, widgets;\n    res = [];\n    ref = $__default['default'](container);\n\n    for (i = 0, len = ref.length; i < len; i++) {\n      el = ref[i];\n      widgets = _initialize(el.querySelectorAll(selector));\n      res = res.concat(widgets);\n    }\n\n    return res;\n  };\n\n  var _initialize = function _initialize(targets) {\n    var i, len, results, target, widget;\n    results = [];\n\n    for (i = 0, len = targets.length; i < len; i++) {\n      target = targets[i];\n      widget = $__default['default'](target).data(dataAttr);\n\n      if (widget && widget.inputElement === target) {\n        // widget already exists\n        continue;\n      }\n\n      results.push(initializeWidget(target));\n    }\n\n    return results;\n  };\n\n  var SingleWidget = function SingleWidget(el) {\n    return initializeWidget(el, Widget$1);\n  };\n\n  var MultipleWidget = function MultipleWidget(el) {\n    return initializeWidget(el, MultipleWidget$1);\n  };\n\n  var Widget = function Widget(el) {\n    return initializeWidget(el);\n  };\n\n  var initializeWidget = function initializeWidget(input, targetClass) {\n    var inputArr = $__default['default'](input);\n\n    if (inputArr.length === 0) {\n      throw new Error('No DOM elements found matching selector');\n    } else if (inputArr.length > 1) {\n      warn('There are multiple DOM elements matching selector');\n    }\n\n    input = inputArr.eq(0);\n    var s = build(input.data());\n    var Widget = s.multiple ? MultipleWidget$1 : Widget$1;\n\n    if (targetClass && Widget !== targetClass) {\n      throw new Error(\"This element should be processed using \".concat(Widget._name));\n    }\n\n    var api = input.data(dataAttr);\n\n    if (!api || api.inputElement !== input[0]) {\n      cleanup(input);\n      var widget = new Widget(input, s);\n      api = widget.api();\n      input.data(dataAttr, api);\n      widget.template.content.data(dataAttr, api);\n    }\n\n    return api;\n  };\n\n  var cleanup = function cleanup(input) {\n    return input.off('.uploadcare').each(function () {\n      var widget, widgetElement;\n      widgetElement = $__default['default'](this).next('.uploadcare--widget');\n      widget = widgetElement.data(dataAttr);\n\n      if (widget && widget.inputElement === this) {\n        return widgetElement.remove();\n      }\n    });\n  };\n\n  var start = once(function (s, isolated) {\n    // when isolated, call settings.common(s) only\n    s = common(s, isolated);\n\n    if (isolated) {\n      return;\n    }\n\n    if (s.live) {\n      setInterval(initialize, 100);\n    } // should be after settings.common(s) call\n\n\n    return initialize();\n  });\n  isWindowDefined() && $__default['default'](function () {\n    if (!window.UPLOADCARE_MANUAL_START) {\n      start();\n    }\n  });\n\n  var namespace$1 = _objectSpread2(_objectSpread2({}, _namespace), {}, {\n    templates: {\n      JST: JST,\n      tpl: tpl\n    },\n    crop: {\n      CropWidget: CropWidget\n    },\n    dragdrop: {\n      support: support,\n      uploadDrop: uploadDrop,\n      watchDragging: watchDragging,\n      receiveDrop: receiveDrop\n    },\n    ui: {\n      progress: {\n        Circle: Circle,\n        BaseRenderer: BaseRenderer,\n        TextRenderer: TextRenderer,\n        CanvasRenderer: CanvasRenderer\n      }\n    },\n    widget: {\n      tabs: {\n        FileTab: FileTab,\n        UrlTab: UrlTab,\n        CameraTab: CameraTab,\n        RemoteTab: RemoteTab,\n        BasePreviewTab: BasePreviewTab,\n        PreviewTab: PreviewTab,\n        PreviewTabMultiple: PreviewTabMultiple\n      },\n      Template: Template,\n      BaseWidget: BaseWidget,\n      Widget: Widget$1,\n      MultipleWidget: MultipleWidget$1\n    },\n    isDialogOpened: isDialogOpened,\n    closeDialog: closeDialog,\n    openDialog: openDialog,\n    openPreviewDialog: openPreviewDialog,\n    openPanel: openPanel,\n    registerTab: registerTab,\n    initialize: initialize,\n    SingleWidget: SingleWidget,\n    MultipleWidget: MultipleWidget,\n    Widget: Widget,\n    start: start\n  });\n\n  var plugin$1 = createPlugin(namespace$1);\n\n  var uploadcare$1 = _objectSpread2(_objectSpread2({}, uploadcare$2), {}, {\n    plugin: plugin$1,\n    start: start,\n    initialize: initialize,\n    openDialog: openDialog,\n    closeDialog: closeDialog,\n    openPanel: openPanel,\n    registerTab: registerTab,\n    Circle: Circle,\n    SingleWidget: SingleWidget,\n    MultipleWidget: MultipleWidget,\n    Widget: Widget,\n    tabsCss: tabsCss,\n    dragdrop: {\n      receiveDrop: receiveDrop,\n      support: support,\n      uploadDrop: uploadDrop\n    }\n  });\n\n  var namespace = namespace$1;\n  var plugin = createPlugin(namespace);\n\n  var uploadcare = _objectSpread2(_objectSpread2({}, uploadcare$1), {}, {\n    plugin: plugin,\n    locales: Object.keys(locale.translations)\n  });\n\n  return uploadcare;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/uploadcare-widget/uploadcare.js\n");

/***/ })

}]);